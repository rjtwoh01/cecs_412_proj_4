
Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  00002208  0000229c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000210  00802020  00802020  000022bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002360  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ff8e  00000000  00000000  00002758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005272  00000000  00000000  000126e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000899d  00000000  00000000  00017958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000de4  00000000  00000000  000202f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003308e  00000000  00000000  000210dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000699a  00000000  00000000  0005416a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  0005ab08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c52a  00000000  00000000  0005aff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	64 c2       	rjmp	.+1224   	; 0x4ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c2       	rjmp	.+1220   	; 0x4ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c2       	rjmp	.+1216   	; 0x4ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c2       	rjmp	.+1208   	; 0x4ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c2       	rjmp	.+1204   	; 0x4ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c2       	rjmp	.+1200   	; 0x4ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c2       	rjmp	.+1196   	; 0x4ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c2       	rjmp	.+1192   	; 0x4ce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c2       	rjmp	.+1188   	; 0x4ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c2       	rjmp	.+1184   	; 0x4ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c2       	rjmp	.+1176   	; 0x4ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c2       	rjmp	.+1172   	; 0x4ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c2       	rjmp	.+1168   	; 0x4ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c2       	rjmp	.+1164   	; 0x4ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c2       	rjmp	.+1160   	; 0x4ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c2       	rjmp	.+1156   	; 0x4ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c2       	rjmp	.+1152   	; 0x4ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c2       	rjmp	.+1148   	; 0x4ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c2       	rjmp	.+1144   	; 0x4ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c2       	rjmp	.+1140   	; 0x4ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c2       	rjmp	.+1136   	; 0x4ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c2       	rjmp	.+1128   	; 0x4ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c2       	rjmp	.+1124   	; 0x4ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c2       	rjmp	.+1120   	; 0x4ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c2       	rjmp	.+1116   	; 0x4ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c2       	rjmp	.+1112   	; 0x4ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c2       	rjmp	.+1104   	; 0x4ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c2       	rjmp	.+1100   	; 0x4ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c2       	rjmp	.+1096   	; 0x4ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c2       	rjmp	.+1092   	; 0x4ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c2       	rjmp	.+1088   	; 0x4ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c2       	rjmp	.+1084   	; 0x4ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c2       	rjmp	.+1080   	; 0x4ce <__bad_interrupt>
      96:	00 00       	nop
      98:	1a c2       	rjmp	.+1076   	; 0x4ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__vector_39>
      a0:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__vector_40>
      a4:	0c 94 45 0a 	jmp	0x148a	; 0x148a <__vector_41>
      a8:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_42>
      ac:	10 c2       	rjmp	.+1056   	; 0x4ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0e c2       	rjmp	.+1052   	; 0x4ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c c2       	rjmp	.+1048   	; 0x4ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c2       	rjmp	.+1044   	; 0x4ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	08 c2       	rjmp	.+1040   	; 0x4ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	06 c2       	rjmp	.+1036   	; 0x4ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	04 c2       	rjmp	.+1032   	; 0x4ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	02 c2       	rjmp	.+1028   	; 0x4ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	00 c2       	rjmp	.+1024   	; 0x4ce <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fe c1       	rjmp	.+1020   	; 0x4ce <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fc c1       	rjmp	.+1016   	; 0x4ce <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fa c1       	rjmp	.+1012   	; 0x4ce <__bad_interrupt>
      da:	00 00       	nop
      dc:	f8 c1       	rjmp	.+1008   	; 0x4ce <__bad_interrupt>
      de:	00 00       	nop
      e0:	f6 c1       	rjmp	.+1004   	; 0x4ce <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 c1       	rjmp	.+1000   	; 0x4ce <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f2 c1       	rjmp	.+996    	; 0x4ce <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f0 c1       	rjmp	.+992    	; 0x4ce <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ee c1       	rjmp	.+988    	; 0x4ce <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ec c1       	rjmp	.+984    	; 0x4ce <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ea c1       	rjmp	.+980    	; 0x4ce <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e8 c1       	rjmp	.+976    	; 0x4ce <__bad_interrupt>
      fe:	00 00       	nop
     100:	e6 c1       	rjmp	.+972    	; 0x4ce <__bad_interrupt>
     102:	00 00       	nop
     104:	e4 c1       	rjmp	.+968    	; 0x4ce <__bad_interrupt>
     106:	00 00       	nop
     108:	e2 c1       	rjmp	.+964    	; 0x4ce <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e0 c1       	rjmp	.+960    	; 0x4ce <__bad_interrupt>
     10e:	00 00       	nop
     110:	de c1       	rjmp	.+956    	; 0x4ce <__bad_interrupt>
     112:	00 00       	nop
     114:	dc c1       	rjmp	.+952    	; 0x4ce <__bad_interrupt>
     116:	00 00       	nop
     118:	da c1       	rjmp	.+948    	; 0x4ce <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__vector_71>
     120:	0c 94 4b 09 	jmp	0x1296	; 0x1296 <__vector_72>
     124:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_73>
     128:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_74>
     12c:	d0 c1       	rjmp	.+928    	; 0x4ce <__bad_interrupt>
     12e:	00 00       	nop
     130:	ce c1       	rjmp	.+924    	; 0x4ce <__bad_interrupt>
     132:	00 00       	nop
     134:	cc c1       	rjmp	.+920    	; 0x4ce <__bad_interrupt>
     136:	00 00       	nop
     138:	ca c1       	rjmp	.+916    	; 0x4ce <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c8 c1       	rjmp	.+912    	; 0x4ce <__bad_interrupt>
     13e:	00 00       	nop
     140:	c6 c1       	rjmp	.+908    	; 0x4ce <__bad_interrupt>
     142:	00 00       	nop
     144:	c4 c1       	rjmp	.+904    	; 0x4ce <__bad_interrupt>
     146:	00 00       	nop
     148:	c2 c1       	rjmp	.+900    	; 0x4ce <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c0 c1       	rjmp	.+896    	; 0x4ce <__bad_interrupt>
     14e:	00 00       	nop
     150:	be c1       	rjmp	.+892    	; 0x4ce <__bad_interrupt>
     152:	00 00       	nop
     154:	bc c1       	rjmp	.+888    	; 0x4ce <__bad_interrupt>
     156:	00 00       	nop
     158:	ba c1       	rjmp	.+884    	; 0x4ce <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b8 c1       	rjmp	.+880    	; 0x4ce <__bad_interrupt>
     15e:	00 00       	nop
     160:	b6 c1       	rjmp	.+876    	; 0x4ce <__bad_interrupt>
     162:	00 00       	nop
     164:	b4 c1       	rjmp	.+872    	; 0x4ce <__bad_interrupt>
     166:	00 00       	nop
     168:	b2 c1       	rjmp	.+868    	; 0x4ce <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b0 c1       	rjmp	.+864    	; 0x4ce <__bad_interrupt>
     16e:	00 00       	nop
     170:	ae c1       	rjmp	.+860    	; 0x4ce <__bad_interrupt>
     172:	00 00       	nop
     174:	ac c1       	rjmp	.+856    	; 0x4ce <__bad_interrupt>
     176:	00 00       	nop
     178:	aa c1       	rjmp	.+852    	; 0x4ce <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a8 c1       	rjmp	.+848    	; 0x4ce <__bad_interrupt>
     17e:	00 00       	nop
     180:	a6 c1       	rjmp	.+844    	; 0x4ce <__bad_interrupt>
     182:	00 00       	nop
     184:	a4 c1       	rjmp	.+840    	; 0x4ce <__bad_interrupt>
     186:	00 00       	nop
     188:	a2 c1       	rjmp	.+836    	; 0x4ce <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a0 c1       	rjmp	.+832    	; 0x4ce <__bad_interrupt>
     18e:	00 00       	nop
     190:	9e c1       	rjmp	.+828    	; 0x4ce <__bad_interrupt>
     192:	00 00       	nop
     194:	9c c1       	rjmp	.+824    	; 0x4ce <__bad_interrupt>
     196:	00 00       	nop
     198:	9a c1       	rjmp	.+820    	; 0x4ce <__bad_interrupt>
     19a:	00 00       	nop
     19c:	98 c1       	rjmp	.+816    	; 0x4ce <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	96 c1       	rjmp	.+812    	; 0x4ce <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	94 c1       	rjmp	.+808    	; 0x4ce <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	92 c1       	rjmp	.+804    	; 0x4ce <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	90 c1       	rjmp	.+800    	; 0x4ce <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8e c1       	rjmp	.+796    	; 0x4ce <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8c c1       	rjmp	.+792    	; 0x4ce <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8a c1       	rjmp	.+788    	; 0x4ce <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	88 c1       	rjmp	.+784    	; 0x4ce <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	86 c1       	rjmp	.+780    	; 0x4ce <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	84 c1       	rjmp	.+776    	; 0x4ce <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	82 c1       	rjmp	.+772    	; 0x4ce <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	80 c1       	rjmp	.+768    	; 0x4ce <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7e c1       	rjmp	.+764    	; 0x4ce <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7c c1       	rjmp	.+760    	; 0x4ce <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7a c1       	rjmp	.+756    	; 0x4ce <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	78 c1       	rjmp	.+752    	; 0x4ce <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	76 c1       	rjmp	.+748    	; 0x4ce <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	74 c1       	rjmp	.+744    	; 0x4ce <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	72 c1       	rjmp	.+740    	; 0x4ce <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	70 c1       	rjmp	.+736    	; 0x4ce <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6e c1       	rjmp	.+732    	; 0x4ce <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6c c1       	rjmp	.+728    	; 0x4ce <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6a c1       	rjmp	.+724    	; 0x4ce <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1e70>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6658>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x6630>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5658>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1e30>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e8 e0       	ldi	r30, 0x08	; 8
     4a6:	f2 e2       	ldi	r31, 0x22	; 34
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a0 32       	cpi	r26, 0x20	; 32
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a0 e2       	ldi	r26, 0x20	; 32
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a0 33       	cpi	r26, 0x30	; 48
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	48 d0       	rcall	.+144    	; 0x55a <main>
     4ca:	0c 94 02 11 	jmp	0x2204	; 0x2204 <_exit>

000004ce <__bad_interrupt>:
     4ce:	98 cd       	rjmp	.-1232   	; 0x0 <__vectors>

000004d0 <adc_handler>:
* \param adc Pointer to ADC module.
* \param ch_mask ADC channel mask.
* \param result Conversion result from ADC channel.
*/
static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
     4d0:	cf 92       	push	r12
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	a1 97       	sbiw	r28, 0x21	; 33
     4e4:	cd bf       	out	0x3d, r28	; 61
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	7c 01       	movw	r14, r24
     4ea:	16 2f       	mov	r17, r22
	} else {
	temperature = (int8_t)((-0.0777 * result) + 65.1);
	}*/

	temperature = result;
	last_temperature = temperature;
     4ec:	40 93 20 20 	sts	0x2020, r20	; 0x802020 <__data_end>
     4f0:	50 93 21 20 	sts	0x2021, r21	; 0x802021 <__data_end+0x1>
	
	// Write temperature to display
	snprintf(out_str, OUTPUT_STR_SIZE, "Voltage: %4d mVDC", last_temperature);
     4f4:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
     4f8:	90 91 21 20 	lds	r25, 0x2021	; 0x802021 <__data_end+0x1>
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	8d e0       	ldi	r24, 0x0D	; 13
     502:	90 e2       	ldi	r25, 0x20	; 32
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	1f 92       	push	r1
     50a:	80 e2       	ldi	r24, 0x20	; 32
     50c:	8f 93       	push	r24
     50e:	ce 01       	movw	r24, r28
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	6c 01       	movw	r12, r24
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <snprintf>
	gfx_mono_draw_string(out_str, 0, 0, &sysfont);
     51c:	20 e0       	ldi	r18, 0x00	; 0
     51e:	30 e2       	ldi	r19, 0x20	; 32
     520:	40 e0       	ldi	r20, 0x00	; 0
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	c6 01       	movw	r24, r12
     526:	e9 d4       	rcall	.+2514   	; 0xefa <gfx_mono_draw_string>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     528:	8f b7       	in	r24, 0x3f	; 63
     52a:	89 a3       	std	Y+33, r24	; 0x21
	cpu_irq_disable();
     52c:	f8 94       	cli
	return flags;
     52e:	99 a1       	ldd	r25, Y+33	; 0x21
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     530:	f7 01       	movw	r30, r14
     532:	80 81       	ld	r24, Z
     534:	61 2f       	mov	r22, r17
     536:	66 0f       	add	r22, r22
     538:	66 0f       	add	r22, r22
     53a:	68 2b       	or	r22, r24
     53c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     53e:	9f bf       	out	0x3f, r25	; 63
	
	// Start next conversion.
	adc_start_conversion(adc, ch_mask);
}
     540:	cd bf       	out	0x3d, r28	; 61
     542:	de bf       	out	0x3e, r29	; 62
     544:	a1 96       	adiw	r28, 0x21	; 33
     546:	cd bf       	out	0x3d, r28	; 61
     548:	de bf       	out	0x3e, r29	; 62
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	08 95       	ret

0000055a <main>:

int main(void)
{
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	2c 97       	sbiw	r28, 0x0c	; 12
     564:	cd bf       	out	0x3d, r28	; 61
	struct adc_config         adc_conf;
	struct adc_channel_config adcch_conf;
	
	board_init();
	sysclk_init();
     566:	de bf       	out	0x3e, r29	; 62
     568:	8d d5       	rcall	.+2842   	; 0x1084 <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     56a:	48 d2       	rcall	.+1168   	; 0x9fc <sysclk_init>
     56c:	e6 e2       	ldi	r30, 0x26	; 38
     56e:	f2 e2       	ldi	r31, 0x22	; 34
     570:	10 82       	st	Z, r1
     572:	11 82       	std	Z+1, r1	; 0x01
     574:	12 82       	std	Z+2, r1	; 0x02
     576:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     578:	14 82       	std	Z+4, r1	; 0x04
     57a:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();
	irq_initialize_vectors();
     57c:	15 83       	std	Z+5, r17	; 0x05
     57e:	87 e0       	ldi	r24, 0x07	; 7
	cpu_irq_enable();
     580:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	gfx_mono_init();
     584:	78 94       	sei
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     586:	45 d3       	rcall	.+1674   	; 0xc12 <gfx_mono_st7565r_init>
     588:	80 e1       	ldi	r24, 0x10	; 16
     58a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	#ifndef CONF_BOARD_OLED_UG_2832HSWEG04
	ioport_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	#endif
	
	// Initialize configuration structures.
	adc_read_configuration(&ADCB, &adc_conf);
     58e:	be 01       	movw	r22, r28
     590:	6f 5f       	subi	r22, 0xFF	; 255
     592:	7f 4f       	sbci	r23, 0xFF	; 255
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	92 e0       	ldi	r25, 0x02	; 2
     598:	0e 94 0f 0b 	call	0x161e	; 0x161e <adc_read_configuration>
	adcch_read_configuration(&ADCB, ADC_CH0, &adcch_conf);
     59c:	ae 01       	movw	r20, r28
     59e:	48 5f       	subi	r20, 0xF8	; 248
     5a0:	5f 4f       	sbci	r21, 0xFF	; 255
     5a2:	61 e0       	ldi	r22, 0x01	; 1
     5a4:	80 e4       	ldi	r24, 0x40	; 64
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	0e 94 93 0b 	call	0x1726	; 0x1726 <adcch_read_configuration>
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     5ac:	9a 81       	ldd	r25, Y+2	; 0x02
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     5b0:	8f 78       	andi	r24, 0x8F	; 143
     5b2:	24 e0       	ldi	r18, 0x04	; 4
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     5b4:	2d 83       	std	Y+5, r18	; 0x05
     5b6:	91 7e       	andi	r25, 0xE1	; 225
     5b8:	94 61       	ori	r25, 0x14	; 20
		conf->evctrl = ADC_EVACT_NONE_gc;
     5ba:	9a 83       	std	Y+2, r25	; 0x02
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
     5bc:	1c 82       	std	Y+4, r1	; 0x04
     5be:	81 61       	ori	r24, 0x11	; 17
	ADC_REF_VCC);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_enable_internal_input(&adc_conf, ADC_INT_TEMPSENSE);
	
	adc_write_configuration(&ADCB, &adc_conf);
     5c0:	8b 83       	std	Y+3, r24	; 0x03
     5c2:	be 01       	movw	r22, r28
     5c4:	6f 5f       	subi	r22, 0xFF	; 255
     5c6:	7f 4f       	sbci	r23, 0xFF	; 255
     5c8:	80 e4       	ldi	r24, 0x40	; 64
     5ca:	92 e0       	ldi	r25, 0x02	; 2
	adc_set_callback(&ADCB, &adc_handler);
     5cc:	c2 d7       	rcall	.+3972   	; 0x1552 <adc_write_configuration>
     5ce:	68 e6       	ldi	r22, 0x68	; 104
     5d0:	72 e0       	ldi	r23, 0x02	; 2
     5d2:	80 e4       	ldi	r24, 0x40	; 64
     5d4:	92 e0       	ldi	r25, 0x02	; 2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     5d6:	a5 d5       	rcall	.+2890   	; 0x1122 <adc_set_callback>
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     5d8:	18 87       	std	Y+8, r17	; 0x08
     5da:	88 e0       	ldi	r24, 0x08	; 8
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     5dc:	89 87       	std	Y+9, r24	; 0x09
     5de:	8a 85       	ldd	r24, Y+10	; 0x0a
     5e0:	80 7f       	andi	r24, 0xF0	; 240
     5e2:	81 60       	ori	r24, 0x01	; 1
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE,
	1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adcch_conf);
	
	adcch_write_configuration(&ADCB, ADC_CH0, &adcch_conf);
     5e4:	8a 87       	std	Y+10, r24	; 0x0a
     5e6:	ae 01       	movw	r20, r28
     5e8:	48 5f       	subi	r20, 0xF8	; 248
     5ea:	5f 4f       	sbci	r21, 0xFF	; 255
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	80 e4       	ldi	r24, 0x40	; 64
     5f0:	92 e0       	ldi	r25, 0x02	; 2
	
	// Enable the ADC and start the first conversion.
	adc_enable(&ADCB);
     5f2:	0e 94 48 0b 	call	0x1690	; 0x1690 <adcch_write_configuration>
     5f6:	80 e4       	ldi	r24, 0x40	; 64
     5f8:	92 e0       	ldi	r25, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     5fa:	ef d5       	rcall	.+3038   	; 0x11da <adc_enable>
     5fc:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     5fe:	8c 87       	std	Y+12, r24	; 0x0c
	return flags;
     600:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     602:	9c 85       	ldd	r25, Y+12	; 0x0c
     604:	e0 e4       	ldi	r30, 0x40	; 64
     606:	f2 e0       	ldi	r31, 0x02	; 2
     608:	80 81       	ld	r24, Z
     60a:	84 60       	ori	r24, 0x04	; 4
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     60c:	80 83       	st	Z, r24

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     60e:	9f bf       	out	0x3f, r25	; 63
     610:	46 e2       	ldi	r20, 0x26	; 38
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
     612:	52 e2       	ldi	r21, 0x22	; 34
     614:	28 e4       	ldi	r18, 0x48	; 72
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     616:	30 e0       	ldi	r19, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     618:	f8 94       	cli
     61a:	da 01       	movw	r26, r20
     61c:	8c 91       	ld	r24, X
     61e:	81 11       	cpse	r24, r1
     620:	09 c0       	rjmp	.+18     	; 0x634 <main+0xda>
     622:	a7 e2       	ldi	r26, 0x27	; 39
     624:	b2 e2       	ldi	r27, 0x22	; 34
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     626:	e0 e0       	ldi	r30, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     628:	ef 5f       	subi	r30, 0xFF	; 255
     62a:	8d 91       	ld	r24, X+
     62c:	88 23       	and	r24, r24
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
     62e:	e1 f3       	breq	.-8      	; 0x628 <main+0xce>
     630:	e1 11       	cpse	r30, r1
		cpu_irq_enable();
     632:	02 c0       	rjmp	.+4      	; 0x638 <main+0xde>
     634:	78 94       	sei
     636:	f0 cf       	rjmp	.-32     	; 0x618 <main+0xbe>
     638:	d9 01       	movw	r26, r18

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
     63a:	8c 91       	ld	r24, X
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	ea 5f       	subi	r30, 0xFA	; 250
     640:	ff 4d       	sbci	r31, 0xDF	; 223
     642:	81 7f       	andi	r24, 0xF1	; 241
     644:	90 81       	ld	r25, Z
     646:	89 2b       	or	r24, r25
	sleep_enable();
     648:	8c 93       	st	X, r24
     64a:	8c 91       	ld	r24, X
     64c:	81 60       	ori	r24, 0x01	; 1

	cpu_irq_enable();
     64e:	8c 93       	st	X, r24
	sleep_enter();
     650:	78 94       	sei

	sleep_disable();
     652:	88 95       	sleep
     654:	f9 01       	movw	r30, r18
     656:	80 81       	ld	r24, Z
     658:	8e 7f       	andi	r24, 0xFE	; 254
     65a:	80 83       	st	Z, r24
     65c:	dd cf       	rjmp	.-70     	; 0x618 <main+0xbe>

0000065e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     65e:	04 c0       	rjmp	.+8      	; 0x668 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     660:	61 50       	subi	r22, 0x01	; 1
     662:	71 09       	sbc	r23, r1
     664:	81 09       	sbc	r24, r1
     666:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     668:	61 15       	cp	r22, r1
     66a:	71 05       	cpc	r23, r1
     66c:	81 05       	cpc	r24, r1
     66e:	91 05       	cpc	r25, r1
     670:	b9 f7       	brne	.-18     	; 0x660 <__portable_avr_delay_cycles+0x2>
     672:	08 95       	ret

00000674 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     674:	bf 92       	push	r11
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	1f 92       	push	r1
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     68c:	00 e0       	ldi	r16, 0x00	; 0
     68e:	16 e0       	ldi	r17, 0x06	; 6
     690:	68 94       	set
     692:	ff 24       	eor	r15, r15
     694:	f3 f8       	bld	r15, 3
     696:	f8 01       	movw	r30, r16
     698:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     69a:	6e e0       	ldi	r22, 0x0E	; 14
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	dd df       	rcall	.-70     	; 0x65e <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     6a4:	f8 01       	movw	r30, r16
     6a6:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     6a8:	6e e0       	ldi	r22, 0x0E	; 14
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	d6 df       	rcall	.-84     	; 0x65e <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     6b2:	0f 2e       	mov	r0, r31
     6b4:	fb e2       	ldi	r31, 0x2B	; 43
     6b6:	bf 2e       	mov	r11, r31
     6b8:	f0 2d       	mov	r31, r0
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     6ba:	b9 82       	std	Y+1, r11	; 0x01
     6bc:	80 ea       	ldi	r24, 0xA0	; 160
     6be:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     6c0:	6c d4       	rcall	.+2264   	; 0xf9a <usart_spi_init>
     6c2:	c1 2c       	mov	r12, r1
     6c4:	d1 2c       	mov	r13, r1
     6c6:	76 01       	movw	r14, r12
     6c8:	00 e4       	ldi	r16, 0x40	; 64
     6ca:	12 e4       	ldi	r17, 0x42	; 66
     6cc:	2f e0       	ldi	r18, 0x0F	; 15
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	43 e0       	ldi	r20, 0x03	; 3
     6d2:	be 01       	movw	r22, r28
     6d4:	6f 5f       	subi	r22, 0xFF	; 255
     6d6:	7f 4f       	sbci	r23, 0xFF	; 255
     6d8:	80 ea       	ldi	r24, 0xA0	; 160
     6da:	99 e0       	ldi	r25, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     6dc:	8d d4       	rcall	.+2330   	; 0xff8 <usart_spi_setup_device>
     6de:	00 e6       	ldi	r16, 0x60	; 96
     6e0:	16 e0       	ldi	r17, 0x06	; 6
     6e2:	ff 24       	eor	r15, r15
     6e4:	f3 94       	inc	r15
     6e6:	f8 01       	movw	r30, r16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6e8:	f6 82       	std	Z+6, r15	; 0x06
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ea:	b9 82       	std	Y+1, r11	; 0x01
     6ec:	be 01       	movw	r22, r28
     6ee:	6f 5f       	subi	r22, 0xFF	; 255
     6f0:	7f 4f       	sbci	r23, 0xFF	; 255
     6f2:	80 ea       	ldi	r24, 0xA0	; 160
     6f4:	99 e0       	ldi	r25, 0x09	; 9
     6f6:	9a d4       	rcall	.+2356   	; 0x102c <usart_spi_select_device>
     6f8:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6fa:	f6 82       	std	Z+6, r15	; 0x06
     6fc:	e0 ea       	ldi	r30, 0xA0	; 160
     6fe:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     700:	81 81       	ldd	r24, Z+1	; 0x01
     702:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     704:	fd cf       	rjmp	.-6      	; 0x700 <st7565r_init+0x8c>
     706:	80 ea       	ldi	r24, 0xA0	; 160
     708:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     70c:	e0 ea       	ldi	r30, 0xA0	; 160
     70e:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     710:	81 81       	ldd	r24, Z+1	; 0x01
     712:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     714:	fd cf       	rjmp	.-6      	; 0x710 <st7565r_init+0x9c>
     716:	e0 ea       	ldi	r30, 0xA0	; 160
     718:	f9 e0       	ldi	r31, 0x09	; 9
     71a:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     71c:	81 83       	std	Z+1, r24	; 0x01
     71e:	80 81       	ld	r24, Z
     720:	be 01       	movw	r22, r28
     722:	6f 5f       	subi	r22, 0xFF	; 255
     724:	7f 4f       	sbci	r23, 0xFF	; 255
     726:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     728:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     72a:	96 d4       	rcall	.+2348   	; 0x1058 <usart_spi_deselect_device>
     72c:	8b e2       	ldi	r24, 0x2B	; 43
     72e:	89 83       	std	Y+1, r24	; 0x01
     730:	be 01       	movw	r22, r28
     732:	6f 5f       	subi	r22, 0xFF	; 255
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	80 ea       	ldi	r24, 0xA0	; 160
     738:	99 e0       	ldi	r25, 0x09	; 9
     73a:	78 d4       	rcall	.+2288   	; 0x102c <usart_spi_select_device>
     73c:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     73e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     742:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     744:	f9 e0       	ldi	r31, 0x09	; 9
     746:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     748:	85 ff       	sbrs	r24, 5
     74a:	fd cf       	rjmp	.-6      	; 0x746 <st7565r_init+0xd2>
     74c:	86 ea       	ldi	r24, 0xA6	; 166
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     74e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     752:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     754:	f9 e0       	ldi	r31, 0x09	; 9
     756:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     758:	86 ff       	sbrs	r24, 6
     75a:	fd cf       	rjmp	.-6      	; 0x756 <st7565r_init+0xe2>
     75c:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     75e:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     760:	80 e4       	ldi	r24, 0x40	; 64
     762:	81 83       	std	Z+1, r24	; 0x01
     764:	80 81       	ld	r24, Z
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     76c:	80 ea       	ldi	r24, 0xA0	; 160
     76e:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     770:	73 d4       	rcall	.+2278   	; 0x1058 <usart_spi_deselect_device>
     772:	8b e2       	ldi	r24, 0x2B	; 43
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	be 01       	movw	r22, r28
     778:	6f 5f       	subi	r22, 0xFF	; 255
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	80 ea       	ldi	r24, 0xA0	; 160
     77e:	99 e0       	ldi	r25, 0x09	; 9
     780:	55 d4       	rcall	.+2218   	; 0x102c <usart_spi_select_device>
     782:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     784:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     788:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     78a:	f9 e0       	ldi	r31, 0x09	; 9
     78c:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     78e:	85 ff       	sbrs	r24, 5
     790:	fd cf       	rjmp	.-6      	; 0x78c <st7565r_init+0x118>
     792:	88 ec       	ldi	r24, 0xC8	; 200
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     794:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     798:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     79a:	f9 e0       	ldi	r31, 0x09	; 9
     79c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     79e:	86 ff       	sbrs	r24, 6
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <st7565r_init+0x128>
     7a2:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7a4:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7a6:	80 e4       	ldi	r24, 0x40	; 64
     7a8:	81 83       	std	Z+1, r24	; 0x01
     7aa:	80 81       	ld	r24, Z
     7ac:	be 01       	movw	r22, r28
     7ae:	6f 5f       	subi	r22, 0xFF	; 255
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7b2:	80 ea       	ldi	r24, 0xA0	; 160
     7b4:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7b6:	50 d4       	rcall	.+2208   	; 0x1058 <usart_spi_deselect_device>
     7b8:	8b e2       	ldi	r24, 0x2B	; 43
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	be 01       	movw	r22, r28
     7be:	6f 5f       	subi	r22, 0xFF	; 255
     7c0:	7f 4f       	sbci	r23, 0xFF	; 255
     7c2:	80 ea       	ldi	r24, 0xA0	; 160
     7c4:	99 e0       	ldi	r25, 0x09	; 9
     7c6:	32 d4       	rcall	.+2148   	; 0x102c <usart_spi_select_device>
     7c8:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     7ce:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7d0:	f9 e0       	ldi	r31, 0x09	; 9
     7d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7d4:	85 ff       	sbrs	r24, 5
     7d6:	fd cf       	rjmp	.-6      	; 0x7d2 <st7565r_init+0x15e>
     7d8:	82 ea       	ldi	r24, 0xA2	; 162
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7da:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     7de:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7e0:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7e2:	81 81       	ldd	r24, Z+1	; 0x01
     7e4:	86 ff       	sbrs	r24, 6
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <st7565r_init+0x16e>
     7e8:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7ea:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7ec:	80 e4       	ldi	r24, 0x40	; 64
     7ee:	81 83       	std	Z+1, r24	; 0x01
     7f0:	80 81       	ld	r24, Z
     7f2:	be 01       	movw	r22, r28
     7f4:	6f 5f       	subi	r22, 0xFF	; 255
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7f8:	80 ea       	ldi	r24, 0xA0	; 160
     7fa:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7fc:	2d d4       	rcall	.+2138   	; 0x1058 <usart_spi_deselect_device>
     7fe:	8b e2       	ldi	r24, 0x2B	; 43
     800:	89 83       	std	Y+1, r24	; 0x01
     802:	be 01       	movw	r22, r28
     804:	6f 5f       	subi	r22, 0xFF	; 255
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	80 ea       	ldi	r24, 0xA0	; 160
     80a:	99 e0       	ldi	r25, 0x09	; 9
     80c:	0f d4       	rcall	.+2078   	; 0x102c <usart_spi_select_device>
     80e:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     810:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     814:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     816:	f9 e0       	ldi	r31, 0x09	; 9
     818:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     81a:	85 ff       	sbrs	r24, 5
     81c:	fd cf       	rjmp	.-6      	; 0x818 <st7565r_init+0x1a4>
     81e:	8f e2       	ldi	r24, 0x2F	; 47
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     820:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     824:	e0 ea       	ldi	r30, 0xA0	; 160
     826:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     828:	81 81       	ldd	r24, Z+1	; 0x01
     82a:	86 ff       	sbrs	r24, 6
     82c:	fd cf       	rjmp	.-6      	; 0x828 <st7565r_init+0x1b4>
     82e:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     830:	f9 e0       	ldi	r31, 0x09	; 9
     832:	80 e4       	ldi	r24, 0x40	; 64
     834:	81 83       	std	Z+1, r24	; 0x01
     836:	80 81       	ld	r24, Z
     838:	be 01       	movw	r22, r28
     83a:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     840:	99 e0       	ldi	r25, 0x09	; 9
     842:	0a d4       	rcall	.+2068   	; 0x1058 <usart_spi_deselect_device>
     844:	8b e2       	ldi	r24, 0x2B	; 43
     846:	89 83       	std	Y+1, r24	; 0x01
     848:	be 01       	movw	r22, r28
     84a:	6f 5f       	subi	r22, 0xFF	; 255
     84c:	7f 4f       	sbci	r23, 0xFF	; 255
     84e:	80 ea       	ldi	r24, 0xA0	; 160
     850:	99 e0       	ldi	r25, 0x09	; 9
     852:	ec d3       	rcall	.+2008   	; 0x102c <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     85a:	e0 ea       	ldi	r30, 0xA0	; 160
     85c:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     85e:	81 81       	ldd	r24, Z+1	; 0x01
     860:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     862:	fd cf       	rjmp	.-6      	; 0x85e <st7565r_init+0x1ea>
     864:	88 ef       	ldi	r24, 0xF8	; 248
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     866:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     86a:	e0 ea       	ldi	r30, 0xA0	; 160
     86c:	f9 e0       	ldi	r31, 0x09	; 9
     86e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     870:	86 ff       	sbrs	r24, 6
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     872:	fd cf       	rjmp	.-6      	; 0x86e <st7565r_init+0x1fa>
     874:	e0 ea       	ldi	r30, 0xA0	; 160
     876:	f9 e0       	ldi	r31, 0x09	; 9
     878:	80 e4       	ldi	r24, 0x40	; 64
     87a:	81 83       	std	Z+1, r24	; 0x01
     87c:	80 81       	ld	r24, Z
     87e:	be 01       	movw	r22, r28
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     884:	80 ea       	ldi	r24, 0xA0	; 160
     886:	99 e0       	ldi	r25, 0x09	; 9
     888:	e7 d3       	rcall	.+1998   	; 0x1058 <usart_spi_deselect_device>
     88a:	8b e2       	ldi	r24, 0x2B	; 43
     88c:	89 83       	std	Y+1, r24	; 0x01
     88e:	be 01       	movw	r22, r28
     890:	6f 5f       	subi	r22, 0xFF	; 255
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	80 ea       	ldi	r24, 0xA0	; 160
     896:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     898:	c9 d3       	rcall	.+1938   	; 0x102c <usart_spi_select_device>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8a0:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8a2:	f9 e0       	ldi	r31, 0x09	; 9
     8a4:	81 81       	ldd	r24, Z+1	; 0x01
     8a6:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8a8:	fd cf       	rjmp	.-6      	; 0x8a4 <st7565r_init+0x230>
     8aa:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ae:	e0 ea       	ldi	r30, 0xA0	; 160
     8b0:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8b4:	86 ff       	sbrs	r24, 6
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <st7565r_init+0x23e>
     8b8:	e0 ea       	ldi	r30, 0xA0	; 160
     8ba:	f9 e0       	ldi	r31, 0x09	; 9
     8bc:	80 e4       	ldi	r24, 0x40	; 64
     8be:	81 83       	std	Z+1, r24	; 0x01
     8c0:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	80 ea       	ldi	r24, 0xA0	; 160
     8ca:	99 e0       	ldi	r25, 0x09	; 9
     8cc:	c5 d3       	rcall	.+1930   	; 0x1058 <usart_spi_deselect_device>
     8ce:	8b e2       	ldi	r24, 0x2B	; 43
     8d0:	89 83       	std	Y+1, r24	; 0x01
     8d2:	be 01       	movw	r22, r28
     8d4:	6f 5f       	subi	r22, 0xFF	; 255
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8da:	99 e0       	ldi	r25, 0x09	; 9
     8dc:	a7 d3       	rcall	.+1870   	; 0x102c <usart_spi_select_device>
     8de:	81 e0       	ldi	r24, 0x01	; 1
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8e4:	e0 ea       	ldi	r30, 0xA0	; 160
     8e6:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
     8ea:	85 ff       	sbrs	r24, 5
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <st7565r_init+0x274>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8ee:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     8f4:	e0 ea       	ldi	r30, 0xA0	; 160
     8f6:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8f8:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8fa:	86 ff       	sbrs	r24, 6
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <st7565r_init+0x284>
     8fe:	e0 ea       	ldi	r30, 0xA0	; 160
     900:	f9 e0       	ldi	r31, 0x09	; 9
     902:	80 e4       	ldi	r24, 0x40	; 64
     904:	81 83       	std	Z+1, r24	; 0x01
     906:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
     90e:	80 ea       	ldi	r24, 0xA0	; 160
     910:	99 e0       	ldi	r25, 0x09	; 9
     912:	a2 d3       	rcall	.+1860   	; 0x1058 <usart_spi_deselect_device>
     914:	8b e2       	ldi	r24, 0x2B	; 43
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	be 01       	movw	r22, r28
     91a:	6f 5f       	subi	r22, 0xFF	; 255
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     920:	99 e0       	ldi	r25, 0x09	; 9
     922:	84 d3       	rcall	.+1800   	; 0x102c <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     92a:	e0 ea       	ldi	r30, 0xA0	; 160
     92c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     92e:	81 81       	ldd	r24, Z+1	; 0x01
     930:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     932:	fd cf       	rjmp	.-6      	; 0x92e <st7565r_init+0x2ba>
     934:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     936:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     93a:	e0 ea       	ldi	r30, 0xA0	; 160
     93c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     93e:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     940:	86 ff       	sbrs	r24, 6
     942:	fd cf       	rjmp	.-6      	; 0x93e <st7565r_init+0x2ca>
     944:	e0 ea       	ldi	r30, 0xA0	; 160
     946:	f9 e0       	ldi	r31, 0x09	; 9
     948:	80 e4       	ldi	r24, 0x40	; 64
     94a:	81 83       	std	Z+1, r24	; 0x01
     94c:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     94e:	be 01       	movw	r22, r28
     950:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	80 ea       	ldi	r24, 0xA0	; 160
     956:	99 e0       	ldi	r25, 0x09	; 9
     958:	7f d3       	rcall	.+1790   	; 0x1058 <usart_spi_deselect_device>
     95a:	8b e2       	ldi	r24, 0x2B	; 43
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     964:	80 ea       	ldi	r24, 0xA0	; 160
     966:	99 e0       	ldi	r25, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     968:	61 d3       	rcall	.+1730   	; 0x102c <usart_spi_select_device>
     96a:	81 e0       	ldi	r24, 0x01	; 1
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     96c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     970:	e0 ea       	ldi	r30, 0xA0	; 160
     972:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     978:	fd cf       	rjmp	.-6      	; 0x974 <st7565r_init+0x300>
     97a:	89 e3       	ldi	r24, 0x39	; 57
     97c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     980:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     982:	f9 e0       	ldi	r31, 0x09	; 9
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	86 ff       	sbrs	r24, 6
     988:	fd cf       	rjmp	.-6      	; 0x984 <st7565r_init+0x310>
     98a:	e0 ea       	ldi	r30, 0xA0	; 160
     98c:	f9 e0       	ldi	r31, 0x09	; 9
     98e:	80 e4       	ldi	r24, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     990:	81 83       	std	Z+1, r24	; 0x01
     992:	80 81       	ld	r24, Z
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     994:	be 01       	movw	r22, r28
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	80 ea       	ldi	r24, 0xA0	; 160
     99c:	99 e0       	ldi	r25, 0x09	; 9
     99e:	5c d3       	rcall	.+1720   	; 0x1058 <usart_spi_deselect_device>
     9a0:	8b e2       	ldi	r24, 0x2B	; 43
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	be 01       	movw	r22, r28
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	80 ea       	ldi	r24, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9ac:	99 e0       	ldi	r25, 0x09	; 9
     9ae:	3e d3       	rcall	.+1660   	; 0x102c <usart_spi_select_device>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9b6:	e0 ea       	ldi	r30, 0xA0	; 160
     9b8:	f9 e0       	ldi	r31, 0x09	; 9
     9ba:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9bc:	85 ff       	sbrs	r24, 5
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <st7565r_init+0x346>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9c0:	8f ea       	ldi	r24, 0xAF	; 175
     9c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     9c6:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9c8:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9ca:	81 81       	ldd	r24, Z+1	; 0x01
     9cc:	86 ff       	sbrs	r24, 6
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <st7565r_init+0x356>
     9d0:	e0 ea       	ldi	r30, 0xA0	; 160
     9d2:	f9 e0       	ldi	r31, 0x09	; 9
     9d4:	80 e4       	ldi	r24, 0x40	; 64
     9d6:	81 83       	std	Z+1, r24	; 0x01
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     9d8:	80 81       	ld	r24, Z
     9da:	be 01       	movw	r22, r28
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	80 ea       	ldi	r24, 0xA0	; 160
     9e2:	99 e0       	ldi	r25, 0x09	; 9
     9e4:	39 d3       	rcall	.+1650   	; 0x1058 <usart_spi_deselect_device>
     9e6:	0f 90       	pop	r0
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	bf 90       	pop	r11
     9fa:	08 95       	ret

000009fc <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	1f 92       	push	r1
     a02:	1f 92       	push	r1
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     a0e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     a12:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     a16:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     a1a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     a1e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     a22:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     a26:	6c e0       	ldi	r22, 0x0C	; 12
     a28:	81 e4       	ldi	r24, 0x41	; 65
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	c7 d6       	rcall	.+3470   	; 0x17bc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a2e:	8f b7       	in	r24, 0x3f	; 63
     a30:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     a32:	f8 94       	cli
	return flags;
     a34:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     a36:	e0 e5       	ldi	r30, 0x50	; 80
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	82 60       	ori	r24, 0x02	; 2
     a3e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a40:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     a42:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     a44:	81 ff       	sbrs	r24, 1
     a46:	fd cf       	rjmp	.-6      	; 0xa42 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     a48:	61 e0       	ldi	r22, 0x01	; 1
     a4a:	80 e4       	ldi	r24, 0x40	; 64
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	b6 d6       	rcall	.+3436   	; 0x17bc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a50:	8f b7       	in	r24, 0x3f	; 63
     a52:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     a54:	f8 94       	cli
	return flags;
     a56:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     a58:	e0 e5       	ldi	r30, 0x50	; 80
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	8e 7f       	andi	r24, 0xFE	; 254
     a60:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a62:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	1f 92       	push	r1
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a78:	9f b7       	in	r25, 0x3f	; 63
     a7a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     a7c:	f8 94       	cli
	return flags;
     a7e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     a80:	e8 2f       	mov	r30, r24
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	e0 59       	subi	r30, 0x90	; 144
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	60 95       	com	r22
     a8a:	80 81       	ld	r24, Z
     a8c:	68 23       	and	r22, r24
     a8e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a90:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     a92:	0f 90       	pop	r0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	1f 92       	push	r1
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     aa4:	9f b7       	in	r25, 0x3f	; 63
     aa6:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     aa8:	f8 94       	cli
	return flags;
     aaa:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     aac:	e8 2f       	mov	r30, r24
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	e0 59       	subi	r30, 0x90	; 144
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	80 81       	ld	r24, Z
     ab6:	68 2b       	or	r22, r24
     ab8:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     aba:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     abc:	0f 90       	pop	r0
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	1f 92       	push	r1
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	08 2f       	mov	r16, r24
     ad6:	f6 2e       	mov	r15, r22
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     ad8:	14 2f       	mov	r17, r20
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     ada:	1a d1       	rcall	.+564    	; 0xd10 <gfx_mono_framebuffer_put_byte>
     adc:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     ade:	00 6b       	ori	r16, 0xB0	; 176
     ae0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     ae2:	89 83       	std	Y+1, r24	; 0x01
     ae4:	be 01       	movw	r22, r28
     ae6:	6f 5f       	subi	r22, 0xFF	; 255
     ae8:	7f 4f       	sbci	r23, 0xFF	; 255
     aea:	80 ea       	ldi	r24, 0xA0	; 160
     aec:	99 e0       	ldi	r25, 0x09	; 9
     aee:	9e d2       	rcall	.+1340   	; 0x102c <usart_spi_select_device>
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     af6:	e0 ea       	ldi	r30, 0xA0	; 160
     af8:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	95 ff       	sbrs	r25, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     afe:	fd cf       	rjmp	.-6      	; 0xafa <gfx_mono_st7565r_put_byte+0x36>
     b00:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b04:	e0 ea       	ldi	r30, 0xA0	; 160
     b06:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b08:	81 81       	ldd	r24, Z+1	; 0x01
     b0a:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b0c:	fd cf       	rjmp	.-6      	; 0xb08 <gfx_mono_st7565r_put_byte+0x44>
     b0e:	e0 ea       	ldi	r30, 0xA0	; 160
     b10:	f9 e0       	ldi	r31, 0x09	; 9
     b12:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b14:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b16:	80 81       	ld	r24, Z
     b18:	be 01       	movw	r22, r28
     b1a:	6f 5f       	subi	r22, 0xFF	; 255
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	80 ea       	ldi	r24, 0xA0	; 160
     b20:	99 e0       	ldi	r25, 0x09	; 9
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     b22:	9a d2       	rcall	.+1332   	; 0x1058 <usart_spi_deselect_device>
     b24:	0f 2d       	mov	r16, r15
     b26:	0f 77       	andi	r16, 0x7F	; 127
     b28:	02 95       	swap	r16
     b2a:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b2c:	00 61       	ori	r16, 0x10	; 16
     b2e:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	be 01       	movw	r22, r28
     b34:	6f 5f       	subi	r22, 0xFF	; 255
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	80 ea       	ldi	r24, 0xA0	; 160
     b3a:	99 e0       	ldi	r25, 0x09	; 9
     b3c:	77 d2       	rcall	.+1262   	; 0x102c <usart_spi_select_device>
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b44:	e0 ea       	ldi	r30, 0xA0	; 160
     b46:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b48:	81 81       	ldd	r24, Z+1	; 0x01
     b4a:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b4c:	fd cf       	rjmp	.-6      	; 0xb48 <gfx_mono_st7565r_put_byte+0x84>
     b4e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b52:	e0 ea       	ldi	r30, 0xA0	; 160
     b54:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b56:	81 81       	ldd	r24, Z+1	; 0x01
     b58:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     b5a:	fd cf       	rjmp	.-6      	; 0xb56 <gfx_mono_st7565r_put_byte+0x92>
     b5c:	e0 ea       	ldi	r30, 0xA0	; 160
     b5e:	f9 e0       	ldi	r31, 0x09	; 9
     b60:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     b62:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     b64:	80 81       	ld	r24, Z
     b66:	be 01       	movw	r22, r28
     b68:	6f 5f       	subi	r22, 0xFF	; 255
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	80 ea       	ldi	r24, 0xA0	; 160
     b6e:	99 e0       	ldi	r25, 0x09	; 9
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     b70:	73 d2       	rcall	.+1254   	; 0x1058 <usart_spi_deselect_device>
     b72:	0f 2d       	mov	r16, r15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     b74:	0f 70       	andi	r16, 0x0F	; 15
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     b76:	8b e2       	ldi	r24, 0x2B	; 43
     b78:	89 83       	std	Y+1, r24	; 0x01
     b7a:	be 01       	movw	r22, r28
     b7c:	6f 5f       	subi	r22, 0xFF	; 255
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	80 ea       	ldi	r24, 0xA0	; 160
     b82:	99 e0       	ldi	r25, 0x09	; 9
     b84:	53 d2       	rcall	.+1190   	; 0x102c <usart_spi_select_device>
     b86:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     b88:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     b8c:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     b8e:	f9 e0       	ldi	r31, 0x09	; 9
     b90:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     b92:	85 ff       	sbrs	r24, 5
     b94:	fd cf       	rjmp	.-6      	; 0xb90 <gfx_mono_st7565r_put_byte+0xcc>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     b96:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     b9a:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     b9c:	f9 e0       	ldi	r31, 0x09	; 9
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     ba0:	86 ff       	sbrs	r24, 6
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <gfx_mono_st7565r_put_byte+0xda>
     ba4:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     ba6:	f9 e0       	ldi	r31, 0x09	; 9
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	81 83       	std	Z+1, r24	; 0x01
     bac:	80 81       	ld	r24, Z
     bae:	be 01       	movw	r22, r28
     bb0:	6f 5f       	subi	r22, 0xFF	; 255
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bb2:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bb4:	80 ea       	ldi	r24, 0xA0	; 160
     bb6:	99 e0       	ldi	r25, 0x09	; 9
     bb8:	4f d2       	rcall	.+1182   	; 0x1058 <usart_spi_deselect_device>
     bba:	8b e2       	ldi	r24, 0x2B	; 43
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	be 01       	movw	r22, r28
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	80 ea       	ldi	r24, 0xA0	; 160
     bc6:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     bc8:	31 d2       	rcall	.+1122   	; 0x102c <usart_spi_select_device>
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     bd0:	e0 ea       	ldi	r30, 0xA0	; 160
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     bd2:	f9 e0       	ldi	r31, 0x09	; 9
     bd4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     bd6:	85 ff       	sbrs	r24, 5
     bd8:	fd cf       	rjmp	.-6      	; 0xbd4 <gfx_mono_st7565r_put_byte+0x110>
     bda:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     bde:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     be0:	f9 e0       	ldi	r31, 0x09	; 9
     be2:	81 81       	ldd	r24, Z+1	; 0x01
     be4:	86 ff       	sbrs	r24, 6
     be6:	fd cf       	rjmp	.-6      	; 0xbe2 <gfx_mono_st7565r_put_byte+0x11e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     be8:	e0 ea       	ldi	r30, 0xA0	; 160
     bea:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     bec:	80 e4       	ldi	r24, 0x40	; 64
     bee:	81 83       	std	Z+1, r24	; 0x01
     bf0:	80 81       	ld	r24, Z
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     bf8:	be 01       	movw	r22, r28

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     bfa:	6f 5f       	subi	r22, 0xFF	; 255
     bfc:	7f 4f       	sbci	r23, 0xFF	; 255
     bfe:	80 ea       	ldi	r24, 0xA0	; 160
     c00:	99 e0       	ldi	r25, 0x09	; 9
     c02:	2a d2       	rcall	.+1108   	; 0x1058 <usart_spi_deselect_device>
     c04:	0f 90       	pop	r0
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	ff 90       	pop	r15
     c10:	08 95       	ret

00000c12 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	1f 92       	push	r1
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     c20:	82 e2       	ldi	r24, 0x22	; 34
     c22:	90 e2       	ldi	r25, 0x20	; 32
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     c24:	70 d0       	rcall	.+224    	; 0xd06 <gfx_mono_set_framebuffer>
     c26:	26 dd       	rcall	.-1460   	; 0x674 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c28:	8b e2       	ldi	r24, 0x2B	; 43
     c2a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c2c:	be 01       	movw	r22, r28
     c2e:	6f 5f       	subi	r22, 0xFF	; 255
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	80 ea       	ldi	r24, 0xA0	; 160
     c34:	99 e0       	ldi	r25, 0x09	; 9
     c36:	fa d1       	rcall	.+1012   	; 0x102c <usart_spi_select_device>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c3e:	e0 ea       	ldi	r30, 0xA0	; 160
     c40:	f9 e0       	ldi	r31, 0x09	; 9
     c42:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c44:	85 ff       	sbrs	r24, 5
     c46:	fd cf       	rjmp	.-6      	; 0xc42 <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c48:	80 e4       	ldi	r24, 0x40	; 64
     c4a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c4e:	e0 ea       	ldi	r30, 0xA0	; 160
     c50:	f9 e0       	ldi	r31, 0x09	; 9
     c52:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c54:	86 ff       	sbrs	r24, 6
     c56:	fd cf       	rjmp	.-6      	; 0xc52 <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c58:	e0 ea       	ldi	r30, 0xA0	; 160
     c5a:	f9 e0       	ldi	r31, 0x09	; 9
     c5c:	80 e4       	ldi	r24, 0x40	; 64
     c5e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c60:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c62:	be 01       	movw	r22, r28
     c64:	6f 5f       	subi	r22, 0xFF	; 255
     c66:	7f 4f       	sbci	r23, 0xFF	; 255
     c68:	80 ea       	ldi	r24, 0xA0	; 160
     c6a:	99 e0       	ldi	r25, 0x09	; 9
     c6c:	f5 d1       	rcall	.+1002   	; 0x1058 <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c6e:	00 e0       	ldi	r16, 0x00	; 0
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     c70:	0a c0       	rjmp	.+20     	; 0xc86 <gfx_mono_st7565r_init+0x74>
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	61 2f       	mov	r22, r17
     c76:	80 2f       	mov	r24, r16
     c78:	25 df       	rcall	.-438    	; 0xac4 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     c7a:	1f 5f       	subi	r17, 0xFF	; 255
     c7c:	10 38       	cpi	r17, 0x80	; 128
     c7e:	c9 f7       	brne	.-14     	; 0xc72 <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c80:	0f 5f       	subi	r16, 0xFF	; 255
     c82:	04 30       	cpi	r16, 0x04	; 4
     c84:	11 f0       	breq	.+4      	; 0xc8a <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     c86:	10 e0       	ldi	r17, 0x00	; 0
     c88:	f4 cf       	rjmp	.-24     	; 0xc72 <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     ca0:	88 23       	and	r24, r24
     ca2:	4c f1       	brlt	.+82     	; 0xcf6 <gfx_mono_st7565r_draw_pixel+0x60>
     ca4:	60 32       	cpi	r22, 0x20	; 32
     ca6:	38 f5       	brcc	.+78     	; 0xcf6 <gfx_mono_st7565r_draw_pixel+0x60>
     ca8:	d4 2f       	mov	r29, r20
     caa:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     cac:	f6 2e       	mov	r15, r22
     cae:	f6 94       	lsr	r15
     cb0:	f6 94       	lsr	r15
     cb2:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	88 e0       	ldi	r24, 0x08	; 8
     cb8:	f8 9e       	mul	r15, r24
     cba:	60 19       	sub	r22, r0
     cbc:	71 09       	sbc	r23, r1
     cbe:	11 24       	eor	r1, r1
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	8c 01       	movw	r16, r24
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <gfx_mono_st7565r_draw_pixel+0x36>
     cc8:	00 0f       	add	r16, r16
     cca:	11 1f       	adc	r17, r17
     ccc:	6a 95       	dec	r22
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     cd0:	6c 2f       	mov	r22, r28
     cd2:	8f 2d       	mov	r24, r15
     cd4:	2b d0       	rcall	.+86     	; 0xd2c <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     cd6:	d1 30       	cpi	r29, 0x01	; 1
     cd8:	21 f0       	breq	.+8      	; 0xce2 <gfx_mono_st7565r_draw_pixel+0x4c>
     cda:	28 f0       	brcs	.+10     	; 0xce6 <gfx_mono_st7565r_draw_pixel+0x50>
     cdc:	d2 30       	cpi	r29, 0x02	; 2
     cde:	31 f0       	breq	.+12     	; 0xcec <gfx_mono_st7565r_draw_pixel+0x56>
     ce0:	06 c0       	rjmp	.+12     	; 0xcee <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ce2:	80 2b       	or	r24, r16
		break;
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     ce6:	00 95       	com	r16
     ce8:	80 23       	and	r24, r16
		break;
     cea:	01 c0       	rjmp	.+2      	; 0xcee <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     cec:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     cee:	48 2f       	mov	r20, r24
     cf0:	6c 2f       	mov	r22, r28
     cf2:	8f 2d       	mov	r24, r15
     cf4:	e7 de       	rcall	.-562    	; 0xac4 <gfx_mono_st7565r_put_byte>
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	08 95       	ret

00000d02 <gfx_mono_st7565r_get_byte>:
 * \code
	data = gfx_mono_st7565r_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     d02:	14 c0       	rjmp	.+40     	; 0xd2c <gfx_mono_framebuffer_get_byte>
     d04:	08 95       	ret

00000d06 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     d06:	80 93 22 22 	sts	0x2222, r24	; 0x802222 <fbpointer>
     d0a:	90 93 23 22 	sts	0x2223, r25	; 0x802223 <fbpointer+0x1>
     d0e:	08 95       	ret

00000d10 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     d10:	20 91 22 22 	lds	r18, 0x2222	; 0x802222 <fbpointer>
     d14:	30 91 23 22 	lds	r19, 0x2223	; 0x802223 <fbpointer+0x1>
     d18:	90 e8       	ldi	r25, 0x80	; 128
     d1a:	89 9f       	mul	r24, r25
     d1c:	20 0d       	add	r18, r0
     d1e:	31 1d       	adc	r19, r1
     d20:	11 24       	eor	r1, r1
     d22:	f9 01       	movw	r30, r18
     d24:	e6 0f       	add	r30, r22
     d26:	f1 1d       	adc	r31, r1
     d28:	40 83       	st	Z, r20
     d2a:	08 95       	ret

00000d2c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     d2c:	20 91 22 22 	lds	r18, 0x2222	; 0x802222 <fbpointer>
     d30:	30 91 23 22 	lds	r19, 0x2223	; 0x802223 <fbpointer+0x1>
     d34:	90 e8       	ldi	r25, 0x80	; 128
     d36:	89 9f       	mul	r24, r25
     d38:	20 0d       	add	r18, r0
     d3a:	31 1d       	adc	r19, r1
     d3c:	11 24       	eor	r1, r1
     d3e:	f9 01       	movw	r30, r18
     d40:	e6 0f       	add	r30, r22
     d42:	f1 1d       	adc	r31, r1
}
     d44:	80 81       	ld	r24, Z
     d46:	08 95       	ret

00000d48 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	e4 2f       	mov	r30, r20
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	e8 0f       	add	r30, r24
     d58:	f1 1d       	adc	r31, r1
     d5a:	e1 38       	cpi	r30, 0x81	; 129
     d5c:	f1 05       	cpc	r31, r1
     d5e:	1c f0       	brlt	.+6      	; 0xd66 <gfx_mono_generic_draw_horizontal_line+0x1e>
     d60:	c0 e8       	ldi	r28, 0x80	; 128
     d62:	4c 2f       	mov	r20, r28
     d64:	48 1b       	sub	r20, r24
     d66:	44 23       	and	r20, r20
     d68:	09 f4       	brne	.+2      	; 0xd6c <gfx_mono_generic_draw_horizontal_line+0x24>
     d6a:	4a c0       	rjmp	.+148    	; 0xe00 <gfx_mono_generic_draw_horizontal_line+0xb8>
     d6c:	d6 2f       	mov	r29, r22
     d6e:	d6 95       	lsr	r29
     d70:	d6 95       	lsr	r29
     d72:	d6 95       	lsr	r29
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	98 e0       	ldi	r25, 0x08	; 8
     d78:	d9 9f       	mul	r29, r25
     d7a:	60 19       	sub	r22, r0
     d7c:	71 09       	sbc	r23, r1
     d7e:	11 24       	eor	r1, r1
     d80:	e1 e0       	ldi	r30, 0x01	; 1
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	df 01       	movw	r26, r30
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <gfx_mono_generic_draw_horizontal_line+0x44>
     d88:	aa 0f       	add	r26, r26
     d8a:	bb 1f       	adc	r27, r27
     d8c:	6a 95       	dec	r22
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <gfx_mono_generic_draw_horizontal_line+0x40>
     d90:	fa 2e       	mov	r15, r26
     d92:	21 30       	cpi	r18, 0x01	; 1
     d94:	21 f0       	breq	.+8      	; 0xd9e <gfx_mono_generic_draw_horizontal_line+0x56>
     d96:	98 f0       	brcs	.+38     	; 0xdbe <gfx_mono_generic_draw_horizontal_line+0x76>
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	19 f1       	breq	.+70     	; 0xde2 <gfx_mono_generic_draw_horizontal_line+0x9a>
     d9c:	31 c0       	rjmp	.+98     	; 0xe00 <gfx_mono_generic_draw_horizontal_line+0xb8>
     d9e:	c4 2f       	mov	r28, r20
     da0:	1f ef       	ldi	r17, 0xFF	; 255
     da2:	18 0f       	add	r17, r24
     da4:	01 2f       	mov	r16, r17
     da6:	0c 0f       	add	r16, r28
     da8:	60 2f       	mov	r22, r16
     daa:	8d 2f       	mov	r24, r29
     dac:	aa df       	rcall	.-172    	; 0xd02 <gfx_mono_st7565r_get_byte>
     dae:	4f 2d       	mov	r20, r15
     db0:	48 2b       	or	r20, r24
     db2:	60 2f       	mov	r22, r16
     db4:	8d 2f       	mov	r24, r29
     db6:	86 de       	rcall	.-756    	; 0xac4 <gfx_mono_st7565r_put_byte>
     db8:	c1 50       	subi	r28, 0x01	; 1
     dba:	a1 f7       	brne	.-24     	; 0xda4 <gfx_mono_generic_draw_horizontal_line+0x5c>
     dbc:	21 c0       	rjmp	.+66     	; 0xe00 <gfx_mono_generic_draw_horizontal_line+0xb8>
     dbe:	c4 2f       	mov	r28, r20
     dc0:	1f ef       	ldi	r17, 0xFF	; 255
     dc2:	18 0f       	add	r17, r24
     dc4:	fa 2e       	mov	r15, r26
     dc6:	f0 94       	com	r15
     dc8:	01 2f       	mov	r16, r17
     dca:	0c 0f       	add	r16, r28
     dcc:	60 2f       	mov	r22, r16
     dce:	8d 2f       	mov	r24, r29
     dd0:	98 df       	rcall	.-208    	; 0xd02 <gfx_mono_st7565r_get_byte>
     dd2:	4f 2d       	mov	r20, r15
     dd4:	48 23       	and	r20, r24
     dd6:	60 2f       	mov	r22, r16
     dd8:	8d 2f       	mov	r24, r29
     dda:	74 de       	rcall	.-792    	; 0xac4 <gfx_mono_st7565r_put_byte>
     ddc:	c1 50       	subi	r28, 0x01	; 1
     dde:	a1 f7       	brne	.-24     	; 0xdc8 <gfx_mono_generic_draw_horizontal_line+0x80>
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <gfx_mono_generic_draw_horizontal_line+0xb8>
     de2:	c4 2f       	mov	r28, r20
     de4:	1f ef       	ldi	r17, 0xFF	; 255
     de6:	18 0f       	add	r17, r24
     de8:	01 2f       	mov	r16, r17
     dea:	0c 0f       	add	r16, r28
     dec:	60 2f       	mov	r22, r16
     dee:	8d 2f       	mov	r24, r29
     df0:	88 df       	rcall	.-240    	; 0xd02 <gfx_mono_st7565r_get_byte>
     df2:	4f 2d       	mov	r20, r15
     df4:	48 27       	eor	r20, r24
     df6:	60 2f       	mov	r22, r16
     df8:	8d 2f       	mov	r24, r29
     dfa:	64 de       	rcall	.-824    	; 0xac4 <gfx_mono_st7565r_put_byte>
     dfc:	c1 50       	subi	r28, 0x01	; 1
     dfe:	a1 f7       	brne	.-24     	; 0xde8 <gfx_mono_generic_draw_horizontal_line+0xa0>
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	08 95       	ret

00000e0c <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
	if (height == 0) {
     e16:	22 23       	and	r18, r18
     e18:	69 f0       	breq	.+26     	; 0xe34 <gfx_mono_generic_draw_filled_rect+0x28>
     e1a:	f4 2e       	mov	r15, r20
     e1c:	18 2f       	mov	r17, r24
     e1e:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     e20:	df ef       	ldi	r29, 0xFF	; 255
     e22:	d6 0f       	add	r29, r22
     e24:	6d 2f       	mov	r22, r29
     e26:	6c 0f       	add	r22, r28
     e28:	20 2f       	mov	r18, r16
     e2a:	4f 2d       	mov	r20, r15
     e2c:	81 2f       	mov	r24, r17
     e2e:	8c df       	rcall	.-232    	; 0xd48 <gfx_mono_generic_draw_horizontal_line>
     e30:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     e32:	c1 f7       	brne	.-16     	; 0xe24 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	08 95       	ret

00000e40 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     e40:	af 92       	push	r10
     e42:	bf 92       	push	r11
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	c8 2f       	mov	r28, r24
     e56:	e6 2e       	mov	r14, r22
     e58:	b4 2e       	mov	r11, r20
     e5a:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	f9 01       	movw	r30, r18
     e60:	24 81       	ldd	r18, Z+4	; 0x04
     e62:	43 81       	ldd	r20, Z+3	; 0x03
     e64:	6b 2d       	mov	r22, r11
     e66:	8e 2d       	mov	r24, r14
     e68:	d1 df       	rcall	.-94     	; 0xe0c <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     e6a:	f6 01       	movw	r30, r12
     e6c:	80 81       	ld	r24, Z
     e6e:	81 11       	cpse	r24, r1
     e70:	39 c0       	rjmp	.+114    	; 0xee4 <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     e72:	83 81       	ldd	r24, Z+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	26 95       	lsr	r18
     e78:	26 95       	lsr	r18
     e7a:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     e7c:	87 70       	andi	r24, 0x07	; 7
     e7e:	09 f0       	breq	.+2      	; 0xe82 <gfx_mono_draw_char+0x42>
		char_row_size++;
     e80:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     e82:	f6 01       	movw	r30, r12
     e84:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     e86:	8c 2f       	mov	r24, r28
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	35 81       	ldd	r19, Z+5	; 0x05
     e8c:	83 1b       	sub	r24, r19
     e8e:	91 09       	sbc	r25, r1
     e90:	2a 9d       	mul	r18, r10
     e92:	90 01       	movw	r18, r0
     e94:	11 24       	eor	r1, r1
     e96:	82 9f       	mul	r24, r18
     e98:	a0 01       	movw	r20, r0
     e9a:	83 9f       	mul	r24, r19
     e9c:	50 0d       	add	r21, r0
     e9e:	92 9f       	mul	r25, r18
     ea0:	50 0d       	add	r21, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	01 81       	ldd	r16, Z+1	; 0x01
     ea6:	12 81       	ldd	r17, Z+2	; 0x02
     ea8:	04 0f       	add	r16, r20
     eaa:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     eac:	f6 01       	movw	r30, r12
     eae:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     eb0:	ff 20       	and	r15, r15
     eb2:	a1 f0       	breq	.+40     	; 0xedc <gfx_mono_draw_char+0x9c>
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
     eb8:	8e 2d       	mov	r24, r14
     eba:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     ebc:	9c 2f       	mov	r25, r28
     ebe:	97 70       	andi	r25, 0x07	; 7
     ec0:	21 f4       	brne	.+8      	; 0xeca <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     ec2:	f8 01       	movw	r30, r16
     ec4:	d4 91       	lpm	r29, Z
				glyph_data++;
     ec6:	0f 5f       	subi	r16, 0xFF	; 255
     ec8:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     eca:	dd 23       	and	r29, r29
     ecc:	1c f4       	brge	.+6      	; 0xed4 <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	6b 2d       	mov	r22, r11
     ed2:	e1 de       	rcall	.-574    	; 0xc96 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     ed4:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     ed6:	cf 5f       	subi	r28, 0xFF	; 255
     ed8:	fc 12       	cpse	r15, r28
     eda:	ee cf       	rjmp	.-36     	; 0xeb8 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     edc:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     ede:	aa 94       	dec	r10
	} while (rows_left > 0);
     ee0:	a1 10       	cpse	r10, r1
     ee2:	e4 cf       	rjmp	.-56     	; 0xeac <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	bf 90       	pop	r11
     ef6:	af 90       	pop	r10
     ef8:	08 95       	ret

00000efa <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	d6 2e       	mov	r13, r22
     f0a:	04 2f       	mov	r16, r20
     f0c:	79 01       	movw	r14, r18
     f0e:	ec 01       	movw	r28, r24
     f10:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     f12:	89 91       	ld	r24, Y+
     f14:	8a 30       	cpi	r24, 0x0A	; 10
     f16:	31 f4       	brne	.+12     	; 0xf24 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     f18:	f7 01       	movw	r30, r14
     f1a:	84 81       	ldd	r24, Z+4	; 0x04
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     f20:	1d 2d       	mov	r17, r13
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     f24:	8d 30       	cpi	r24, 0x0D	; 13
     f26:	39 f0       	breq	.+14     	; 0xf36 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     f28:	97 01       	movw	r18, r14
     f2a:	40 2f       	mov	r20, r16
     f2c:	61 2f       	mov	r22, r17
     f2e:	88 df       	rcall	.-240    	; 0xe40 <gfx_mono_draw_char>
			x += font->width;
     f30:	f7 01       	movw	r30, r14
     f32:	83 81       	ldd	r24, Z+3	; 0x03
     f34:	18 0f       	add	r17, r24
		}
	} while (*(++str));
     f36:	88 81       	ld	r24, Y
     f38:	81 11       	cpse	r24, r1
     f3a:	eb cf       	rjmp	.-42     	; 0xf12 <gfx_mono_draw_string+0x18>
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	08 95       	ret

00000f4c <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     f56:	c6 2f       	mov	r28, r22
     f58:	d0 e0       	ldi	r29, 0x00	; 0
     f5a:	de 01       	movw	r26, r28
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <ioport_configure_port_pin+0x18>
     f60:	b5 95       	asr	r27
     f62:	a7 95       	ror	r26
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <ioport_configure_port_pin+0x14>
     f68:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f6a:	50 8b       	std	Z+16, r21	; 0x10
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     f72:	28 30       	cpi	r18, 0x08	; 8
     f74:	31 05       	cpc	r19, r1
     f76:	89 f7       	brne	.-30     	; 0xf5a <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     f78:	40 ff       	sbrs	r20, 0
     f7a:	0a c0       	rjmp	.+20     	; 0xf90 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     f7c:	41 ff       	sbrs	r20, 1
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     f80:	fc 01       	movw	r30, r24
     f82:	65 83       	std	Z+5, r22	; 0x05
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     f86:	fc 01       	movw	r30, r24
     f88:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     f8a:	fc 01       	movw	r30, r24
     f8c:	61 83       	std	Z+1, r22	; 0x01
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     f90:	fc 01       	movw	r30, r24
     f92:	62 83       	std	Z+2, r22	; 0x02
	}
}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     f9a:	80 3a       	cpi	r24, 0xA0	; 160
     f9c:	28 e0       	ldi	r18, 0x08	; 8
     f9e:	92 07       	cpc	r25, r18
     fa0:	21 f4       	brne	.+8      	; 0xfaa <usart_spi_init+0x10>
     fa2:	60 e1       	ldi	r22, 0x10	; 16
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	63 cd       	rjmp	.-1338   	; 0xa6e <sysclk_enable_module>
     fa8:	08 95       	ret
     faa:	80 3b       	cpi	r24, 0xB0	; 176
     fac:	28 e0       	ldi	r18, 0x08	; 8
     fae:	92 07       	cpc	r25, r18
     fb0:	21 f4       	brne	.+8      	; 0xfba <usart_spi_init+0x20>
     fb2:	60 e2       	ldi	r22, 0x20	; 32
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	5b cd       	rjmp	.-1354   	; 0xa6e <sysclk_enable_module>
     fb8:	08 95       	ret
     fba:	80 3a       	cpi	r24, 0xA0	; 160
     fbc:	29 e0       	ldi	r18, 0x09	; 9
     fbe:	92 07       	cpc	r25, r18
     fc0:	21 f4       	brne	.+8      	; 0xfca <usart_spi_init+0x30>
     fc2:	60 e1       	ldi	r22, 0x10	; 16
     fc4:	84 e0       	ldi	r24, 0x04	; 4
     fc6:	53 cd       	rjmp	.-1370   	; 0xa6e <sysclk_enable_module>
     fc8:	08 95       	ret
     fca:	80 3b       	cpi	r24, 0xB0	; 176
     fcc:	29 e0       	ldi	r18, 0x09	; 9
     fce:	92 07       	cpc	r25, r18
     fd0:	21 f4       	brne	.+8      	; 0xfda <usart_spi_init+0x40>
     fd2:	60 e2       	ldi	r22, 0x20	; 32
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	4b cd       	rjmp	.-1386   	; 0xa6e <sysclk_enable_module>
     fd8:	08 95       	ret
     fda:	80 3a       	cpi	r24, 0xA0	; 160
     fdc:	2a e0       	ldi	r18, 0x0A	; 10
     fde:	92 07       	cpc	r25, r18
     fe0:	21 f4       	brne	.+8      	; 0xfea <usart_spi_init+0x50>
     fe2:	60 e1       	ldi	r22, 0x10	; 16
     fe4:	85 e0       	ldi	r24, 0x05	; 5
     fe6:	43 cd       	rjmp	.-1402   	; 0xa6e <sysclk_enable_module>
     fe8:	08 95       	ret
     fea:	80 3a       	cpi	r24, 0xA0	; 160
     fec:	9b 40       	sbci	r25, 0x0B	; 11
     fee:	19 f4       	brne	.+6      	; 0xff6 <usart_spi_init+0x5c>
     ff0:	60 e1       	ldi	r22, 0x10	; 16
     ff2:	86 e0       	ldi	r24, 0x06	; 6
     ff4:	3c cd       	rjmp	.-1416   	; 0xa6e <sysclk_enable_module>
     ff6:	08 95       	ret

00000ff8 <usart_spi_setup_device>:
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	00 d0       	rcall	.+0      	; 0x1002 <usart_spi_setup_device+0xa>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <usart_spi_setup_device+0xc>
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	09 83       	std	Y+1, r16	; 0x01
    100a:	1a 83       	std	Y+2, r17	; 0x02
    100c:	2b 83       	std	Y+3, r18	; 0x03
    100e:	3c 83       	std	Y+4, r19	; 0x04
    1010:	4d 83       	std	Y+5, r20	; 0x05
    1012:	1e 82       	std	Y+6, r1	; 0x06
    1014:	be 01       	movw	r22, r28
    1016:	6f 5f       	subi	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	11 d4       	rcall	.+2082   	; 0x183e <usart_init_spi>
    101c:	26 96       	adiw	r28, 0x06	; 6
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	08 95       	ret

0000102c <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    102c:	fb 01       	movw	r30, r22
    102e:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1030:	e8 2f       	mov	r30, r24
    1032:	e6 95       	lsr	r30
    1034:	e6 95       	lsr	r30
    1036:	e6 95       	lsr	r30
    1038:	40 e2       	ldi	r20, 0x20	; 32
    103a:	e4 9f       	mul	r30, r20
    103c:	f0 01       	movw	r30, r0
    103e:	11 24       	eor	r1, r1
    1040:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1042:	87 70       	andi	r24, 0x07	; 7
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	a9 01       	movw	r20, r18
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <usart_spi_select_device+0x24>
    104c:	44 0f       	add	r20, r20
    104e:	55 1f       	adc	r21, r21
    1050:	8a 95       	dec	r24
    1052:	e2 f7       	brpl	.-8      	; 0x104c <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1054:	46 83       	std	Z+6, r20	; 0x06
    1056:	08 95       	ret

00001058 <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1058:	fb 01       	movw	r30, r22
    105a:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    105c:	e8 2f       	mov	r30, r24
    105e:	e6 95       	lsr	r30
    1060:	e6 95       	lsr	r30
    1062:	e6 95       	lsr	r30
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	e4 9f       	mul	r30, r20
    1068:	f0 01       	movw	r30, r0
    106a:	11 24       	eor	r1, r1
    106c:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    106e:	87 70       	andi	r24, 0x07	; 7
    1070:	21 e0       	ldi	r18, 0x01	; 1
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	a9 01       	movw	r20, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <usart_spi_deselect_device+0x24>
    1078:	44 0f       	add	r20, r20
    107a:	55 1f       	adc	r21, r21
    107c:	8a 95       	dec	r24
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1080:	45 83       	std	Z+5, r20	; 0x05
    1082:	08 95       	ret

00001084 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    1084:	43 e0       	ldi	r20, 0x03	; 3
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	80 ee       	ldi	r24, 0xE0	; 224
    108c:	97 e0       	ldi	r25, 0x07	; 7
    108e:	5e df       	rcall	.-324    	; 0xf4c <ioport_configure_port_pin>
    1090:	43 e0       	ldi	r20, 0x03	; 3
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	62 e0       	ldi	r22, 0x02	; 2
    1096:	80 ee       	ldi	r24, 0xE0	; 224
    1098:	97 e0       	ldi	r25, 0x07	; 7
    109a:	58 df       	rcall	.-336    	; 0xf4c <ioport_configure_port_pin>
    109c:	43 e0       	ldi	r20, 0x03	; 3
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	60 e1       	ldi	r22, 0x10	; 16
    10a2:	80 e6       	ldi	r24, 0x60	; 96
    10a4:	96 e0       	ldi	r25, 0x06	; 6
    10a6:	52 df       	rcall	.-348    	; 0xf4c <ioport_configure_port_pin>
    10a8:	41 e0       	ldi	r20, 0x01	; 1
    10aa:	50 e4       	ldi	r21, 0x40	; 64
    10ac:	60 e2       	ldi	r22, 0x20	; 32
    10ae:	80 e6       	ldi	r24, 0x60	; 96
    10b0:	96 e0       	ldi	r25, 0x06	; 6
    10b2:	4c df       	rcall	.-360    	; 0xf4c <ioport_configure_port_pin>
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	5b e1       	ldi	r21, 0x1B	; 27
    10b8:	60 e2       	ldi	r22, 0x20	; 32
    10ba:	80 e8       	ldi	r24, 0x80	; 128
    10bc:	96 e0       	ldi	r25, 0x06	; 6
    10be:	46 df       	rcall	.-372    	; 0xf4c <ioport_configure_port_pin>
    10c0:	40 e0       	ldi	r20, 0x00	; 0
    10c2:	5b e1       	ldi	r21, 0x1B	; 27
    10c4:	62 e0       	ldi	r22, 0x02	; 2
    10c6:	80 ea       	ldi	r24, 0xA0	; 160
    10c8:	96 e0       	ldi	r25, 0x06	; 6
    10ca:	40 df       	rcall	.-384    	; 0xf4c <ioport_configure_port_pin>
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	5b e1       	ldi	r21, 0x1B	; 27
    10d0:	64 e0       	ldi	r22, 0x04	; 4
    10d2:	80 ea       	ldi	r24, 0xA0	; 160
    10d4:	96 e0       	ldi	r25, 0x06	; 6
    10d6:	3a df       	rcall	.-396    	; 0xf4c <ioport_configure_port_pin>
    10d8:	43 e0       	ldi	r20, 0x03	; 3
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	62 e0       	ldi	r22, 0x02	; 2
    10de:	80 e6       	ldi	r24, 0x60	; 96
    10e0:	96 e0       	ldi	r25, 0x06	; 6
    10e2:	34 df       	rcall	.-408    	; 0xf4c <ioport_configure_port_pin>
    10e4:	43 e0       	ldi	r20, 0x03	; 3
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	68 e0       	ldi	r22, 0x08	; 8
    10ea:	80 e6       	ldi	r24, 0x60	; 96
    10ec:	96 e0       	ldi	r25, 0x06	; 6
    10ee:	2e df       	rcall	.-420    	; 0xf4c <ioport_configure_port_pin>
    10f0:	43 e0       	ldi	r20, 0x03	; 3
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	68 e0       	ldi	r22, 0x08	; 8
    10f6:	80 ea       	ldi	r24, 0xA0	; 160
    10f8:	96 e0       	ldi	r25, 0x06	; 6
    10fa:	28 df       	rcall	.-432    	; 0xf4c <ioport_configure_port_pin>
    10fc:	43 e0       	ldi	r20, 0x03	; 3
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	80 e6       	ldi	r24, 0x60	; 96
    1104:	96 e0       	ldi	r25, 0x06	; 6
    1106:	22 df       	rcall	.-444    	; 0xf4c <ioport_configure_port_pin>
    1108:	43 e0       	ldi	r20, 0x03	; 3
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	68 e0       	ldi	r22, 0x08	; 8
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	96 e0       	ldi	r25, 0x06	; 6
    1112:	1c df       	rcall	.-456    	; 0xf4c <ioport_configure_port_pin>
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	60 e1       	ldi	r22, 0x10	; 16
    111a:	80 e8       	ldi	r24, 0x80	; 128
    111c:	96 e0       	ldi	r25, 0x06	; 6
    111e:	16 cf       	rjmp	.-468    	; 0xf4c <ioport_configure_port_pin>
    1120:	08 95       	ret

00001122 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	1f 92       	push	r1
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    112c:	2f b7       	in	r18, 0x3f	; 63
    112e:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    1130:	f8 94       	cli
	return flags;
    1132:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1134:	28 2f       	mov	r18, r24
    1136:	39 2f       	mov	r19, r25
    1138:	21 15       	cp	r18, r1
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	38 07       	cpc	r19, r24
    113e:	29 f4       	brne	.+10     	; 0x114a <adc_set_callback+0x28>
		adca_callback = callback;
    1140:	60 93 2e 22 	sts	0x222E, r22	; 0x80222e <adca_callback>
    1144:	70 93 2f 22 	sts	0x222F, r23	; 0x80222f <adca_callback+0x1>
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    114a:	20 34       	cpi	r18, 0x40	; 64
    114c:	32 40       	sbci	r19, 0x02	; 2
    114e:	21 f4       	brne	.+8      	; 0x1158 <adc_set_callback+0x36>
		adcb_callback = callback;
    1150:	60 93 2c 22 	sts	0x222C, r22	; 0x80222c <adcb_callback>
    1154:	70 93 2d 22 	sts	0x222D, r23	; 0x80222d <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1158:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    115a:	0f 90       	pop	r0
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

00001162 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1162:	81 15       	cp	r24, r1
    1164:	22 e0       	ldi	r18, 0x02	; 2
    1166:	92 07       	cpc	r25, r18
    1168:	61 f4       	brne	.+24     	; 0x1182 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    116a:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <adca_enable_count>
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	98 0f       	add	r25, r24
    1172:	90 93 25 22 	sts	0x2225, r25	; 0x802225 <adca_enable_count>
    1176:	81 11       	cpse	r24, r1
    1178:	12 c0       	rjmp	.+36     	; 0x119e <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    117a:	62 e0       	ldi	r22, 0x02	; 2
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	77 cc       	rjmp	.-1810   	; 0xa6e <sysclk_enable_module>
    1180:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1182:	80 34       	cpi	r24, 0x40	; 64
    1184:	92 40       	sbci	r25, 0x02	; 2
    1186:	59 f4       	brne	.+22     	; 0x119e <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    1188:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <adcb_enable_count>
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	98 0f       	add	r25, r24
    1190:	90 93 24 22 	sts	0x2224, r25	; 0x802224 <adcb_enable_count>
    1194:	81 11       	cpse	r24, r1
    1196:	03 c0       	rjmp	.+6      	; 0x119e <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1198:	62 e0       	ldi	r22, 0x02	; 2
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	68 cc       	rjmp	.-1840   	; 0xa6e <sysclk_enable_module>
    119e:	08 95       	ret

000011a0 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    11a0:	81 15       	cp	r24, r1
    11a2:	22 e0       	ldi	r18, 0x02	; 2
    11a4:	92 07       	cpc	r25, r18
    11a6:	59 f4       	brne	.+22     	; 0x11be <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    11a8:	80 91 25 22 	lds	r24, 0x2225	; 0x802225 <adca_enable_count>
    11ac:	81 50       	subi	r24, 0x01	; 1
    11ae:	80 93 25 22 	sts	0x2225, r24	; 0x802225 <adca_enable_count>
    11b2:	81 11       	cpse	r24, r1
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	6f cc       	rjmp	.-1826   	; 0xa9a <sysclk_disable_module>
    11bc:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    11be:	80 34       	cpi	r24, 0x40	; 64
    11c0:	92 40       	sbci	r25, 0x02	; 2
    11c2:	51 f4       	brne	.+20     	; 0x11d8 <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    11c4:	80 91 24 22 	lds	r24, 0x2224	; 0x802224 <adcb_enable_count>
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	80 93 24 22 	sts	0x2224, r24	; 0x802224 <adcb_enable_count>
    11ce:	81 11       	cpse	r24, r1
    11d0:	03 c0       	rjmp	.+6      	; 0x11d8 <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    11d2:	62 e0       	ldi	r22, 0x02	; 2
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	61 cc       	rjmp	.-1854   	; 0xa9a <sysclk_disable_module>
    11d8:	08 95       	ret

000011da <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	1f 92       	push	r1
    11e6:	1f 92       	push	r1
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    11ee:	8f b7       	in	r24, 0x3f	; 63
    11f0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    11f2:	f8 94       	cli
	return flags;
    11f4:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    11f6:	c7 01       	movw	r24, r14
    11f8:	b4 df       	rcall	.-152    	; 0x1162 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    11fa:	f7 01       	movw	r30, r14
    11fc:	80 81       	ld	r24, Z
    11fe:	81 60       	ori	r24, 0x01	; 1
    1200:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1202:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1204:	80 91 27 22 	lds	r24, 0x2227	; 0x802227 <sleepmgr_locks+0x1>
    1208:	8f 3f       	cpi	r24, 0xFF	; 255
    120a:	09 f4       	brne	.+2      	; 0x120e <adc_enable+0x34>
    120c:	ff cf       	rjmp	.-2      	; 0x120c <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    120e:	8f b7       	in	r24, 0x3f	; 63
    1210:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1212:	f8 94       	cli
	return flags;
    1214:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1216:	e6 e2       	ldi	r30, 0x26	; 38
    1218:	f2 e2       	ldi	r31, 0x22	; 34
    121a:	81 81       	ldd	r24, Z+1	; 0x01
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1220:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	ff 90       	pop	r15
    122e:	ef 90       	pop	r14
    1230:	08 95       	ret

00001232 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1232:	1f 92       	push	r1
    1234:	0f 92       	push	r0
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	0f 92       	push	r0
    123a:	11 24       	eor	r1, r1
    123c:	0b b6       	in	r0, 0x3b	; 59
    123e:	0f 92       	push	r0
    1240:	2f 93       	push	r18
    1242:	3f 93       	push	r19
    1244:	4f 93       	push	r20
    1246:	5f 93       	push	r21
    1248:	6f 93       	push	r22
    124a:	7f 93       	push	r23
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	af 93       	push	r26
    1252:	bf 93       	push	r27
    1254:	ef 93       	push	r30
    1256:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    1258:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    125c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    1260:	e0 91 2e 22 	lds	r30, 0x222E	; 0x80222e <adca_callback>
    1264:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <adca_callback+0x1>
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	92 e0       	ldi	r25, 0x02	; 2
    126e:	19 95       	eicall
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	0f 90       	pop	r0
    1292:	1f 90       	pop	r1
    1294:	18 95       	reti

00001296 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	0b b6       	in	r0, 0x3b	; 59
    12a2:	0f 92       	push	r0
    12a4:	2f 93       	push	r18
    12a6:	3f 93       	push	r19
    12a8:	4f 93       	push	r20
    12aa:	5f 93       	push	r21
    12ac:	6f 93       	push	r22
    12ae:	7f 93       	push	r23
    12b0:	8f 93       	push	r24
    12b2:	9f 93       	push	r25
    12b4:	af 93       	push	r26
    12b6:	bf 93       	push	r27
    12b8:	ef 93       	push	r30
    12ba:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    12bc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    12c0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    12c4:	e0 91 2e 22 	lds	r30, 0x222E	; 0x80222e <adca_callback>
    12c8:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <adca_callback+0x1>
    12cc:	62 e0       	ldi	r22, 0x02	; 2
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	19 95       	eicall
}
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0b be       	out	0x3b, r0	; 59
    12f0:	0f 90       	pop	r0
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	0f 90       	pop	r0
    12f6:	1f 90       	pop	r1
    12f8:	18 95       	reti

000012fa <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	0b b6       	in	r0, 0x3b	; 59
    1306:	0f 92       	push	r0
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1320:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    1324:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    1328:	e0 91 2e 22 	lds	r30, 0x222E	; 0x80222e <adca_callback>
    132c:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <adca_callback+0x1>
    1330:	64 e0       	ldi	r22, 0x04	; 4
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	19 95       	eicall
}
    1338:	ff 91       	pop	r31
    133a:	ef 91       	pop	r30
    133c:	bf 91       	pop	r27
    133e:	af 91       	pop	r26
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	7f 91       	pop	r23
    1346:	6f 91       	pop	r22
    1348:	5f 91       	pop	r21
    134a:	4f 91       	pop	r20
    134c:	3f 91       	pop	r19
    134e:	2f 91       	pop	r18
    1350:	0f 90       	pop	r0
    1352:	0b be       	out	0x3b, r0	; 59
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	0b b6       	in	r0, 0x3b	; 59
    136a:	0f 92       	push	r0
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    1384:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    1388:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    138c:	e0 91 2e 22 	lds	r30, 0x222E	; 0x80222e <adca_callback>
    1390:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <adca_callback+0x1>
    1394:	68 e0       	ldi	r22, 0x08	; 8
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	92 e0       	ldi	r25, 0x02	; 2
    139a:	19 95       	eicall
}
    139c:	ff 91       	pop	r31
    139e:	ef 91       	pop	r30
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	0f 90       	pop	r0
    13b6:	0b be       	out	0x3b, r0	; 59
    13b8:	0f 90       	pop	r0
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	0f 90       	pop	r0
    13be:	1f 90       	pop	r1
    13c0:	18 95       	reti

000013c2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    13c2:	1f 92       	push	r1
    13c4:	0f 92       	push	r0
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	0f 92       	push	r0
    13ca:	11 24       	eor	r1, r1
    13cc:	0b b6       	in	r0, 0x3b	; 59
    13ce:	0f 92       	push	r0
    13d0:	2f 93       	push	r18
    13d2:	3f 93       	push	r19
    13d4:	4f 93       	push	r20
    13d6:	5f 93       	push	r21
    13d8:	6f 93       	push	r22
    13da:	7f 93       	push	r23
    13dc:	8f 93       	push	r24
    13de:	9f 93       	push	r25
    13e0:	af 93       	push	r26
    13e2:	bf 93       	push	r27
    13e4:	ef 93       	push	r30
    13e6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    13e8:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    13ec:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    13f0:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <adcb_callback>
    13f4:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <adcb_callback+0x1>
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	80 e4       	ldi	r24, 0x40	; 64
    13fc:	92 e0       	ldi	r25, 0x02	; 2
    13fe:	19 95       	eicall
}
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0b be       	out	0x3b, r0	; 59
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    1426:	1f 92       	push	r1
    1428:	0f 92       	push	r0
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	0f 92       	push	r0
    142e:	11 24       	eor	r1, r1
    1430:	0b b6       	in	r0, 0x3b	; 59
    1432:	0f 92       	push	r0
    1434:	2f 93       	push	r18
    1436:	3f 93       	push	r19
    1438:	4f 93       	push	r20
    143a:	5f 93       	push	r21
    143c:	6f 93       	push	r22
    143e:	7f 93       	push	r23
    1440:	8f 93       	push	r24
    1442:	9f 93       	push	r25
    1444:	af 93       	push	r26
    1446:	bf 93       	push	r27
    1448:	ef 93       	push	r30
    144a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    144c:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    1450:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    1454:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <adcb_callback>
    1458:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <adcb_callback+0x1>
    145c:	62 e0       	ldi	r22, 0x02	; 2
    145e:	80 e4       	ldi	r24, 0x40	; 64
    1460:	92 e0       	ldi	r25, 0x02	; 2
    1462:	19 95       	eicall
}
    1464:	ff 91       	pop	r31
    1466:	ef 91       	pop	r30
    1468:	bf 91       	pop	r27
    146a:	af 91       	pop	r26
    146c:	9f 91       	pop	r25
    146e:	8f 91       	pop	r24
    1470:	7f 91       	pop	r23
    1472:	6f 91       	pop	r22
    1474:	5f 91       	pop	r21
    1476:	4f 91       	pop	r20
    1478:	3f 91       	pop	r19
    147a:	2f 91       	pop	r18
    147c:	0f 90       	pop	r0
    147e:	0b be       	out	0x3b, r0	; 59
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	0f 90       	pop	r0
    1486:	1f 90       	pop	r1
    1488:	18 95       	reti

0000148a <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    148a:	1f 92       	push	r1
    148c:	0f 92       	push	r0
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	0f 92       	push	r0
    1492:	11 24       	eor	r1, r1
    1494:	0b b6       	in	r0, 0x3b	; 59
    1496:	0f 92       	push	r0
    1498:	2f 93       	push	r18
    149a:	3f 93       	push	r19
    149c:	4f 93       	push	r20
    149e:	5f 93       	push	r21
    14a0:	6f 93       	push	r22
    14a2:	7f 93       	push	r23
    14a4:	8f 93       	push	r24
    14a6:	9f 93       	push	r25
    14a8:	af 93       	push	r26
    14aa:	bf 93       	push	r27
    14ac:	ef 93       	push	r30
    14ae:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    14b0:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    14b4:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    14b8:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <adcb_callback>
    14bc:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <adcb_callback+0x1>
    14c0:	64 e0       	ldi	r22, 0x04	; 4
    14c2:	80 e4       	ldi	r24, 0x40	; 64
    14c4:	92 e0       	ldi	r25, 0x02	; 2
    14c6:	19 95       	eicall
}
    14c8:	ff 91       	pop	r31
    14ca:	ef 91       	pop	r30
    14cc:	bf 91       	pop	r27
    14ce:	af 91       	pop	r26
    14d0:	9f 91       	pop	r25
    14d2:	8f 91       	pop	r24
    14d4:	7f 91       	pop	r23
    14d6:	6f 91       	pop	r22
    14d8:	5f 91       	pop	r21
    14da:	4f 91       	pop	r20
    14dc:	3f 91       	pop	r19
    14de:	2f 91       	pop	r18
    14e0:	0f 90       	pop	r0
    14e2:	0b be       	out	0x3b, r0	; 59
    14e4:	0f 90       	pop	r0
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	0f 90       	pop	r0
    14ea:	1f 90       	pop	r1
    14ec:	18 95       	reti

000014ee <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	0b b6       	in	r0, 0x3b	; 59
    14fa:	0f 92       	push	r0
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	ef 93       	push	r30
    1512:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    1514:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    1518:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    151c:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <adcb_callback>
    1520:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <adcb_callback+0x1>
    1524:	68 e0       	ldi	r22, 0x08	; 8
    1526:	80 e4       	ldi	r24, 0x40	; 64
    1528:	92 e0       	ldi	r25, 0x02	; 2
    152a:	19 95       	eicall
}
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0b be       	out	0x3b, r0	; 59
    1548:	0f 90       	pop	r0
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	0f 90       	pop	r0
    154e:	1f 90       	pop	r1
    1550:	18 95       	reti

00001552 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	1f 92       	push	r1
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	8c 01       	movw	r16, r24
    156c:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    156e:	81 15       	cp	r24, r1
    1570:	22 e0       	ldi	r18, 0x02	; 2
    1572:	92 07       	cpc	r25, r18
    1574:	71 f4       	brne	.+28     	; 0x1592 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    1576:	61 e2       	ldi	r22, 0x21	; 33
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	25 d1       	rcall	.+586    	; 0x17c8 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    157e:	c8 2e       	mov	r12, r24
    1580:	d1 2c       	mov	r13, r1
    1582:	60 e2       	ldi	r22, 0x20	; 32
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	82 e0       	ldi	r24, 0x02	; 2
    1588:	1f d1       	rcall	.+574    	; 0x17c8 <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    158a:	dc 2c       	mov	r13, r12
    158c:	cc 24       	eor	r12, r12
    158e:	c8 2a       	or	r12, r24
    1590:	10 c0       	rjmp	.+32     	; 0x15b2 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1592:	80 34       	cpi	r24, 0x40	; 64
    1594:	92 40       	sbci	r25, 0x02	; 2
    1596:	c1 f5       	brne	.+112    	; 0x1608 <adc_write_configuration+0xb6>
    1598:	65 e2       	ldi	r22, 0x25	; 37
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	14 d1       	rcall	.+552    	; 0x17c8 <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    15a0:	c8 2e       	mov	r12, r24
    15a2:	d1 2c       	mov	r13, r1
    15a4:	64 e2       	ldi	r22, 0x24	; 36
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	82 e0       	ldi	r24, 0x02	; 2
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    15aa:	0e d1       	rcall	.+540    	; 0x17c8 <nvm_read_byte>
    15ac:	dc 2c       	mov	r13, r12
    15ae:	cc 24       	eor	r12, r12

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    15b0:	c8 2a       	or	r12, r24
	cpu_irq_disable();
    15b2:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    15b4:	89 83       	std	Y+1, r24	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    15b6:	f8 94       	cli
    15b8:	b9 80       	ldd	r11, Y+1	; 0x01
    15ba:	c8 01       	movw	r24, r16
	enable = adc->CTRLA & ADC_ENABLE_bm;
    15bc:	d2 dd       	rcall	.-1116   	; 0x1162 <adc_enable_clock>
    15be:	f8 01       	movw	r30, r16

	adc->CTRLA = ADC_FLUSH_bm;
    15c0:	80 81       	ld	r24, Z
    15c2:	92 e0       	ldi	r25, 0x02	; 2
	adc->CAL = cal;
    15c4:	90 83       	st	Z, r25
    15c6:	c4 86       	std	Z+12, r12	; 0x0c
	adc->CMP = conf->cmp;
    15c8:	d5 86       	std	Z+13, r13	; 0x0d
    15ca:	f7 01       	movw	r30, r14
    15cc:	25 81       	ldd	r18, Z+5	; 0x05
    15ce:	36 81       	ldd	r19, Z+6	; 0x06
    15d0:	f8 01       	movw	r30, r16
    15d2:	20 8f       	std	Z+24, r18	; 0x18
	adc->REFCTRL = conf->refctrl;
    15d4:	31 8f       	std	Z+25, r19	; 0x19
    15d6:	f7 01       	movw	r30, r14
    15d8:	92 81       	ldd	r25, Z+2	; 0x02
    15da:	f8 01       	movw	r30, r16
	adc->PRESCALER = conf->prescaler;
    15dc:	92 83       	std	Z+2, r25	; 0x02
    15de:	f7 01       	movw	r30, r14
    15e0:	94 81       	ldd	r25, Z+4	; 0x04
    15e2:	f8 01       	movw	r30, r16
	adc->EVCTRL = conf->evctrl;
    15e4:	94 83       	std	Z+4, r25	; 0x04
    15e6:	f7 01       	movw	r30, r14
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	f8 01       	movw	r30, r16
	adc->CTRLB = conf->ctrlb;
    15ec:	93 83       	std	Z+3, r25	; 0x03
    15ee:	f7 01       	movw	r30, r14
    15f0:	91 81       	ldd	r25, Z+1	; 0x01
    15f2:	f8 01       	movw	r30, r16

	adc->CTRLA = enable | conf->ctrla;
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	81 70       	andi	r24, 0x01	; 1
    15f8:	f7 01       	movw	r30, r14
    15fa:	90 81       	ld	r25, Z
    15fc:	89 2b       	or	r24, r25

	adc_disable_clock(adc);
    15fe:	f8 01       	movw	r30, r16
    1600:	80 83       	st	Z, r24
    1602:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1604:	cd dd       	rcall	.-1126   	; 0x11a0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    1606:	bf be       	out	0x3f, r11	; 63
    1608:	0f 90       	pop	r0
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	1f 91       	pop	r17
    1610:	0f 91       	pop	r16
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	bf 90       	pop	r11
    161c:	08 95       	ret

0000161e <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	1f 92       	push	r1
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	8c 01       	movw	r16, r24
    1634:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1636:	8f b7       	in	r24, 0x3f	; 63
    1638:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    163a:	f8 94       	cli
	return flags;
    163c:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    163e:	c8 01       	movw	r24, r16
    1640:	90 dd       	rcall	.-1248   	; 0x1162 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1642:	f8 01       	movw	r30, r16
    1644:	80 81       	ld	r24, Z
    1646:	80 7c       	andi	r24, 0xC0	; 192
    1648:	f7 01       	movw	r30, r14
    164a:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    164c:	f8 01       	movw	r30, r16
    164e:	80 8d       	ldd	r24, Z+24	; 0x18
    1650:	91 8d       	ldd	r25, Z+25	; 0x19
    1652:	f7 01       	movw	r30, r14
    1654:	85 83       	std	Z+5, r24	; 0x05
    1656:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    1658:	f8 01       	movw	r30, r16
    165a:	82 81       	ldd	r24, Z+2	; 0x02
    165c:	f7 01       	movw	r30, r14
    165e:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1660:	f8 01       	movw	r30, r16
    1662:	84 81       	ldd	r24, Z+4	; 0x04
    1664:	f7 01       	movw	r30, r14
    1666:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    1668:	f8 01       	movw	r30, r16
    166a:	83 81       	ldd	r24, Z+3	; 0x03
    166c:	f7 01       	movw	r30, r14
    166e:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1670:	f8 01       	movw	r30, r16
    1672:	81 81       	ldd	r24, Z+1	; 0x01
    1674:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    1676:	81 83       	std	Z+1, r24	; 0x01
    1678:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    167a:	92 dd       	rcall	.-1244   	; 0x11a0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    167c:	df be       	out	0x3f, r13	; 63
    167e:	0f 90       	pop	r0
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	ff 90       	pop	r15
    168a:	ef 90       	pop	r14
    168c:	df 90       	pop	r13
    168e:	08 95       	ret

00001690 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    1690:	af 92       	push	r10
    1692:	bf 92       	push	r11
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	1f 92       	push	r1
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	6c 01       	movw	r12, r24
    16ac:	b6 2e       	mov	r11, r22
    16ae:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    16b0:	86 2f       	mov	r24, r22
    16b2:	83 70       	andi	r24, 0x03	; 3
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    16b6:	96 2f       	mov	r25, r22
    16b8:	96 95       	lsr	r25
    16ba:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    16bc:	82 e0       	ldi	r24, 0x02	; 2
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    16c0:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    16c2:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    16c4:	90 ff       	sbrs	r25, 0
		index++;
    16c6:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    16c8:	86 01       	movw	r16, r12
    16ca:	00 5e       	subi	r16, 0xE0	; 224
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	98 e0       	ldi	r25, 0x08	; 8
    16d0:	89 9f       	mul	r24, r25
    16d2:	00 0d       	add	r16, r0
    16d4:	11 1d       	adc	r17, r1
    16d6:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    16d8:	8f b7       	in	r24, 0x3f	; 63
    16da:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    16dc:	f8 94       	cli
	return flags;
    16de:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    16e0:	c6 01       	movw	r24, r12
    16e2:	3f dd       	rcall	.-1410   	; 0x1162 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    16e4:	f7 01       	movw	r30, r14
    16e6:	80 81       	ld	r24, Z
    16e8:	f8 01       	movw	r30, r16
    16ea:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    16ec:	f7 01       	movw	r30, r14
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	f8 01       	movw	r30, r16
    16f2:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    16f4:	f7 01       	movw	r30, r14
    16f6:	81 81       	ldd	r24, Z+1	; 0x01
    16f8:	f8 01       	movw	r30, r16
    16fa:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    16fc:	b0 fe       	sbrs	r11, 0
    16fe:	04 c0       	rjmp	.+8      	; 0x1708 <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1700:	f7 01       	movw	r30, r14
    1702:	83 81       	ldd	r24, Z+3	; 0x03
    1704:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    1706:	86 83       	std	Z+6, r24	; 0x06
    1708:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    170a:	4a dd       	rcall	.-1388   	; 0x11a0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    170c:	af be       	out	0x3f, r10	; 63
    170e:	0f 90       	pop	r0
    1710:	df 91       	pop	r29
    1712:	cf 91       	pop	r28
    1714:	1f 91       	pop	r17
    1716:	0f 91       	pop	r16
    1718:	ff 90       	pop	r15
    171a:	ef 90       	pop	r14
    171c:	df 90       	pop	r13
    171e:	cf 90       	pop	r12
    1720:	bf 90       	pop	r11
    1722:	af 90       	pop	r10
    1724:	08 95       	ret

00001726 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    1726:	af 92       	push	r10
    1728:	bf 92       	push	r11
    172a:	cf 92       	push	r12
    172c:	df 92       	push	r13
    172e:	ef 92       	push	r14
    1730:	ff 92       	push	r15
    1732:	0f 93       	push	r16
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	1f 92       	push	r1
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	6c 01       	movw	r12, r24
    1742:	b6 2e       	mov	r11, r22
    1744:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1746:	86 2f       	mov	r24, r22
    1748:	83 70       	andi	r24, 0x03	; 3
    174a:	29 f4       	brne	.+10     	; 0x1756 <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    174c:	96 2f       	mov	r25, r22
    174e:	96 95       	lsr	r25
    1750:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	02 c0       	rjmp	.+4      	; 0x175a <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    1756:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    1758:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    175a:	90 ff       	sbrs	r25, 0
		index++;
    175c:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    175e:	86 01       	movw	r16, r12
    1760:	00 5e       	subi	r16, 0xE0	; 224
    1762:	1f 4f       	sbci	r17, 0xFF	; 255
    1764:	98 e0       	ldi	r25, 0x08	; 8
    1766:	89 9f       	mul	r24, r25
    1768:	00 0d       	add	r16, r0
    176a:	11 1d       	adc	r17, r1
    176c:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    176e:	8f b7       	in	r24, 0x3f	; 63
    1770:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1772:	f8 94       	cli
	return flags;
    1774:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    1776:	c6 01       	movw	r24, r12
    1778:	f4 dc       	rcall	.-1560   	; 0x1162 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    177a:	f8 01       	movw	r30, r16
    177c:	80 81       	ld	r24, Z
    177e:	f7 01       	movw	r30, r14
    1780:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1782:	f8 01       	movw	r30, r16
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	f7 01       	movw	r30, r14
    1788:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    178a:	f8 01       	movw	r30, r16
    178c:	81 81       	ldd	r24, Z+1	; 0x01
    178e:	f7 01       	movw	r30, r14
    1790:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1792:	b0 fe       	sbrs	r11, 0
    1794:	04 c0       	rjmp	.+8      	; 0x179e <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    1796:	f8 01       	movw	r30, r16
    1798:	86 81       	ldd	r24, Z+6	; 0x06
    179a:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    179c:	83 83       	std	Z+3, r24	; 0x03
    179e:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    17a0:	ff dc       	rcall	.-1538   	; 0x11a0 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    17a2:	af be       	out	0x3f, r10	; 63
    17a4:	0f 90       	pop	r0
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	ff 90       	pop	r15
    17b0:	ef 90       	pop	r14
    17b2:	df 90       	pop	r13
    17b4:	cf 90       	pop	r12
    17b6:	bf 90       	pop	r11
    17b8:	af 90       	pop	r10
    17ba:	08 95       	ret

000017bc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    17bc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    17be:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    17c0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    17c2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    17c4:	60 83       	st	Z, r22
	ret                             // Return to caller
    17c6:	08 95       	ret

000017c8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    17c8:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    17cc:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    17ce:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    17d0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    17d4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    17d6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    17da:	08 95       	ret

000017dc <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    17dc:	cf 92       	push	r12
    17de:	df 92       	push	r13
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    17ee:	d9 01       	movw	r26, r18
    17f0:	c8 01       	movw	r24, r16
    17f2:	b6 95       	lsr	r27
    17f4:	a7 95       	ror	r26
    17f6:	97 95       	ror	r25
    17f8:	87 95       	ror	r24
    17fa:	48 17       	cp	r20, r24
    17fc:	59 07       	cpc	r21, r25
    17fe:	6a 07       	cpc	r22, r26
    1800:	7b 07       	cpc	r23, r27
    1802:	70 f4       	brcc	.+28     	; 0x1820 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    1804:	6a 01       	movw	r12, r20
    1806:	7b 01       	movw	r14, r22
    1808:	cc 0c       	add	r12, r12
    180a:	dd 1c       	adc	r13, r13
    180c:	ee 1c       	adc	r14, r14
    180e:	ff 1c       	adc	r15, r15
    1810:	c9 01       	movw	r24, r18
    1812:	b8 01       	movw	r22, r16
    1814:	a7 01       	movw	r20, r14
    1816:	96 01       	movw	r18, r12
    1818:	f6 d1       	rcall	.+1004   	; 0x1c06 <__udivmodsi4>
    181a:	21 50       	subi	r18, 0x01	; 1
    181c:	31 09       	sbc	r19, r1
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    1824:	83 2f       	mov	r24, r19
    1826:	8f 70       	andi	r24, 0x0F	; 15
    1828:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    182a:	2e 83       	std	Y+6, r18	; 0x06
}
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	08 95       	ret

0000183e <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	1f 92       	push	r1
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	7c 01       	movw	r14, r24
    1854:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	09 f4       	brne	.+2      	; 0x185c <usart_init_spi+0x1e>
    185a:	b2 c1       	rjmp	.+868    	; 0x1bc0 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    185c:	80 3c       	cpi	r24, 0xC0	; 192
    185e:	91 05       	cpc	r25, r1
    1860:	21 f4       	brne	.+8      	; 0x186a <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1862:	60 e1       	ldi	r22, 0x10	; 16
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	03 d9       	rcall	.-3578   	; 0xa6e <sysclk_enable_module>
    1868:	ab c1       	rjmp	.+854    	; 0x1bc0 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    186a:	80 e8       	ldi	r24, 0x80	; 128
    186c:	e8 16       	cp	r14, r24
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	f8 06       	cpc	r15, r24
    1872:	21 f4       	brne	.+8      	; 0x187c <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1874:	62 e0       	ldi	r22, 0x02	; 2
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	fa d8       	rcall	.-3596   	; 0xa6e <sysclk_enable_module>
    187a:	a2 c1       	rjmp	.+836    	; 0x1bc0 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    187c:	e1 14       	cp	r14, r1
    187e:	e1 e0       	ldi	r30, 0x01	; 1
    1880:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1882:	21 f4       	brne	.+8      	; 0x188c <usart_init_spi+0x4e>
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	f2 d8       	rcall	.-3612   	; 0xa6e <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    188a:	9a c1       	rjmp	.+820    	; 0x1bc0 <usart_init_spi+0x382>
    188c:	f0 e8       	ldi	r31, 0x80	; 128
    188e:	ef 16       	cp	r14, r31
    1890:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1892:	ff 06       	cpc	r15, r31
    1894:	21 f4       	brne	.+8      	; 0x189e <usart_init_spi+0x60>
    1896:	61 e0       	ldi	r22, 0x01	; 1
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	e9 d8       	rcall	.-3630   	; 0xa6e <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    189c:	91 c1       	rjmp	.+802    	; 0x1bc0 <usart_init_spi+0x382>
    189e:	30 e9       	ldi	r19, 0x90	; 144
    18a0:	e3 16       	cp	r14, r19
    18a2:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    18a4:	f3 06       	cpc	r15, r19
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <usart_init_spi+0x72>
    18a8:	61 e0       	ldi	r22, 0x01	; 1
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	e0 d8       	rcall	.-3648   	; 0xa6e <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    18ae:	88 c1       	rjmp	.+784    	; 0x1bc0 <usart_init_spi+0x382>
    18b0:	e1 14       	cp	r14, r1
    18b2:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    18b4:	f8 06       	cpc	r15, r24
    18b6:	21 f4       	brne	.+8      	; 0x18c0 <usart_init_spi+0x82>
    18b8:	62 e0       	ldi	r22, 0x02	; 2
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	d8 d8       	rcall	.-3664   	; 0xa6e <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    18be:	80 c1       	rjmp	.+768    	; 0x1bc0 <usart_init_spi+0x382>
    18c0:	e0 e4       	ldi	r30, 0x40	; 64
    18c2:	ee 16       	cp	r14, r30
    18c4:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    18c6:	fe 06       	cpc	r15, r30
    18c8:	21 f4       	brne	.+8      	; 0x18d2 <usart_init_spi+0x94>
    18ca:	62 e0       	ldi	r22, 0x02	; 2
    18cc:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    18ce:	cf d8       	rcall	.-3682   	; 0xa6e <sysclk_enable_module>
    18d0:	77 c1       	rjmp	.+750    	; 0x1bc0 <usart_init_spi+0x382>
    18d2:	f0 e2       	ldi	r31, 0x20	; 32
    18d4:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    18d6:	f3 e0       	ldi	r31, 0x03	; 3
    18d8:	ff 06       	cpc	r15, r31
    18da:	21 f4       	brne	.+8      	; 0x18e4 <usart_init_spi+0xa6>
    18dc:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	c6 d8       	rcall	.-3700   	; 0xa6e <sysclk_enable_module>
    18e2:	6e c1       	rjmp	.+732    	; 0x1bc0 <usart_init_spi+0x382>
    18e4:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    18e6:	38 e0       	ldi	r19, 0x08	; 8
    18e8:	f3 06       	cpc	r15, r19
    18ea:	21 f4       	brne	.+8      	; 0x18f4 <usart_init_spi+0xb6>
    18ec:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    18ee:	83 e0       	ldi	r24, 0x03	; 3
    18f0:	be d8       	rcall	.-3716   	; 0xa6e <sysclk_enable_module>
    18f2:	66 c1       	rjmp	.+716    	; 0x1bc0 <usart_init_spi+0x382>
    18f4:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    18f6:	89 e0       	ldi	r24, 0x09	; 9
    18f8:	f8 06       	cpc	r15, r24
    18fa:	21 f4       	brne	.+8      	; 0x1904 <usart_init_spi+0xc6>
    18fc:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    18fe:	84 e0       	ldi	r24, 0x04	; 4
    1900:	b6 d8       	rcall	.-3732   	; 0xa6e <sysclk_enable_module>
    1902:	5e c1       	rjmp	.+700    	; 0x1bc0 <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1904:	e1 14       	cp	r14, r1
    1906:	ea e0       	ldi	r30, 0x0A	; 10
    1908:	fe 06       	cpc	r15, r30
    190a:	21 f4       	brne	.+8      	; 0x1914 <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    190c:	61 e0       	ldi	r22, 0x01	; 1
    190e:	85 e0       	ldi	r24, 0x05	; 5
    1910:	ae d8       	rcall	.-3748   	; 0xa6e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1912:	56 c1       	rjmp	.+684    	; 0x1bc0 <usart_init_spi+0x382>
    1914:	e1 14       	cp	r14, r1
    1916:	fb e0       	ldi	r31, 0x0B	; 11
    1918:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    191a:	21 f4       	brne	.+8      	; 0x1924 <usart_init_spi+0xe6>
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	a6 d8       	rcall	.-3764   	; 0xa6e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1922:	4e c1       	rjmp	.+668    	; 0x1bc0 <usart_init_spi+0x382>
    1924:	30 e4       	ldi	r19, 0x40	; 64
    1926:	e3 16       	cp	r14, r19
    1928:	38 e0       	ldi	r19, 0x08	; 8
    192a:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    192c:	21 f4       	brne	.+8      	; 0x1936 <usart_init_spi+0xf8>
    192e:	62 e0       	ldi	r22, 0x02	; 2
    1930:	83 e0       	ldi	r24, 0x03	; 3
    1932:	9d d8       	rcall	.-3782   	; 0xa6e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1934:	45 c1       	rjmp	.+650    	; 0x1bc0 <usart_init_spi+0x382>
    1936:	80 e4       	ldi	r24, 0x40	; 64
    1938:	e8 16       	cp	r14, r24
    193a:	89 e0       	ldi	r24, 0x09	; 9
    193c:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    193e:	21 f4       	brne	.+8      	; 0x1948 <usart_init_spi+0x10a>
    1940:	62 e0       	ldi	r22, 0x02	; 2
    1942:	84 e0       	ldi	r24, 0x04	; 4
    1944:	94 d8       	rcall	.-3800   	; 0xa6e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1946:	3c c1       	rjmp	.+632    	; 0x1bc0 <usart_init_spi+0x382>
    1948:	e0 e4       	ldi	r30, 0x40	; 64
    194a:	ee 16       	cp	r14, r30
    194c:	ea e0       	ldi	r30, 0x0A	; 10
    194e:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1950:	21 f4       	brne	.+8      	; 0x195a <usart_init_spi+0x11c>
    1952:	62 e0       	ldi	r22, 0x02	; 2
    1954:	85 e0       	ldi	r24, 0x05	; 5
    1956:	8b d8       	rcall	.-3818   	; 0xa6e <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1958:	33 c1       	rjmp	.+614    	; 0x1bc0 <usart_init_spi+0x382>
    195a:	f0 e9       	ldi	r31, 0x90	; 144
    195c:	ef 16       	cp	r14, r31
    195e:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1960:	ff 06       	cpc	r15, r31
    1962:	21 f4       	brne	.+8      	; 0x196c <usart_init_spi+0x12e>
    1964:	64 e0       	ldi	r22, 0x04	; 4
    1966:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1968:	82 d8       	rcall	.-3836   	; 0xa6e <sysclk_enable_module>
    196a:	2a c1       	rjmp	.+596    	; 0x1bc0 <usart_init_spi+0x382>
    196c:	30 e9       	ldi	r19, 0x90	; 144
    196e:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1970:	39 e0       	ldi	r19, 0x09	; 9
    1972:	f3 06       	cpc	r15, r19
    1974:	21 f4       	brne	.+8      	; 0x197e <usart_init_spi+0x140>
    1976:	64 e0       	ldi	r22, 0x04	; 4
    1978:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    197a:	79 d8       	rcall	.-3854   	; 0xa6e <sysclk_enable_module>
    197c:	21 c1       	rjmp	.+578    	; 0x1bc0 <usart_init_spi+0x382>
    197e:	80 e9       	ldi	r24, 0x90	; 144
    1980:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1982:	8a e0       	ldi	r24, 0x0A	; 10
    1984:	f8 06       	cpc	r15, r24
    1986:	21 f4       	brne	.+8      	; 0x1990 <usart_init_spi+0x152>
    1988:	64 e0       	ldi	r22, 0x04	; 4
    198a:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    198c:	70 d8       	rcall	.-3872   	; 0xa6e <sysclk_enable_module>
    198e:	18 c1       	rjmp	.+560    	; 0x1bc0 <usart_init_spi+0x382>
    1990:	e0 e9       	ldi	r30, 0x90	; 144
    1992:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1994:	eb e0       	ldi	r30, 0x0B	; 11
    1996:	fe 06       	cpc	r15, r30
    1998:	21 f4       	brne	.+8      	; 0x19a2 <usart_init_spi+0x164>
    199a:	64 e0       	ldi	r22, 0x04	; 4
    199c:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    199e:	67 d8       	rcall	.-3890   	; 0xa6e <sysclk_enable_module>
    19a0:	0f c1       	rjmp	.+542    	; 0x1bc0 <usart_init_spi+0x382>
    19a2:	f0 ec       	ldi	r31, 0xC0	; 192
    19a4:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    19a6:	f8 e0       	ldi	r31, 0x08	; 8
    19a8:	ff 06       	cpc	r15, r31
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <usart_init_spi+0x176>
    19ac:	68 e0       	ldi	r22, 0x08	; 8
    19ae:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    19b0:	5e d8       	rcall	.-3908   	; 0xa6e <sysclk_enable_module>
    19b2:	06 c1       	rjmp	.+524    	; 0x1bc0 <usart_init_spi+0x382>
    19b4:	30 ec       	ldi	r19, 0xC0	; 192
    19b6:	e3 16       	cp	r14, r19
    19b8:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    19ba:	f3 06       	cpc	r15, r19
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <usart_init_spi+0x188>
    19be:	68 e0       	ldi	r22, 0x08	; 8
    19c0:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    19c2:	55 d8       	rcall	.-3926   	; 0xa6e <sysclk_enable_module>
    19c4:	fd c0       	rjmp	.+506    	; 0x1bc0 <usart_init_spi+0x382>
    19c6:	80 ea       	ldi	r24, 0xA0	; 160
    19c8:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    19ca:	88 e0       	ldi	r24, 0x08	; 8
    19cc:	f8 06       	cpc	r15, r24
    19ce:	61 f4       	brne	.+24     	; 0x19e8 <usart_init_spi+0x1aa>
    19d0:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	4c d8       	rcall	.-3944   	; 0xa6e <sysclk_enable_module>
    19d6:	e0 ea       	ldi	r30, 0xA0	; 160
    19d8:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    19da:	84 81       	ldd	r24, Z+4	; 0x04
    19dc:	8f 7e       	andi	r24, 0xEF	; 239
    19de:	84 83       	std	Z+4, r24	; 0x04
    19e0:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    19e2:	24 81       	ldd	r18, Z+4	; 0x04
    19e4:	22 50       	subi	r18, 0x02	; 2
    19e6:	4c c0       	rjmp	.+152    	; 0x1a80 <usart_init_spi+0x242>
    19e8:	f0 ea       	ldi	r31, 0xA0	; 160
    19ea:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    19ec:	f9 e0       	ldi	r31, 0x09	; 9
    19ee:	ff 06       	cpc	r15, r31
    19f0:	21 f4       	brne	.+8      	; 0x19fa <usart_init_spi+0x1bc>
    19f2:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    19f4:	84 e0       	ldi	r24, 0x04	; 4
    19f6:	3b d8       	rcall	.-3978   	; 0xa6e <sysclk_enable_module>
    19f8:	e3 c0       	rjmp	.+454    	; 0x1bc0 <usart_init_spi+0x382>
    19fa:	30 ea       	ldi	r19, 0xA0	; 160
    19fc:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    19fe:	3a e0       	ldi	r19, 0x0A	; 10
    1a00:	f3 06       	cpc	r15, r19
    1a02:	21 f4       	brne	.+8      	; 0x1a0c <usart_init_spi+0x1ce>
    1a04:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1a06:	85 e0       	ldi	r24, 0x05	; 5
    1a08:	32 d8       	rcall	.-3996   	; 0xa6e <sysclk_enable_module>
    1a0a:	da c0       	rjmp	.+436    	; 0x1bc0 <usart_init_spi+0x382>
    1a0c:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1a0e:	e8 16       	cp	r14, r24
    1a10:	8b e0       	ldi	r24, 0x0B	; 11
    1a12:	f8 06       	cpc	r15, r24
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1a16:	60 e1       	ldi	r22, 0x10	; 16
    1a18:	86 e0       	ldi	r24, 0x06	; 6
    1a1a:	29 d8       	rcall	.-4014   	; 0xa6e <sysclk_enable_module>
    1a1c:	d1 c0       	rjmp	.+418    	; 0x1bc0 <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1a1e:	e0 eb       	ldi	r30, 0xB0	; 176
    1a20:	ee 16       	cp	r14, r30
    1a22:	e8 e0       	ldi	r30, 0x08	; 8
    1a24:	fe 06       	cpc	r15, r30
    1a26:	21 f4       	brne	.+8      	; 0x1a30 <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1a28:	60 e2       	ldi	r22, 0x20	; 32
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	20 d8       	rcall	.-4032   	; 0xa6e <sysclk_enable_module>
    1a2e:	c8 c0       	rjmp	.+400    	; 0x1bc0 <usart_init_spi+0x382>
    1a30:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1a32:	ef 16       	cp	r14, r31
    1a34:	f9 e0       	ldi	r31, 0x09	; 9
    1a36:	ff 06       	cpc	r15, r31
    1a38:	21 f4       	brne	.+8      	; 0x1a42 <usart_init_spi+0x204>
    1a3a:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1a3c:	84 e0       	ldi	r24, 0x04	; 4
    1a3e:	17 d8       	rcall	.-4050   	; 0xa6e <sysclk_enable_module>
    1a40:	bf c0       	rjmp	.+382    	; 0x1bc0 <usart_init_spi+0x382>
    1a42:	30 e8       	ldi	r19, 0x80	; 128
    1a44:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1a46:	34 e0       	ldi	r19, 0x04	; 4
    1a48:	f3 06       	cpc	r15, r19
    1a4a:	21 f4       	brne	.+8      	; 0x1a54 <usart_init_spi+0x216>
    1a4c:	60 e4       	ldi	r22, 0x40	; 64
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1a50:	0e d8       	rcall	.-4068   	; 0xa6e <sysclk_enable_module>
    1a52:	b6 c0       	rjmp	.+364    	; 0x1bc0 <usart_init_spi+0x382>
    1a54:	80 ea       	ldi	r24, 0xA0	; 160
    1a56:	e8 16       	cp	r14, r24
    1a58:	84 e0       	ldi	r24, 0x04	; 4
    1a5a:	f8 06       	cpc	r15, r24
    1a5c:	21 f4       	brne	.+8      	; 0x1a66 <usart_init_spi+0x228>
    1a5e:	60 e4       	ldi	r22, 0x40	; 64
    1a60:	85 e0       	ldi	r24, 0x05	; 5
    1a62:	05 d8       	rcall	.-4086   	; 0xa6e <sysclk_enable_module>
    1a64:	ad c0       	rjmp	.+346    	; 0x1bc0 <usart_init_spi+0x382>
    1a66:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1a68:	84 81       	ldd	r24, Z+4	; 0x04
    1a6a:	8f 7e       	andi	r24, 0xEF	; 239
    1a6c:	84 83       	std	Z+4, r24	; 0x04
    1a6e:	fb 01       	movw	r30, r22
    1a70:	24 81       	ldd	r18, Z+4	; 0x04
    1a72:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1a74:	c7 01       	movw	r24, r14
    1a76:	f0 ea       	ldi	r31, 0xA0	; 160
    1a78:	ef 16       	cp	r14, r31
    1a7a:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1a7c:	ff 06       	cpc	r15, r31
    1a7e:	49 f4       	brne	.+18     	; 0x1a92 <usart_init_spi+0x254>
    1a80:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1a84:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1a86:	a5 c0       	rjmp	.+330    	; 0x1bd2 <usart_init_spi+0x394>
    1a88:	0f 2e       	mov	r0, r31
    1a8a:	f1 e1       	ldi	r31, 0x11	; 17
    1a8c:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1a8e:	f0 2d       	mov	r31, r0
    1a90:	a4 c0       	rjmp	.+328    	; 0x1bda <usart_init_spi+0x39c>
    1a92:	80 3b       	cpi	r24, 0xB0	; 176
    1a94:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1a96:	93 07       	cpc	r25, r19
    1a98:	91 f0       	breq	.+36     	; 0x1abe <usart_init_spi+0x280>
    1a9a:	80 3a       	cpi	r24, 0xA0	; 160
    1a9c:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1a9e:	9e 07       	cpc	r25, r30
    1aa0:	49 f4       	brne	.+18     	; 0x1ab4 <usart_init_spi+0x276>
    1aa2:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1aa6:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1aa8:	9b c0       	rjmp	.+310    	; 0x1be0 <usart_init_spi+0x3a2>
    1aaa:	0f 2e       	mov	r0, r31
    1aac:	f9 e1       	ldi	r31, 0x19	; 25
    1aae:	df 2e       	mov	r13, r31
    1ab0:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1ab2:	16 c0       	rjmp	.+44     	; 0x1ae0 <usart_init_spi+0x2a2>
    1ab4:	80 3b       	cpi	r24, 0xB0	; 176
    1ab6:	f9 e0       	ldi	r31, 0x09	; 9
    1ab8:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1aba:	f1 f0       	breq	.+60     	; 0x1af8 <usart_init_spi+0x2ba>
    1abc:	04 c0       	rjmp	.+8      	; 0x1ac6 <usart_init_spi+0x288>
    1abe:	0f 2e       	mov	r0, r31
    1ac0:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1ac2:	df 2e       	mov	r13, r31
    1ac4:	f0 2d       	mov	r31, r0
    1ac6:	80 3a       	cpi	r24, 0xA0	; 160
    1ac8:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1aca:	93 07       	cpc	r25, r19
    1acc:	49 f4       	brne	.+18     	; 0x1ae0 <usart_init_spi+0x2a2>
    1ace:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1ad2:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1ad4:	8a c0       	rjmp	.+276    	; 0x1bea <usart_init_spi+0x3ac>
    1ad6:	0f 2e       	mov	r0, r31
    1ad8:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1ada:	df 2e       	mov	r13, r31
    1adc:	f0 2d       	mov	r31, r0
    1ade:	15 c0       	rjmp	.+42     	; 0x1b0a <usart_init_spi+0x2cc>
    1ae0:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1ae2:	9b 40       	sbci	r25, 0x0B	; 11
    1ae4:	91 f4       	brne	.+36     	; 0x1b0a <usart_init_spi+0x2cc>
    1ae6:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1aea:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1aec:	0a c0       	rjmp	.+20     	; 0x1b02 <usart_init_spi+0x2c4>
    1aee:	0f 2e       	mov	r0, r31
    1af0:	f9 e2       	ldi	r31, 0x29	; 41
    1af2:	df 2e       	mov	r13, r31
    1af4:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1af6:	09 c0       	rjmp	.+18     	; 0x1b0a <usart_init_spi+0x2cc>
    1af8:	0f 2e       	mov	r0, r31
    1afa:	fd e1       	ldi	r31, 0x1D	; 29
    1afc:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1afe:	f0 2d       	mov	r31, r0
    1b00:	04 c0       	rjmp	.+8      	; 0x1b0a <usart_init_spi+0x2cc>
    1b02:	0f 2e       	mov	r0, r31
    1b04:	fd e2       	ldi	r31, 0x2D	; 45
    1b06:	df 2e       	mov	r13, r31
    1b08:	f0 2d       	mov	r31, r0
    1b0a:	ed 2d       	mov	r30, r13
    1b0c:	e6 95       	lsr	r30
    1b0e:	e6 95       	lsr	r30
    1b10:	e6 95       	lsr	r30
    1b12:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1b14:	e3 9f       	mul	r30, r19
    1b16:	f0 01       	movw	r30, r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	fa 5f       	subi	r31, 0xFA	; 250
    1b1c:	3d 2d       	mov	r19, r13
    1b1e:	37 70       	andi	r19, 0x07	; 7
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1b24:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <usart_init_spi+0x2ee>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1b30:	81 83       	std	Z+1, r24	; 0x01
    1b32:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1b34:	10 f0       	brcs	.+4      	; 0x1b3a <usart_init_spi+0x2fc>
    1b36:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <usart_init_spi+0x2fe>
    1b3a:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
    1b3c:	df 01       	movw	r26, r30
	return flags;
    1b3e:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1b40:	a3 0f       	add	r26, r19
    1b42:	b1 1d       	adc	r27, r1
    1b44:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
    1b46:	99 83       	std	Y+1, r25	; 0x01
    1b48:	f8 94       	cli
    1b4a:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1b4c:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1b4e:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1b50:	2c 93       	st	X, r18
    1b52:	9c 91       	ld	r25, X
    1b54:	94 2b       	or	r25, r20
    1b56:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1b58:	3f bf       	out	0x3f, r19	; 63
    1b5a:	85 83       	std	Z+5, r24	; 0x05
    1b5c:	f7 01       	movw	r30, r14
    1b5e:	85 81       	ldd	r24, Z+5	; 0x05
    1b60:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
    1b62:	85 83       	std	Z+5, r24	; 0x05
    1b64:	f8 01       	movw	r30, r16
    1b66:	84 81       	ldd	r24, Z+4	; 0x04
    1b68:	8d 7f       	andi	r24, 0xFD	; 253
    1b6a:	81 30       	cpi	r24, 0x01	; 1
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1b6c:	29 f4       	brne	.+10     	; 0x1b78 <usart_init_spi+0x33a>
    1b6e:	f7 01       	movw	r30, r14
    1b70:	85 81       	ldd	r24, Z+5	; 0x05
    1b72:	82 60       	ori	r24, 0x02	; 2
	}
	if (opt->data_order) {
    1b74:	85 83       	std	Z+5, r24	; 0x05
    1b76:	04 c0       	rjmp	.+8      	; 0x1b80 <usart_init_spi+0x342>
    1b78:	f7 01       	movw	r30, r14
		(usart)->CTRLC |= USART_DORD_bm;
    1b7a:	85 81       	ldd	r24, Z+5	; 0x05
    1b7c:	8d 7f       	andi	r24, 0xFD	; 253
    1b7e:	85 83       	std	Z+5, r24	; 0x05
    1b80:	f8 01       	movw	r30, r16
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1b82:	85 81       	ldd	r24, Z+5	; 0x05
    1b84:	88 23       	and	r24, r24
    1b86:	29 f0       	breq	.+10     	; 0x1b92 <usart_init_spi+0x354>
    1b88:	f7 01       	movw	r30, r14
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1b8a:	85 81       	ldd	r24, Z+5	; 0x05
    1b8c:	84 60       	ori	r24, 0x04	; 4
    1b8e:	85 83       	std	Z+5, r24	; 0x05
    1b90:	04 c0       	rjmp	.+8      	; 0x1b9a <usart_init_spi+0x35c>
    1b92:	f7 01       	movw	r30, r14
    1b94:	85 81       	ldd	r24, Z+5	; 0x05
    1b96:	8b 7f       	andi	r24, 0xFB	; 251
    1b98:	85 83       	std	Z+5, r24	; 0x05
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	40 81       	ld	r20, Z
    1b9e:	51 81       	ldd	r21, Z+1	; 0x01
    1ba0:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1ba2:	73 81       	ldd	r23, Z+3	; 0x03
    1ba4:	00 e0       	ldi	r16, 0x00	; 0
    1ba6:	12 e1       	ldi	r17, 0x12	; 18
    1ba8:	2a e7       	ldi	r18, 0x7A	; 122
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	c7 01       	movw	r24, r14
    1bae:	16 de       	rcall	.-980    	; 0x17dc <usart_spi_set_baudrate>
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1bb0:	f7 01       	movw	r30, r14
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1bb2:	84 81       	ldd	r24, Z+4	; 0x04
    1bb4:	88 60       	ori	r24, 0x08	; 8
    1bb6:	84 83       	std	Z+4, r24	; 0x04
    1bb8:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1bba:	80 61       	ori	r24, 0x10	; 16
    1bbc:	84 83       	std	Z+4, r24	; 0x04
    1bbe:	1a c0       	rjmp	.+52     	; 0x1bf4 <usart_init_spi+0x3b6>
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1bc0:	f7 01       	movw	r30, r14
    1bc2:	84 81       	ldd	r24, Z+4	; 0x04
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1bc4:	8f 7e       	andi	r24, 0xEF	; 239
    1bc6:	84 83       	std	Z+4, r24	; 0x04
    1bc8:	f8 01       	movw	r30, r16
    1bca:	24 81       	ldd	r18, Z+4	; 0x04
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1bcc:	22 50       	subi	r18, 0x02	; 2
    1bce:	c7 01       	movw	r24, r14
    1bd0:	60 cf       	rjmp	.-320    	; 0x1a92 <usart_init_spi+0x254>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1bd2:	0f 2e       	mov	r0, r31
    1bd4:	f5 e1       	ldi	r31, 0x15	; 21
    1bd6:	df 2e       	mov	r13, r31
    1bd8:	f0 2d       	mov	r31, r0
    1bda:	80 ea       	ldi	r24, 0xA0	; 160
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1bdc:	98 e0       	ldi	r25, 0x08	; 8
    1bde:	6a cf       	rjmp	.-300    	; 0x1ab4 <usart_init_spi+0x276>
    1be0:	0f 2e       	mov	r0, r31
    1be2:	fd e1       	ldi	r31, 0x1D	; 29
    1be4:	df 2e       	mov	r13, r31
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1be6:	f0 2d       	mov	r31, r0
    1be8:	7b cf       	rjmp	.-266    	; 0x1ae0 <usart_init_spi+0x2a2>
    1bea:	0f 2e       	mov	r0, r31
    1bec:	f5 e2       	ldi	r31, 0x25	; 37
    1bee:	df 2e       	mov	r13, r31
    1bf0:	f0 2d       	mov	r31, r0
    1bf2:	8b cf       	rjmp	.-234    	; 0x1b0a <usart_init_spi+0x2cc>
    1bf4:	0f 90       	pop	r0
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	08 95       	ret

00001c06 <__udivmodsi4>:
    1c06:	a1 e2       	ldi	r26, 0x21	; 33
    1c08:	1a 2e       	mov	r1, r26
    1c0a:	aa 1b       	sub	r26, r26
    1c0c:	bb 1b       	sub	r27, r27
    1c0e:	fd 01       	movw	r30, r26
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <__udivmodsi4_ep>

00001c12 <__udivmodsi4_loop>:
    1c12:	aa 1f       	adc	r26, r26
    1c14:	bb 1f       	adc	r27, r27
    1c16:	ee 1f       	adc	r30, r30
    1c18:	ff 1f       	adc	r31, r31
    1c1a:	a2 17       	cp	r26, r18
    1c1c:	b3 07       	cpc	r27, r19
    1c1e:	e4 07       	cpc	r30, r20
    1c20:	f5 07       	cpc	r31, r21
    1c22:	20 f0       	brcs	.+8      	; 0x1c2c <__udivmodsi4_ep>
    1c24:	a2 1b       	sub	r26, r18
    1c26:	b3 0b       	sbc	r27, r19
    1c28:	e4 0b       	sbc	r30, r20
    1c2a:	f5 0b       	sbc	r31, r21

00001c2c <__udivmodsi4_ep>:
    1c2c:	66 1f       	adc	r22, r22
    1c2e:	77 1f       	adc	r23, r23
    1c30:	88 1f       	adc	r24, r24
    1c32:	99 1f       	adc	r25, r25
    1c34:	1a 94       	dec	r1
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <__udivmodsi4_loop>
    1c38:	60 95       	com	r22
    1c3a:	70 95       	com	r23
    1c3c:	80 95       	com	r24
    1c3e:	90 95       	com	r25
    1c40:	9b 01       	movw	r18, r22
    1c42:	ac 01       	movw	r20, r24
    1c44:	bd 01       	movw	r22, r26
    1c46:	cf 01       	movw	r24, r30
    1c48:	08 95       	ret

00001c4a <snprintf>:
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	2e 97       	sbiw	r28, 0x0e	; 14
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0e 89       	ldd	r16, Y+22	; 0x16
    1c5e:	1f 89       	ldd	r17, Y+23	; 0x17
    1c60:	88 8d       	ldd	r24, Y+24	; 0x18
    1c62:	99 8d       	ldd	r25, Y+25	; 0x19
    1c64:	26 e0       	ldi	r18, 0x06	; 6
    1c66:	2c 83       	std	Y+4, r18	; 0x04
    1c68:	09 83       	std	Y+1, r16	; 0x01
    1c6a:	1a 83       	std	Y+2, r17	; 0x02
    1c6c:	97 ff       	sbrs	r25, 7
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <snprintf+0x2a>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e8       	ldi	r25, 0x80	; 128
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	ae 01       	movw	r20, r28
    1c7c:	44 5e       	subi	r20, 0xE4	; 228
    1c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1c80:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c82:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c84:	ce 01       	movw	r24, r28
    1c86:	01 96       	adiw	r24, 0x01	; 1
    1c88:	16 d0       	rcall	.+44     	; 0x1cb6 <vfprintf>
    1c8a:	4d 81       	ldd	r20, Y+5	; 0x05
    1c8c:	5e 81       	ldd	r21, Y+6	; 0x06
    1c8e:	57 fd       	sbrc	r21, 7
    1c90:	0a c0       	rjmp	.+20     	; 0x1ca6 <snprintf+0x5c>
    1c92:	2f 81       	ldd	r18, Y+7	; 0x07
    1c94:	38 85       	ldd	r19, Y+8	; 0x08
    1c96:	42 17       	cp	r20, r18
    1c98:	53 07       	cpc	r21, r19
    1c9a:	0c f4       	brge	.+2      	; 0x1c9e <snprintf+0x54>
    1c9c:	9a 01       	movw	r18, r20
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	e2 0f       	add	r30, r18
    1ca2:	f3 1f       	adc	r31, r19
    1ca4:	10 82       	st	Z, r1
    1ca6:	2e 96       	adiw	r28, 0x0e	; 14
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	1f 91       	pop	r17
    1cb2:	0f 91       	pop	r16
    1cb4:	08 95       	ret

00001cb6 <vfprintf>:
    1cb6:	2f 92       	push	r2
    1cb8:	3f 92       	push	r3
    1cba:	4f 92       	push	r4
    1cbc:	5f 92       	push	r5
    1cbe:	6f 92       	push	r6
    1cc0:	7f 92       	push	r7
    1cc2:	8f 92       	push	r8
    1cc4:	9f 92       	push	r9
    1cc6:	af 92       	push	r10
    1cc8:	bf 92       	push	r11
    1cca:	cf 92       	push	r12
    1ccc:	df 92       	push	r13
    1cce:	ef 92       	push	r14
    1cd0:	ff 92       	push	r15
    1cd2:	0f 93       	push	r16
    1cd4:	1f 93       	push	r17
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
    1cde:	2b 97       	sbiw	r28, 0x0b	; 11
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	6c 01       	movw	r12, r24
    1ce6:	7b 01       	movw	r14, r22
    1ce8:	8a 01       	movw	r16, r20
    1cea:	fc 01       	movw	r30, r24
    1cec:	16 82       	std	Z+6, r1	; 0x06
    1cee:	17 82       	std	Z+7, r1	; 0x07
    1cf0:	83 81       	ldd	r24, Z+3	; 0x03
    1cf2:	81 ff       	sbrs	r24, 1
    1cf4:	bf c1       	rjmp	.+894    	; 0x2074 <vfprintf+0x3be>
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	01 96       	adiw	r24, 0x01	; 1
    1cfa:	3c 01       	movw	r6, r24
    1cfc:	f6 01       	movw	r30, r12
    1cfe:	93 81       	ldd	r25, Z+3	; 0x03
    1d00:	f7 01       	movw	r30, r14
    1d02:	93 fd       	sbrc	r25, 3
    1d04:	85 91       	lpm	r24, Z+
    1d06:	93 ff       	sbrs	r25, 3
    1d08:	81 91       	ld	r24, Z+
    1d0a:	7f 01       	movw	r14, r30
    1d0c:	88 23       	and	r24, r24
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <vfprintf+0x5c>
    1d10:	ad c1       	rjmp	.+858    	; 0x206c <vfprintf+0x3b6>
    1d12:	85 32       	cpi	r24, 0x25	; 37
    1d14:	39 f4       	brne	.+14     	; 0x1d24 <vfprintf+0x6e>
    1d16:	93 fd       	sbrc	r25, 3
    1d18:	85 91       	lpm	r24, Z+
    1d1a:	93 ff       	sbrs	r25, 3
    1d1c:	81 91       	ld	r24, Z+
    1d1e:	7f 01       	movw	r14, r30
    1d20:	85 32       	cpi	r24, 0x25	; 37
    1d22:	21 f4       	brne	.+8      	; 0x1d2c <vfprintf+0x76>
    1d24:	b6 01       	movw	r22, r12
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	d3 d1       	rcall	.+934    	; 0x20d0 <fputc>
    1d2a:	e8 cf       	rjmp	.-48     	; 0x1cfc <vfprintf+0x46>
    1d2c:	91 2c       	mov	r9, r1
    1d2e:	21 2c       	mov	r2, r1
    1d30:	31 2c       	mov	r3, r1
    1d32:	ff e1       	ldi	r31, 0x1F	; 31
    1d34:	f3 15       	cp	r31, r3
    1d36:	d8 f0       	brcs	.+54     	; 0x1d6e <vfprintf+0xb8>
    1d38:	8b 32       	cpi	r24, 0x2B	; 43
    1d3a:	79 f0       	breq	.+30     	; 0x1d5a <vfprintf+0xa4>
    1d3c:	38 f4       	brcc	.+14     	; 0x1d4c <vfprintf+0x96>
    1d3e:	80 32       	cpi	r24, 0x20	; 32
    1d40:	79 f0       	breq	.+30     	; 0x1d60 <vfprintf+0xaa>
    1d42:	83 32       	cpi	r24, 0x23	; 35
    1d44:	a1 f4       	brne	.+40     	; 0x1d6e <vfprintf+0xb8>
    1d46:	23 2d       	mov	r18, r3
    1d48:	20 61       	ori	r18, 0x10	; 16
    1d4a:	1d c0       	rjmp	.+58     	; 0x1d86 <vfprintf+0xd0>
    1d4c:	8d 32       	cpi	r24, 0x2D	; 45
    1d4e:	61 f0       	breq	.+24     	; 0x1d68 <vfprintf+0xb2>
    1d50:	80 33       	cpi	r24, 0x30	; 48
    1d52:	69 f4       	brne	.+26     	; 0x1d6e <vfprintf+0xb8>
    1d54:	23 2d       	mov	r18, r3
    1d56:	21 60       	ori	r18, 0x01	; 1
    1d58:	16 c0       	rjmp	.+44     	; 0x1d86 <vfprintf+0xd0>
    1d5a:	83 2d       	mov	r24, r3
    1d5c:	82 60       	ori	r24, 0x02	; 2
    1d5e:	38 2e       	mov	r3, r24
    1d60:	e3 2d       	mov	r30, r3
    1d62:	e4 60       	ori	r30, 0x04	; 4
    1d64:	3e 2e       	mov	r3, r30
    1d66:	2a c0       	rjmp	.+84     	; 0x1dbc <vfprintf+0x106>
    1d68:	f3 2d       	mov	r31, r3
    1d6a:	f8 60       	ori	r31, 0x08	; 8
    1d6c:	1d c0       	rjmp	.+58     	; 0x1da8 <vfprintf+0xf2>
    1d6e:	37 fc       	sbrc	r3, 7
    1d70:	2d c0       	rjmp	.+90     	; 0x1dcc <vfprintf+0x116>
    1d72:	20 ed       	ldi	r18, 0xD0	; 208
    1d74:	28 0f       	add	r18, r24
    1d76:	2a 30       	cpi	r18, 0x0A	; 10
    1d78:	40 f0       	brcs	.+16     	; 0x1d8a <vfprintf+0xd4>
    1d7a:	8e 32       	cpi	r24, 0x2E	; 46
    1d7c:	b9 f4       	brne	.+46     	; 0x1dac <vfprintf+0xf6>
    1d7e:	36 fc       	sbrc	r3, 6
    1d80:	75 c1       	rjmp	.+746    	; 0x206c <vfprintf+0x3b6>
    1d82:	23 2d       	mov	r18, r3
    1d84:	20 64       	ori	r18, 0x40	; 64
    1d86:	32 2e       	mov	r3, r18
    1d88:	19 c0       	rjmp	.+50     	; 0x1dbc <vfprintf+0x106>
    1d8a:	36 fe       	sbrs	r3, 6
    1d8c:	06 c0       	rjmp	.+12     	; 0x1d9a <vfprintf+0xe4>
    1d8e:	8a e0       	ldi	r24, 0x0A	; 10
    1d90:	98 9e       	mul	r9, r24
    1d92:	20 0d       	add	r18, r0
    1d94:	11 24       	eor	r1, r1
    1d96:	92 2e       	mov	r9, r18
    1d98:	11 c0       	rjmp	.+34     	; 0x1dbc <vfprintf+0x106>
    1d9a:	ea e0       	ldi	r30, 0x0A	; 10
    1d9c:	2e 9e       	mul	r2, r30
    1d9e:	20 0d       	add	r18, r0
    1da0:	11 24       	eor	r1, r1
    1da2:	22 2e       	mov	r2, r18
    1da4:	f3 2d       	mov	r31, r3
    1da6:	f0 62       	ori	r31, 0x20	; 32
    1da8:	3f 2e       	mov	r3, r31
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <vfprintf+0x106>
    1dac:	8c 36       	cpi	r24, 0x6C	; 108
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <vfprintf+0x102>
    1db0:	83 2d       	mov	r24, r3
    1db2:	80 68       	ori	r24, 0x80	; 128
    1db4:	38 2e       	mov	r3, r24
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <vfprintf+0x106>
    1db8:	88 36       	cpi	r24, 0x68	; 104
    1dba:	41 f4       	brne	.+16     	; 0x1dcc <vfprintf+0x116>
    1dbc:	f7 01       	movw	r30, r14
    1dbe:	93 fd       	sbrc	r25, 3
    1dc0:	85 91       	lpm	r24, Z+
    1dc2:	93 ff       	sbrs	r25, 3
    1dc4:	81 91       	ld	r24, Z+
    1dc6:	7f 01       	movw	r14, r30
    1dc8:	81 11       	cpse	r24, r1
    1dca:	b3 cf       	rjmp	.-154    	; 0x1d32 <vfprintf+0x7c>
    1dcc:	98 2f       	mov	r25, r24
    1dce:	9f 7d       	andi	r25, 0xDF	; 223
    1dd0:	95 54       	subi	r25, 0x45	; 69
    1dd2:	93 30       	cpi	r25, 0x03	; 3
    1dd4:	28 f4       	brcc	.+10     	; 0x1de0 <vfprintf+0x12a>
    1dd6:	0c 5f       	subi	r16, 0xFC	; 252
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	9f e3       	ldi	r25, 0x3F	; 63
    1ddc:	99 83       	std	Y+1, r25	; 0x01
    1dde:	0d c0       	rjmp	.+26     	; 0x1dfa <vfprintf+0x144>
    1de0:	83 36       	cpi	r24, 0x63	; 99
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <vfprintf+0x13a>
    1de4:	83 37       	cpi	r24, 0x73	; 115
    1de6:	71 f0       	breq	.+28     	; 0x1e04 <vfprintf+0x14e>
    1de8:	83 35       	cpi	r24, 0x53	; 83
    1dea:	09 f0       	breq	.+2      	; 0x1dee <vfprintf+0x138>
    1dec:	55 c0       	rjmp	.+170    	; 0x1e98 <vfprintf+0x1e2>
    1dee:	20 c0       	rjmp	.+64     	; 0x1e30 <vfprintf+0x17a>
    1df0:	f8 01       	movw	r30, r16
    1df2:	80 81       	ld	r24, Z
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	0e 5f       	subi	r16, 0xFE	; 254
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	88 24       	eor	r8, r8
    1dfc:	83 94       	inc	r8
    1dfe:	91 2c       	mov	r9, r1
    1e00:	53 01       	movw	r10, r6
    1e02:	12 c0       	rjmp	.+36     	; 0x1e28 <vfprintf+0x172>
    1e04:	28 01       	movw	r4, r16
    1e06:	f2 e0       	ldi	r31, 0x02	; 2
    1e08:	4f 0e       	add	r4, r31
    1e0a:	51 1c       	adc	r5, r1
    1e0c:	f8 01       	movw	r30, r16
    1e0e:	a0 80       	ld	r10, Z
    1e10:	b1 80       	ldd	r11, Z+1	; 0x01
    1e12:	36 fe       	sbrs	r3, 6
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <vfprintf+0x166>
    1e16:	69 2d       	mov	r22, r9
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <vfprintf+0x16a>
    1e1c:	6f ef       	ldi	r22, 0xFF	; 255
    1e1e:	7f ef       	ldi	r23, 0xFF	; 255
    1e20:	c5 01       	movw	r24, r10
    1e22:	4b d1       	rcall	.+662    	; 0x20ba <strnlen>
    1e24:	4c 01       	movw	r8, r24
    1e26:	82 01       	movw	r16, r4
    1e28:	f3 2d       	mov	r31, r3
    1e2a:	ff 77       	andi	r31, 0x7F	; 127
    1e2c:	3f 2e       	mov	r3, r31
    1e2e:	15 c0       	rjmp	.+42     	; 0x1e5a <vfprintf+0x1a4>
    1e30:	28 01       	movw	r4, r16
    1e32:	22 e0       	ldi	r18, 0x02	; 2
    1e34:	42 0e       	add	r4, r18
    1e36:	51 1c       	adc	r5, r1
    1e38:	f8 01       	movw	r30, r16
    1e3a:	a0 80       	ld	r10, Z
    1e3c:	b1 80       	ldd	r11, Z+1	; 0x01
    1e3e:	36 fe       	sbrs	r3, 6
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <vfprintf+0x192>
    1e42:	69 2d       	mov	r22, r9
    1e44:	70 e0       	ldi	r23, 0x00	; 0
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <vfprintf+0x196>
    1e48:	6f ef       	ldi	r22, 0xFF	; 255
    1e4a:	7f ef       	ldi	r23, 0xFF	; 255
    1e4c:	c5 01       	movw	r24, r10
    1e4e:	2a d1       	rcall	.+596    	; 0x20a4 <strnlen_P>
    1e50:	4c 01       	movw	r8, r24
    1e52:	f3 2d       	mov	r31, r3
    1e54:	f0 68       	ori	r31, 0x80	; 128
    1e56:	3f 2e       	mov	r3, r31
    1e58:	82 01       	movw	r16, r4
    1e5a:	33 fc       	sbrc	r3, 3
    1e5c:	19 c0       	rjmp	.+50     	; 0x1e90 <vfprintf+0x1da>
    1e5e:	82 2d       	mov	r24, r2
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	88 16       	cp	r8, r24
    1e64:	99 06       	cpc	r9, r25
    1e66:	a0 f4       	brcc	.+40     	; 0x1e90 <vfprintf+0x1da>
    1e68:	b6 01       	movw	r22, r12
    1e6a:	80 e2       	ldi	r24, 0x20	; 32
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	30 d1       	rcall	.+608    	; 0x20d0 <fputc>
    1e70:	2a 94       	dec	r2
    1e72:	f5 cf       	rjmp	.-22     	; 0x1e5e <vfprintf+0x1a8>
    1e74:	f5 01       	movw	r30, r10
    1e76:	37 fc       	sbrc	r3, 7
    1e78:	85 91       	lpm	r24, Z+
    1e7a:	37 fe       	sbrs	r3, 7
    1e7c:	81 91       	ld	r24, Z+
    1e7e:	5f 01       	movw	r10, r30
    1e80:	b6 01       	movw	r22, r12
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	25 d1       	rcall	.+586    	; 0x20d0 <fputc>
    1e86:	21 10       	cpse	r2, r1
    1e88:	2a 94       	dec	r2
    1e8a:	21 e0       	ldi	r18, 0x01	; 1
    1e8c:	82 1a       	sub	r8, r18
    1e8e:	91 08       	sbc	r9, r1
    1e90:	81 14       	cp	r8, r1
    1e92:	91 04       	cpc	r9, r1
    1e94:	79 f7       	brne	.-34     	; 0x1e74 <vfprintf+0x1be>
    1e96:	e1 c0       	rjmp	.+450    	; 0x205a <vfprintf+0x3a4>
    1e98:	84 36       	cpi	r24, 0x64	; 100
    1e9a:	11 f0       	breq	.+4      	; 0x1ea0 <vfprintf+0x1ea>
    1e9c:	89 36       	cpi	r24, 0x69	; 105
    1e9e:	39 f5       	brne	.+78     	; 0x1eee <vfprintf+0x238>
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	37 fe       	sbrs	r3, 7
    1ea4:	07 c0       	rjmp	.+14     	; 0x1eb4 <vfprintf+0x1fe>
    1ea6:	60 81       	ld	r22, Z
    1ea8:	71 81       	ldd	r23, Z+1	; 0x01
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	0c 5f       	subi	r16, 0xFC	; 252
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <vfprintf+0x20e>
    1eb4:	60 81       	ld	r22, Z
    1eb6:	71 81       	ldd	r23, Z+1	; 0x01
    1eb8:	07 2e       	mov	r0, r23
    1eba:	00 0c       	add	r0, r0
    1ebc:	88 0b       	sbc	r24, r24
    1ebe:	99 0b       	sbc	r25, r25
    1ec0:	0e 5f       	subi	r16, 0xFE	; 254
    1ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec4:	f3 2d       	mov	r31, r3
    1ec6:	ff 76       	andi	r31, 0x6F	; 111
    1ec8:	3f 2e       	mov	r3, r31
    1eca:	97 ff       	sbrs	r25, 7
    1ecc:	09 c0       	rjmp	.+18     	; 0x1ee0 <vfprintf+0x22a>
    1ece:	90 95       	com	r25
    1ed0:	80 95       	com	r24
    1ed2:	70 95       	com	r23
    1ed4:	61 95       	neg	r22
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	f0 68       	ori	r31, 0x80	; 128
    1ede:	3f 2e       	mov	r3, r31
    1ee0:	2a e0       	ldi	r18, 0x0A	; 10
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	a3 01       	movw	r20, r6
    1ee6:	30 d1       	rcall	.+608    	; 0x2148 <__ultoa_invert>
    1ee8:	88 2e       	mov	r8, r24
    1eea:	86 18       	sub	r8, r6
    1eec:	44 c0       	rjmp	.+136    	; 0x1f76 <vfprintf+0x2c0>
    1eee:	85 37       	cpi	r24, 0x75	; 117
    1ef0:	31 f4       	brne	.+12     	; 0x1efe <vfprintf+0x248>
    1ef2:	23 2d       	mov	r18, r3
    1ef4:	2f 7e       	andi	r18, 0xEF	; 239
    1ef6:	b2 2e       	mov	r11, r18
    1ef8:	2a e0       	ldi	r18, 0x0A	; 10
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	25 c0       	rjmp	.+74     	; 0x1f48 <vfprintf+0x292>
    1efe:	93 2d       	mov	r25, r3
    1f00:	99 7f       	andi	r25, 0xF9	; 249
    1f02:	b9 2e       	mov	r11, r25
    1f04:	8f 36       	cpi	r24, 0x6F	; 111
    1f06:	c1 f0       	breq	.+48     	; 0x1f38 <vfprintf+0x282>
    1f08:	18 f4       	brcc	.+6      	; 0x1f10 <vfprintf+0x25a>
    1f0a:	88 35       	cpi	r24, 0x58	; 88
    1f0c:	79 f0       	breq	.+30     	; 0x1f2c <vfprintf+0x276>
    1f0e:	ae c0       	rjmp	.+348    	; 0x206c <vfprintf+0x3b6>
    1f10:	80 37       	cpi	r24, 0x70	; 112
    1f12:	19 f0       	breq	.+6      	; 0x1f1a <vfprintf+0x264>
    1f14:	88 37       	cpi	r24, 0x78	; 120
    1f16:	21 f0       	breq	.+8      	; 0x1f20 <vfprintf+0x26a>
    1f18:	a9 c0       	rjmp	.+338    	; 0x206c <vfprintf+0x3b6>
    1f1a:	e9 2f       	mov	r30, r25
    1f1c:	e0 61       	ori	r30, 0x10	; 16
    1f1e:	be 2e       	mov	r11, r30
    1f20:	b4 fe       	sbrs	r11, 4
    1f22:	0d c0       	rjmp	.+26     	; 0x1f3e <vfprintf+0x288>
    1f24:	fb 2d       	mov	r31, r11
    1f26:	f4 60       	ori	r31, 0x04	; 4
    1f28:	bf 2e       	mov	r11, r31
    1f2a:	09 c0       	rjmp	.+18     	; 0x1f3e <vfprintf+0x288>
    1f2c:	34 fe       	sbrs	r3, 4
    1f2e:	0a c0       	rjmp	.+20     	; 0x1f44 <vfprintf+0x28e>
    1f30:	29 2f       	mov	r18, r25
    1f32:	26 60       	ori	r18, 0x06	; 6
    1f34:	b2 2e       	mov	r11, r18
    1f36:	06 c0       	rjmp	.+12     	; 0x1f44 <vfprintf+0x28e>
    1f38:	28 e0       	ldi	r18, 0x08	; 8
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	05 c0       	rjmp	.+10     	; 0x1f48 <vfprintf+0x292>
    1f3e:	20 e1       	ldi	r18, 0x10	; 16
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <vfprintf+0x292>
    1f44:	20 e1       	ldi	r18, 0x10	; 16
    1f46:	32 e0       	ldi	r19, 0x02	; 2
    1f48:	f8 01       	movw	r30, r16
    1f4a:	b7 fe       	sbrs	r11, 7
    1f4c:	07 c0       	rjmp	.+14     	; 0x1f5c <vfprintf+0x2a6>
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	0c 5f       	subi	r16, 0xFC	; 252
    1f58:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <vfprintf+0x2b2>
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 5f       	subi	r16, 0xFE	; 254
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	a3 01       	movw	r20, r6
    1f6a:	ee d0       	rcall	.+476    	; 0x2148 <__ultoa_invert>
    1f6c:	88 2e       	mov	r8, r24
    1f6e:	86 18       	sub	r8, r6
    1f70:	fb 2d       	mov	r31, r11
    1f72:	ff 77       	andi	r31, 0x7F	; 127
    1f74:	3f 2e       	mov	r3, r31
    1f76:	36 fe       	sbrs	r3, 6
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <vfprintf+0x2de>
    1f7a:	23 2d       	mov	r18, r3
    1f7c:	2e 7f       	andi	r18, 0xFE	; 254
    1f7e:	a2 2e       	mov	r10, r18
    1f80:	89 14       	cp	r8, r9
    1f82:	58 f4       	brcc	.+22     	; 0x1f9a <vfprintf+0x2e4>
    1f84:	34 fe       	sbrs	r3, 4
    1f86:	0b c0       	rjmp	.+22     	; 0x1f9e <vfprintf+0x2e8>
    1f88:	32 fc       	sbrc	r3, 2
    1f8a:	09 c0       	rjmp	.+18     	; 0x1f9e <vfprintf+0x2e8>
    1f8c:	83 2d       	mov	r24, r3
    1f8e:	8e 7e       	andi	r24, 0xEE	; 238
    1f90:	a8 2e       	mov	r10, r24
    1f92:	05 c0       	rjmp	.+10     	; 0x1f9e <vfprintf+0x2e8>
    1f94:	b8 2c       	mov	r11, r8
    1f96:	a3 2c       	mov	r10, r3
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <vfprintf+0x2ea>
    1f9a:	b8 2c       	mov	r11, r8
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <vfprintf+0x2ea>
    1f9e:	b9 2c       	mov	r11, r9
    1fa0:	a4 fe       	sbrs	r10, 4
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <vfprintf+0x30c>
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	e8 0d       	add	r30, r8
    1fa8:	f1 1d       	adc	r31, r1
    1faa:	80 81       	ld	r24, Z
    1fac:	80 33       	cpi	r24, 0x30	; 48
    1fae:	21 f4       	brne	.+8      	; 0x1fb8 <vfprintf+0x302>
    1fb0:	9a 2d       	mov	r25, r10
    1fb2:	99 7e       	andi	r25, 0xE9	; 233
    1fb4:	a9 2e       	mov	r10, r25
    1fb6:	09 c0       	rjmp	.+18     	; 0x1fca <vfprintf+0x314>
    1fb8:	a2 fe       	sbrs	r10, 2
    1fba:	06 c0       	rjmp	.+12     	; 0x1fc8 <vfprintf+0x312>
    1fbc:	b3 94       	inc	r11
    1fbe:	b3 94       	inc	r11
    1fc0:	04 c0       	rjmp	.+8      	; 0x1fca <vfprintf+0x314>
    1fc2:	8a 2d       	mov	r24, r10
    1fc4:	86 78       	andi	r24, 0x86	; 134
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <vfprintf+0x314>
    1fc8:	b3 94       	inc	r11
    1fca:	a3 fc       	sbrc	r10, 3
    1fcc:	10 c0       	rjmp	.+32     	; 0x1fee <vfprintf+0x338>
    1fce:	a0 fe       	sbrs	r10, 0
    1fd0:	06 c0       	rjmp	.+12     	; 0x1fde <vfprintf+0x328>
    1fd2:	b2 14       	cp	r11, r2
    1fd4:	80 f4       	brcc	.+32     	; 0x1ff6 <vfprintf+0x340>
    1fd6:	28 0c       	add	r2, r8
    1fd8:	92 2c       	mov	r9, r2
    1fda:	9b 18       	sub	r9, r11
    1fdc:	0d c0       	rjmp	.+26     	; 0x1ff8 <vfprintf+0x342>
    1fde:	b2 14       	cp	r11, r2
    1fe0:	58 f4       	brcc	.+22     	; 0x1ff8 <vfprintf+0x342>
    1fe2:	b6 01       	movw	r22, r12
    1fe4:	80 e2       	ldi	r24, 0x20	; 32
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	73 d0       	rcall	.+230    	; 0x20d0 <fputc>
    1fea:	b3 94       	inc	r11
    1fec:	f8 cf       	rjmp	.-16     	; 0x1fde <vfprintf+0x328>
    1fee:	b2 14       	cp	r11, r2
    1ff0:	18 f4       	brcc	.+6      	; 0x1ff8 <vfprintf+0x342>
    1ff2:	2b 18       	sub	r2, r11
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <vfprintf+0x344>
    1ff6:	98 2c       	mov	r9, r8
    1ff8:	21 2c       	mov	r2, r1
    1ffa:	a4 fe       	sbrs	r10, 4
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <vfprintf+0x366>
    1ffe:	b6 01       	movw	r22, r12
    2000:	80 e3       	ldi	r24, 0x30	; 48
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	65 d0       	rcall	.+202    	; 0x20d0 <fputc>
    2006:	a2 fe       	sbrs	r10, 2
    2008:	16 c0       	rjmp	.+44     	; 0x2036 <vfprintf+0x380>
    200a:	a1 fc       	sbrc	r10, 1
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <vfprintf+0x35e>
    200e:	88 e7       	ldi	r24, 0x78	; 120
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <vfprintf+0x362>
    2014:	88 e5       	ldi	r24, 0x58	; 88
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	b6 01       	movw	r22, r12
    201a:	0c c0       	rjmp	.+24     	; 0x2034 <vfprintf+0x37e>
    201c:	8a 2d       	mov	r24, r10
    201e:	86 78       	andi	r24, 0x86	; 134
    2020:	51 f0       	breq	.+20     	; 0x2036 <vfprintf+0x380>
    2022:	a1 fe       	sbrs	r10, 1
    2024:	02 c0       	rjmp	.+4      	; 0x202a <vfprintf+0x374>
    2026:	8b e2       	ldi	r24, 0x2B	; 43
    2028:	01 c0       	rjmp	.+2      	; 0x202c <vfprintf+0x376>
    202a:	80 e2       	ldi	r24, 0x20	; 32
    202c:	a7 fc       	sbrc	r10, 7
    202e:	8d e2       	ldi	r24, 0x2D	; 45
    2030:	b6 01       	movw	r22, r12
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	4d d0       	rcall	.+154    	; 0x20d0 <fputc>
    2036:	89 14       	cp	r8, r9
    2038:	30 f4       	brcc	.+12     	; 0x2046 <vfprintf+0x390>
    203a:	b6 01       	movw	r22, r12
    203c:	80 e3       	ldi	r24, 0x30	; 48
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	47 d0       	rcall	.+142    	; 0x20d0 <fputc>
    2042:	9a 94       	dec	r9
    2044:	f8 cf       	rjmp	.-16     	; 0x2036 <vfprintf+0x380>
    2046:	8a 94       	dec	r8
    2048:	f3 01       	movw	r30, r6
    204a:	e8 0d       	add	r30, r8
    204c:	f1 1d       	adc	r31, r1
    204e:	80 81       	ld	r24, Z
    2050:	b6 01       	movw	r22, r12
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	3d d0       	rcall	.+122    	; 0x20d0 <fputc>
    2056:	81 10       	cpse	r8, r1
    2058:	f6 cf       	rjmp	.-20     	; 0x2046 <vfprintf+0x390>
    205a:	22 20       	and	r2, r2
    205c:	09 f4       	brne	.+2      	; 0x2060 <vfprintf+0x3aa>
    205e:	4e ce       	rjmp	.-868    	; 0x1cfc <vfprintf+0x46>
    2060:	b6 01       	movw	r22, r12
    2062:	80 e2       	ldi	r24, 0x20	; 32
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	34 d0       	rcall	.+104    	; 0x20d0 <fputc>
    2068:	2a 94       	dec	r2
    206a:	f7 cf       	rjmp	.-18     	; 0x205a <vfprintf+0x3a4>
    206c:	f6 01       	movw	r30, r12
    206e:	86 81       	ldd	r24, Z+6	; 0x06
    2070:	97 81       	ldd	r25, Z+7	; 0x07
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <vfprintf+0x3c2>
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	9f ef       	ldi	r25, 0xFF	; 255
    2078:	2b 96       	adiw	r28, 0x0b	; 11
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	de bf       	out	0x3e, r29	; 62
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	ff 90       	pop	r15
    2088:	ef 90       	pop	r14
    208a:	df 90       	pop	r13
    208c:	cf 90       	pop	r12
    208e:	bf 90       	pop	r11
    2090:	af 90       	pop	r10
    2092:	9f 90       	pop	r9
    2094:	8f 90       	pop	r8
    2096:	7f 90       	pop	r7
    2098:	6f 90       	pop	r6
    209a:	5f 90       	pop	r5
    209c:	4f 90       	pop	r4
    209e:	3f 90       	pop	r3
    20a0:	2f 90       	pop	r2
    20a2:	08 95       	ret

000020a4 <strnlen_P>:
    20a4:	fc 01       	movw	r30, r24
    20a6:	05 90       	lpm	r0, Z+
    20a8:	61 50       	subi	r22, 0x01	; 1
    20aa:	70 40       	sbci	r23, 0x00	; 0
    20ac:	01 10       	cpse	r0, r1
    20ae:	d8 f7       	brcc	.-10     	; 0x20a6 <strnlen_P+0x2>
    20b0:	80 95       	com	r24
    20b2:	90 95       	com	r25
    20b4:	8e 0f       	add	r24, r30
    20b6:	9f 1f       	adc	r25, r31
    20b8:	08 95       	ret

000020ba <strnlen>:
    20ba:	fc 01       	movw	r30, r24
    20bc:	61 50       	subi	r22, 0x01	; 1
    20be:	70 40       	sbci	r23, 0x00	; 0
    20c0:	01 90       	ld	r0, Z+
    20c2:	01 10       	cpse	r0, r1
    20c4:	d8 f7       	brcc	.-10     	; 0x20bc <strnlen+0x2>
    20c6:	80 95       	com	r24
    20c8:	90 95       	com	r25
    20ca:	8e 0f       	add	r24, r30
    20cc:	9f 1f       	adc	r25, r31
    20ce:	08 95       	ret

000020d0 <fputc>:
    20d0:	0f 93       	push	r16
    20d2:	1f 93       	push	r17
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	fb 01       	movw	r30, r22
    20da:	23 81       	ldd	r18, Z+3	; 0x03
    20dc:	21 fd       	sbrc	r18, 1
    20de:	03 c0       	rjmp	.+6      	; 0x20e6 <fputc+0x16>
    20e0:	8f ef       	ldi	r24, 0xFF	; 255
    20e2:	9f ef       	ldi	r25, 0xFF	; 255
    20e4:	2c c0       	rjmp	.+88     	; 0x213e <fputc+0x6e>
    20e6:	22 ff       	sbrs	r18, 2
    20e8:	16 c0       	rjmp	.+44     	; 0x2116 <fputc+0x46>
    20ea:	46 81       	ldd	r20, Z+6	; 0x06
    20ec:	57 81       	ldd	r21, Z+7	; 0x07
    20ee:	24 81       	ldd	r18, Z+4	; 0x04
    20f0:	35 81       	ldd	r19, Z+5	; 0x05
    20f2:	42 17       	cp	r20, r18
    20f4:	53 07       	cpc	r21, r19
    20f6:	44 f4       	brge	.+16     	; 0x2108 <fputc+0x38>
    20f8:	a0 81       	ld	r26, Z
    20fa:	b1 81       	ldd	r27, Z+1	; 0x01
    20fc:	9d 01       	movw	r18, r26
    20fe:	2f 5f       	subi	r18, 0xFF	; 255
    2100:	3f 4f       	sbci	r19, 0xFF	; 255
    2102:	20 83       	st	Z, r18
    2104:	31 83       	std	Z+1, r19	; 0x01
    2106:	8c 93       	st	X, r24
    2108:	26 81       	ldd	r18, Z+6	; 0x06
    210a:	37 81       	ldd	r19, Z+7	; 0x07
    210c:	2f 5f       	subi	r18, 0xFF	; 255
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	26 83       	std	Z+6, r18	; 0x06
    2112:	37 83       	std	Z+7, r19	; 0x07
    2114:	14 c0       	rjmp	.+40     	; 0x213e <fputc+0x6e>
    2116:	8b 01       	movw	r16, r22
    2118:	ec 01       	movw	r28, r24
    211a:	fb 01       	movw	r30, r22
    211c:	00 84       	ldd	r0, Z+8	; 0x08
    211e:	f1 85       	ldd	r31, Z+9	; 0x09
    2120:	e0 2d       	mov	r30, r0
    2122:	19 95       	eicall
    2124:	89 2b       	or	r24, r25
    2126:	e1 f6       	brne	.-72     	; 0x20e0 <fputc+0x10>
    2128:	d8 01       	movw	r26, r16
    212a:	16 96       	adiw	r26, 0x06	; 6
    212c:	8d 91       	ld	r24, X+
    212e:	9c 91       	ld	r25, X
    2130:	17 97       	sbiw	r26, 0x07	; 7
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	16 96       	adiw	r26, 0x06	; 6
    2136:	8d 93       	st	X+, r24
    2138:	9c 93       	st	X, r25
    213a:	17 97       	sbiw	r26, 0x07	; 7
    213c:	ce 01       	movw	r24, r28
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	1f 91       	pop	r17
    2144:	0f 91       	pop	r16
    2146:	08 95       	ret

00002148 <__ultoa_invert>:
    2148:	fa 01       	movw	r30, r20
    214a:	aa 27       	eor	r26, r26
    214c:	28 30       	cpi	r18, 0x08	; 8
    214e:	51 f1       	breq	.+84     	; 0x21a4 <__ultoa_invert+0x5c>
    2150:	20 31       	cpi	r18, 0x10	; 16
    2152:	81 f1       	breq	.+96     	; 0x21b4 <__ultoa_invert+0x6c>
    2154:	e8 94       	clt
    2156:	6f 93       	push	r22
    2158:	6e 7f       	andi	r22, 0xFE	; 254
    215a:	6e 5f       	subi	r22, 0xFE	; 254
    215c:	7f 4f       	sbci	r23, 0xFF	; 255
    215e:	8f 4f       	sbci	r24, 0xFF	; 255
    2160:	9f 4f       	sbci	r25, 0xFF	; 255
    2162:	af 4f       	sbci	r26, 0xFF	; 255
    2164:	b1 e0       	ldi	r27, 0x01	; 1
    2166:	3e d0       	rcall	.+124    	; 0x21e4 <__ultoa_invert+0x9c>
    2168:	b4 e0       	ldi	r27, 0x04	; 4
    216a:	3c d0       	rcall	.+120    	; 0x21e4 <__ultoa_invert+0x9c>
    216c:	67 0f       	add	r22, r23
    216e:	78 1f       	adc	r23, r24
    2170:	89 1f       	adc	r24, r25
    2172:	9a 1f       	adc	r25, r26
    2174:	a1 1d       	adc	r26, r1
    2176:	68 0f       	add	r22, r24
    2178:	79 1f       	adc	r23, r25
    217a:	8a 1f       	adc	r24, r26
    217c:	91 1d       	adc	r25, r1
    217e:	a1 1d       	adc	r26, r1
    2180:	6a 0f       	add	r22, r26
    2182:	71 1d       	adc	r23, r1
    2184:	81 1d       	adc	r24, r1
    2186:	91 1d       	adc	r25, r1
    2188:	a1 1d       	adc	r26, r1
    218a:	20 d0       	rcall	.+64     	; 0x21cc <__ultoa_invert+0x84>
    218c:	09 f4       	brne	.+2      	; 0x2190 <__ultoa_invert+0x48>
    218e:	68 94       	set
    2190:	3f 91       	pop	r19
    2192:	2a e0       	ldi	r18, 0x0A	; 10
    2194:	26 9f       	mul	r18, r22
    2196:	11 24       	eor	r1, r1
    2198:	30 19       	sub	r19, r0
    219a:	30 5d       	subi	r19, 0xD0	; 208
    219c:	31 93       	st	Z+, r19
    219e:	de f6       	brtc	.-74     	; 0x2156 <__ultoa_invert+0xe>
    21a0:	cf 01       	movw	r24, r30
    21a2:	08 95       	ret
    21a4:	46 2f       	mov	r20, r22
    21a6:	47 70       	andi	r20, 0x07	; 7
    21a8:	40 5d       	subi	r20, 0xD0	; 208
    21aa:	41 93       	st	Z+, r20
    21ac:	b3 e0       	ldi	r27, 0x03	; 3
    21ae:	0f d0       	rcall	.+30     	; 0x21ce <__ultoa_invert+0x86>
    21b0:	c9 f7       	brne	.-14     	; 0x21a4 <__ultoa_invert+0x5c>
    21b2:	f6 cf       	rjmp	.-20     	; 0x21a0 <__ultoa_invert+0x58>
    21b4:	46 2f       	mov	r20, r22
    21b6:	4f 70       	andi	r20, 0x0F	; 15
    21b8:	40 5d       	subi	r20, 0xD0	; 208
    21ba:	4a 33       	cpi	r20, 0x3A	; 58
    21bc:	18 f0       	brcs	.+6      	; 0x21c4 <__ultoa_invert+0x7c>
    21be:	49 5d       	subi	r20, 0xD9	; 217
    21c0:	31 fd       	sbrc	r19, 1
    21c2:	40 52       	subi	r20, 0x20	; 32
    21c4:	41 93       	st	Z+, r20
    21c6:	02 d0       	rcall	.+4      	; 0x21cc <__ultoa_invert+0x84>
    21c8:	a9 f7       	brne	.-22     	; 0x21b4 <__ultoa_invert+0x6c>
    21ca:	ea cf       	rjmp	.-44     	; 0x21a0 <__ultoa_invert+0x58>
    21cc:	b4 e0       	ldi	r27, 0x04	; 4
    21ce:	a6 95       	lsr	r26
    21d0:	97 95       	ror	r25
    21d2:	87 95       	ror	r24
    21d4:	77 95       	ror	r23
    21d6:	67 95       	ror	r22
    21d8:	ba 95       	dec	r27
    21da:	c9 f7       	brne	.-14     	; 0x21ce <__ultoa_invert+0x86>
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	61 05       	cpc	r22, r1
    21e0:	71 05       	cpc	r23, r1
    21e2:	08 95       	ret
    21e4:	9b 01       	movw	r18, r22
    21e6:	ac 01       	movw	r20, r24
    21e8:	0a 2e       	mov	r0, r26
    21ea:	06 94       	lsr	r0
    21ec:	57 95       	ror	r21
    21ee:	47 95       	ror	r20
    21f0:	37 95       	ror	r19
    21f2:	27 95       	ror	r18
    21f4:	ba 95       	dec	r27
    21f6:	c9 f7       	brne	.-14     	; 0x21ea <__ultoa_invert+0xa2>
    21f8:	62 0f       	add	r22, r18
    21fa:	73 1f       	adc	r23, r19
    21fc:	84 1f       	adc	r24, r20
    21fe:	95 1f       	adc	r25, r21
    2200:	a0 1d       	adc	r26, r0
    2202:	08 95       	ret

00002204 <_exit>:
    2204:	f8 94       	cli

00002206 <__stop_program>:
    2206:	ff cf       	rjmp	.-2      	; 0x2206 <__stop_program>
