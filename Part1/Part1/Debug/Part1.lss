
Part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000262c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00802000  0000262c  000026c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000210  00802036  00802036  000026f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00002798  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ffec  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005272  00000000  00000000  00012b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000089c9  00000000  00000000  00017dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e10  00000000  00000000  000207b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0003309b  00000000  00000000  000215c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a30  00000000  00000000  00054663  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  0005b098  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c52a  00000000  00000000  0005b588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	64 c2       	rjmp	.+1224   	; 0x4ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c2       	rjmp	.+1220   	; 0x4ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c2       	rjmp	.+1216   	; 0x4ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c2       	rjmp	.+1208   	; 0x4ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c2       	rjmp	.+1204   	; 0x4ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c2       	rjmp	.+1200   	; 0x4ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c2       	rjmp	.+1196   	; 0x4ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c2       	rjmp	.+1192   	; 0x4ce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c2       	rjmp	.+1188   	; 0x4ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c2       	rjmp	.+1184   	; 0x4ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c2       	rjmp	.+1176   	; 0x4ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c2       	rjmp	.+1172   	; 0x4ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c2       	rjmp	.+1168   	; 0x4ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c2       	rjmp	.+1164   	; 0x4ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c2       	rjmp	.+1160   	; 0x4ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c2       	rjmp	.+1156   	; 0x4ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c2       	rjmp	.+1152   	; 0x4ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c2       	rjmp	.+1148   	; 0x4ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c2       	rjmp	.+1144   	; 0x4ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c2       	rjmp	.+1140   	; 0x4ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c2       	rjmp	.+1136   	; 0x4ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c2       	rjmp	.+1128   	; 0x4ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c2       	rjmp	.+1124   	; 0x4ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c2       	rjmp	.+1120   	; 0x4ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c2       	rjmp	.+1116   	; 0x4ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c2       	rjmp	.+1112   	; 0x4ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c2       	rjmp	.+1104   	; 0x4ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c2       	rjmp	.+1100   	; 0x4ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c2       	rjmp	.+1096   	; 0x4ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c2       	rjmp	.+1092   	; 0x4ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c2       	rjmp	.+1088   	; 0x4ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c2       	rjmp	.+1084   	; 0x4ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c2       	rjmp	.+1080   	; 0x4ce <__bad_interrupt>
      96:	00 00       	nop
      98:	1a c2       	rjmp	.+1076   	; 0x4ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__vector_39>
      a0:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_40>
      a4:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__vector_41>
      a8:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__vector_42>
      ac:	10 c2       	rjmp	.+1056   	; 0x4ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0e c2       	rjmp	.+1052   	; 0x4ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c c2       	rjmp	.+1048   	; 0x4ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c2       	rjmp	.+1044   	; 0x4ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	08 c2       	rjmp	.+1040   	; 0x4ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	06 c2       	rjmp	.+1036   	; 0x4ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	04 c2       	rjmp	.+1032   	; 0x4ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	02 c2       	rjmp	.+1028   	; 0x4ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	00 c2       	rjmp	.+1024   	; 0x4ce <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fe c1       	rjmp	.+1020   	; 0x4ce <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fc c1       	rjmp	.+1016   	; 0x4ce <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fa c1       	rjmp	.+1012   	; 0x4ce <__bad_interrupt>
      da:	00 00       	nop
      dc:	f8 c1       	rjmp	.+1008   	; 0x4ce <__bad_interrupt>
      de:	00 00       	nop
      e0:	f6 c1       	rjmp	.+1004   	; 0x4ce <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 c1       	rjmp	.+1000   	; 0x4ce <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f2 c1       	rjmp	.+996    	; 0x4ce <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f0 c1       	rjmp	.+992    	; 0x4ce <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ee c1       	rjmp	.+988    	; 0x4ce <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ec c1       	rjmp	.+984    	; 0x4ce <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ea c1       	rjmp	.+980    	; 0x4ce <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e8 c1       	rjmp	.+976    	; 0x4ce <__bad_interrupt>
      fe:	00 00       	nop
     100:	e6 c1       	rjmp	.+972    	; 0x4ce <__bad_interrupt>
     102:	00 00       	nop
     104:	e4 c1       	rjmp	.+968    	; 0x4ce <__bad_interrupt>
     106:	00 00       	nop
     108:	e2 c1       	rjmp	.+964    	; 0x4ce <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e0 c1       	rjmp	.+960    	; 0x4ce <__bad_interrupt>
     10e:	00 00       	nop
     110:	de c1       	rjmp	.+956    	; 0x4ce <__bad_interrupt>
     112:	00 00       	nop
     114:	dc c1       	rjmp	.+952    	; 0x4ce <__bad_interrupt>
     116:	00 00       	nop
     118:	da c1       	rjmp	.+948    	; 0x4ce <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_71>
     120:	0c 94 d6 09 	jmp	0x13ac	; 0x13ac <__vector_72>
     124:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_73>
     128:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__vector_74>
     12c:	d0 c1       	rjmp	.+928    	; 0x4ce <__bad_interrupt>
     12e:	00 00       	nop
     130:	ce c1       	rjmp	.+924    	; 0x4ce <__bad_interrupt>
     132:	00 00       	nop
     134:	cc c1       	rjmp	.+920    	; 0x4ce <__bad_interrupt>
     136:	00 00       	nop
     138:	ca c1       	rjmp	.+916    	; 0x4ce <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c8 c1       	rjmp	.+912    	; 0x4ce <__bad_interrupt>
     13e:	00 00       	nop
     140:	c6 c1       	rjmp	.+908    	; 0x4ce <__bad_interrupt>
     142:	00 00       	nop
     144:	c4 c1       	rjmp	.+904    	; 0x4ce <__bad_interrupt>
     146:	00 00       	nop
     148:	c2 c1       	rjmp	.+900    	; 0x4ce <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c0 c1       	rjmp	.+896    	; 0x4ce <__bad_interrupt>
     14e:	00 00       	nop
     150:	be c1       	rjmp	.+892    	; 0x4ce <__bad_interrupt>
     152:	00 00       	nop
     154:	bc c1       	rjmp	.+888    	; 0x4ce <__bad_interrupt>
     156:	00 00       	nop
     158:	ba c1       	rjmp	.+884    	; 0x4ce <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b8 c1       	rjmp	.+880    	; 0x4ce <__bad_interrupt>
     15e:	00 00       	nop
     160:	b6 c1       	rjmp	.+876    	; 0x4ce <__bad_interrupt>
     162:	00 00       	nop
     164:	b4 c1       	rjmp	.+872    	; 0x4ce <__bad_interrupt>
     166:	00 00       	nop
     168:	b2 c1       	rjmp	.+868    	; 0x4ce <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b0 c1       	rjmp	.+864    	; 0x4ce <__bad_interrupt>
     16e:	00 00       	nop
     170:	ae c1       	rjmp	.+860    	; 0x4ce <__bad_interrupt>
     172:	00 00       	nop
     174:	ac c1       	rjmp	.+856    	; 0x4ce <__bad_interrupt>
     176:	00 00       	nop
     178:	aa c1       	rjmp	.+852    	; 0x4ce <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a8 c1       	rjmp	.+848    	; 0x4ce <__bad_interrupt>
     17e:	00 00       	nop
     180:	a6 c1       	rjmp	.+844    	; 0x4ce <__bad_interrupt>
     182:	00 00       	nop
     184:	a4 c1       	rjmp	.+840    	; 0x4ce <__bad_interrupt>
     186:	00 00       	nop
     188:	a2 c1       	rjmp	.+836    	; 0x4ce <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a0 c1       	rjmp	.+832    	; 0x4ce <__bad_interrupt>
     18e:	00 00       	nop
     190:	9e c1       	rjmp	.+828    	; 0x4ce <__bad_interrupt>
     192:	00 00       	nop
     194:	9c c1       	rjmp	.+824    	; 0x4ce <__bad_interrupt>
     196:	00 00       	nop
     198:	9a c1       	rjmp	.+820    	; 0x4ce <__bad_interrupt>
     19a:	00 00       	nop
     19c:	98 c1       	rjmp	.+816    	; 0x4ce <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	96 c1       	rjmp	.+812    	; 0x4ce <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	94 c1       	rjmp	.+808    	; 0x4ce <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	92 c1       	rjmp	.+804    	; 0x4ce <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	90 c1       	rjmp	.+800    	; 0x4ce <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8e c1       	rjmp	.+796    	; 0x4ce <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8c c1       	rjmp	.+792    	; 0x4ce <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8a c1       	rjmp	.+788    	; 0x4ce <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	88 c1       	rjmp	.+784    	; 0x4ce <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	86 c1       	rjmp	.+780    	; 0x4ce <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	84 c1       	rjmp	.+776    	; 0x4ce <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	82 c1       	rjmp	.+772    	; 0x4ce <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	80 c1       	rjmp	.+768    	; 0x4ce <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7e c1       	rjmp	.+764    	; 0x4ce <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7c c1       	rjmp	.+760    	; 0x4ce <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7a c1       	rjmp	.+756    	; 0x4ce <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	78 c1       	rjmp	.+752    	; 0x4ce <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	76 c1       	rjmp	.+748    	; 0x4ce <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	74 c1       	rjmp	.+744    	; 0x4ce <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	72 c1       	rjmp	.+740    	; 0x4ce <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	70 c1       	rjmp	.+736    	; 0x4ce <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6e c1       	rjmp	.+732    	; 0x4ce <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6c c1       	rjmp	.+728    	; 0x4ce <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6a c1       	rjmp	.+724    	; 0x4ce <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1e5a>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6642>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x661a>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5642>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1e1a>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ec e2       	ldi	r30, 0x2C	; 44
     4a6:	f6 e2       	ldi	r31, 0x26	; 38
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a6 33       	cpi	r26, 0x36	; 54
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	22 e2       	ldi	r18, 0x22	; 34
     4ba:	a6 e3       	ldi	r26, 0x36	; 54
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a6 34       	cpi	r26, 0x46	; 70
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	d3 d0       	rcall	.+422    	; 0x670 <main>
     4ca:	0c 94 14 13 	jmp	0x2628	; 0x2628 <_exit>

000004ce <__bad_interrupt>:
     4ce:	98 cd       	rjmp	.-1232   	; 0x0 <__vectors>

000004d0 <adc_handler>:
* \param adc Pointer to ADC module.
* \param ch_mask ADC channel mask.
* \param result Conversion result from ADC channel.
*/
static void adc_handler(ADC_t *adc, uint8_t ch_mask, adc_result_t result)
{
     4d0:	4f 92       	push	r4
     4d2:	5f 92       	push	r5
     4d4:	6f 92       	push	r6
     4d6:	7f 92       	push	r7
     4d8:	8f 92       	push	r8
     4da:	9f 92       	push	r9
     4dc:	af 92       	push	r10
     4de:	bf 92       	push	r11
     4e0:	cf 92       	push	r12
     4e2:	df 92       	push	r13
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	a1 97       	sbiw	r28, 0x21	; 33
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	7c 01       	movw	r14, r24
     4fc:	d6 2e       	mov	r13, r22
     4fe:	8a 01       	movw	r16, r20
	
	/* Compute current temperature in Celsius, based on linearization
	* of the temperature sensor adc data.
	*/

	voltage = ((0.0157*result) + 0.0108); //calculated by the linear fit on excel
     500:	ba 01       	movw	r22, r20
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__floatunsisf>
     50a:	2b 01       	movw	r4, r22
     50c:	3c 01       	movw	r6, r24
     50e:	29 e4       	ldi	r18, 0x49	; 73
     510:	3d e9       	ldi	r19, 0x9D	; 157
     512:	40 e8       	ldi	r20, 0x80	; 128
     514:	5c e3       	ldi	r21, 0x3C	; 60
     516:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     51a:	2c e7       	ldi	r18, 0x7C	; 124
     51c:	32 ef       	ldi	r19, 0xF2	; 242
     51e:	40 e3       	ldi	r20, 0x30	; 48
     520:	5c e3       	ldi	r21, 0x3C	; 60
     522:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__addsf3>
     526:	4b 01       	movw	r8, r22
     528:	5c 01       	movw	r10, r24
	last_voltage = (uint8_t)voltage > 2 ? 0 : voltage;
     52a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__fixunssfsi>
     52e:	63 30       	cpi	r22, 0x03	; 3
     530:	18 f0       	brcs	.+6      	; 0x538 <adc_handler+0x68>
     532:	81 2c       	mov	r8, r1
     534:	91 2c       	mov	r9, r1
     536:	54 01       	movw	r10, r8
	//So we're setting result = voltage again
	//result = voltage;
	
	if (result > 697) {
		temperature = (int8_t)((-0.0295 * result) + 40.5);
		} if (result > 420) {
     538:	05 3a       	cpi	r16, 0xA5	; 165
     53a:	11 40       	sbci	r17, 0x01	; 1
     53c:	b0 f0       	brcs	.+44     	; 0x56a <adc_handler+0x9a>
		temperature = (int8_t)((-0.0474 * result) + 53.3);
     53e:	21 e8       	ldi	r18, 0x81	; 129
     540:	36 e2       	ldi	r19, 0x26	; 38
     542:	42 e4       	ldi	r20, 0x42	; 66
     544:	5d eb       	ldi	r21, 0xBD	; 189
     546:	c3 01       	movw	r24, r6
     548:	b2 01       	movw	r22, r4
     54a:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     54e:	23 e3       	ldi	r18, 0x33	; 51
     550:	33 e3       	ldi	r19, 0x33	; 51
     552:	45 e5       	ldi	r20, 0x55	; 85
     554:	52 e4       	ldi	r21, 0x42	; 66
     556:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__addsf3>
     55a:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__fixsfsi>
     55e:	86 2f       	mov	r24, r22
     560:	66 0f       	add	r22, r22
     562:	99 0b       	sbc	r25, r25
     564:	aa 0b       	sbc	r26, r26
     566:	bb 0b       	sbc	r27, r27
     568:	15 c0       	rjmp	.+42     	; 0x594 <adc_handler+0xc4>
		} else {
		temperature = (int8_t)((-0.0777 * result) + 65.1);
     56a:	2d e2       	ldi	r18, 0x2D	; 45
     56c:	31 e2       	ldi	r19, 0x21	; 33
     56e:	4f e9       	ldi	r20, 0x9F	; 159
     570:	5d eb       	ldi	r21, 0xBD	; 189
     572:	c3 01       	movw	r24, r6
     574:	b2 01       	movw	r22, r4
     576:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     57a:	23 e3       	ldi	r18, 0x33	; 51
     57c:	33 e3       	ldi	r19, 0x33	; 51
     57e:	42 e8       	ldi	r20, 0x82	; 130
     580:	52 e4       	ldi	r21, 0x42	; 66
     582:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__addsf3>
     586:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <__fixsfsi>
     58a:	86 2f       	mov	r24, r22
     58c:	66 0f       	add	r22, r22
     58e:	99 0b       	sbc	r25, r25
     590:	aa 0b       	sbc	r26, r26
     592:	bb 0b       	sbc	r27, r27
	}

	last_temperature = temperature;
     594:	80 93 36 20 	sts	0x2036, r24	; 0x802036 <__data_end>
     598:	90 93 37 20 	sts	0x2037, r25	; 0x802037 <__data_end+0x1>

	// Write temperature to display
	snprintf(out_str, OUTPUT_STR_SIZE, "Temperature: %4d C", last_temperature);
     59c:	80 91 36 20 	lds	r24, 0x2036	; 0x802036 <__data_end>
     5a0:	90 91 37 20 	lds	r25, 0x2037	; 0x802037 <__data_end+0x1>
     5a4:	9f 93       	push	r25
     5a6:	8f 93       	push	r24
     5a8:	8d e0       	ldi	r24, 0x0D	; 13
     5aa:	90 e2       	ldi	r25, 0x20	; 32
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	1f 92       	push	r1
     5b2:	68 94       	set
     5b4:	cc 24       	eor	r12, r12
     5b6:	c5 f8       	bld	r12, 5
     5b8:	cf 92       	push	r12
     5ba:	8e 01       	movw	r16, r28
     5bc:	0f 5f       	subi	r16, 0xFF	; 255
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
     5c0:	1f 93       	push	r17
     5c2:	0f 93       	push	r16
     5c4:	0e 94 37 10 	call	0x206e	; 0x206e <snprintf>
	gfx_mono_draw_string(out_str, 0, 0, &sysfont);
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e2       	ldi	r19, 0x20	; 32
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	c8 01       	movw	r24, r16
     5d2:	1e d5       	rcall	.+2620   	; 0x1010 <gfx_mono_draw_string>
	// Write voltage to display
	snprintf(out_str, OUTPUT_STR_SIZE, "Voltage: %4d.%02d VDC", (uint8_t)last_voltage, (uint8_t)(last_voltage * 100)%100);
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	48 ec       	ldi	r20, 0xC8	; 200
     5da:	52 e4       	ldi	r21, 0x42	; 66
     5dc:	c5 01       	movw	r24, r10
     5de:	b4 01       	movw	r22, r8
     5e0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__mulsf3>
     5e4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__fixunssfsi>
     5e8:	89 e2       	ldi	r24, 0x29	; 41
     5ea:	68 9f       	mul	r22, r24
     5ec:	81 2d       	mov	r24, r1
     5ee:	11 24       	eor	r1, r1
     5f0:	82 95       	swap	r24
     5f2:	8f 70       	andi	r24, 0x0F	; 15
     5f4:	94 e6       	ldi	r25, 0x64	; 100
     5f6:	89 9f       	mul	r24, r25
     5f8:	60 19       	sub	r22, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	1f 92       	push	r1
     5fe:	6f 93       	push	r22
     600:	c5 01       	movw	r24, r10
     602:	b4 01       	movw	r22, r8
     604:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__fixunssfsi>
     608:	1f 92       	push	r1
     60a:	6f 93       	push	r22
     60c:	80 e2       	ldi	r24, 0x20	; 32
     60e:	90 e2       	ldi	r25, 0x20	; 32
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	1f 92       	push	r1
     616:	cf 92       	push	r12
     618:	1f 93       	push	r17
     61a:	0f 93       	push	r16
     61c:	0e 94 37 10 	call	0x206e	; 0x206e <snprintf>
	gfx_mono_draw_string(out_str, 0, 8, &sysfont);
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e2       	ldi	r19, 0x20	; 32
     624:	48 e0       	ldi	r20, 0x08	; 8
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	c8 01       	movw	r24, r16
     62a:	f2 d4       	rcall	.+2532   	; 0x1010 <gfx_mono_draw_string>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     62c:	8f b7       	in	r24, 0x3f	; 63
     62e:	89 a3       	std	Y+33, r24	; 0x21
	cpu_irq_disable();
     630:	f8 94       	cli
	return flags;
     632:	99 a1       	ldd	r25, Y+33	; 0x21
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     634:	f7 01       	movw	r30, r14
     636:	80 81       	ld	r24, Z
     638:	6d 2d       	mov	r22, r13
     63a:	66 0f       	add	r22, r22
     63c:	66 0f       	add	r22, r22
     63e:	68 2b       	or	r22, r24
     640:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     642:	9f bf       	out	0x3f, r25	; 63
	
	// Start next conversion.
	adc_start_conversion(adc, ch_mask);
}
     644:	cd bf       	out	0x3d, r28	; 61
     646:	de bf       	out	0x3e, r29	; 62
     648:	a1 96       	adiw	r28, 0x21	; 33
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	1f 91       	pop	r17
     654:	0f 91       	pop	r16
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	bf 90       	pop	r11
     660:	af 90       	pop	r10
     662:	9f 90       	pop	r9
     664:	8f 90       	pop	r8
     666:	7f 90       	pop	r7
     668:	6f 90       	pop	r6
     66a:	5f 90       	pop	r5
     66c:	4f 90       	pop	r4
     66e:	08 95       	ret

00000670 <main>:

int main(void)
{
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	cd b7       	in	r28, 0x3d	; 61
     676:	de b7       	in	r29, 0x3e	; 62
     678:	2c 97       	sbiw	r28, 0x0c	; 12
     67a:	cd bf       	out	0x3d, r28	; 61
	struct adc_config         adc_conf;
	struct adc_channel_config adcch_conf;
	
	board_init();
	sysclk_init();
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	8d d5       	rcall	.+2842   	; 0x119a <board_init>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
     680:	48 d2       	rcall	.+1168   	; 0xb12 <sysclk_init>
     682:	ec e3       	ldi	r30, 0x3C	; 60
     684:	f2 e2       	ldi	r31, 0x22	; 34
     686:	10 82       	st	Z, r1
     688:	11 82       	std	Z+1, r1	; 0x01
     68a:	12 82       	std	Z+2, r1	; 0x02
     68c:	13 82       	std	Z+3, r1	; 0x03
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
     68e:	14 82       	std	Z+4, r1	; 0x04
     690:	11 e0       	ldi	r17, 0x01	; 1
	sleepmgr_init();
	irq_initialize_vectors();
     692:	15 83       	std	Z+5, r17	; 0x05
     694:	87 e0       	ldi	r24, 0x07	; 7
	cpu_irq_enable();
     696:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	gfx_mono_init();
     69a:	78 94       	sei
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     69c:	45 d3       	rcall	.+1674   	; 0xd28 <gfx_mono_st7565r_init>
     69e:	80 e1       	ldi	r24, 0x10	; 16
     6a0:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
	#ifndef CONF_BOARD_OLED_UG_2832HSWEG04
	ioport_set_pin_high(LCD_BACKLIGHT_ENABLE_PIN);
	#endif
	
	// Initialize configuration structures.
	adc_read_configuration(&ADCB, &adc_conf);
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5f       	subi	r22, 0xFF	; 255
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	80 e4       	ldi	r24, 0x40	; 64
     6ac:	92 e0       	ldi	r25, 0x02	; 2
     6ae:	0e 94 9a 0b 	call	0x1734	; 0x1734 <adc_read_configuration>
	adcch_read_configuration(&ADCB, ADC_CH0, &adcch_conf);
     6b2:	ae 01       	movw	r20, r28
     6b4:	48 5f       	subi	r20, 0xF8	; 248
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	80 e4       	ldi	r24, 0x40	; 64
     6bc:	92 e0       	ldi	r25, 0x02	; 2
     6be:	0e 94 1e 0c 	call	0x183c	; 0x183c <adcch_read_configuration>
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
     6c6:	8f 78       	andi	r24, 0x8F	; 143
     6c8:	24 e0       	ldi	r18, 0x04	; 4
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
     6ca:	2d 83       	std	Y+5, r18	; 0x05
     6cc:	91 7e       	andi	r25, 0xE1	; 225
     6ce:	94 61       	ori	r25, 0x14	; 20
		conf->evctrl = ADC_EVACT_NONE_gc;
     6d0:	9a 83       	std	Y+2, r25	; 0x02
 * \arg \c ADC_INT_BANDGAP for bandgap reference.
 */
static inline void adc_enable_internal_input(struct adc_config *conf,
		uint8_t int_inp)
{
	conf->refctrl |= int_inp;
     6d2:	1c 82       	std	Y+4, r1	; 0x04
     6d4:	81 61       	ori	r24, 0x11	; 17
	ADC_REF_VCC);
	adc_set_clock_rate(&adc_conf, 200000UL);
	adc_set_conversion_trigger(&adc_conf, ADC_TRIG_MANUAL, 1, 0);
	adc_enable_internal_input(&adc_conf, ADC_INT_TEMPSENSE);
	
	adc_write_configuration(&ADCB, &adc_conf);
     6d6:	8b 83       	std	Y+3, r24	; 0x03
     6d8:	be 01       	movw	r22, r28
     6da:	6f 5f       	subi	r22, 0xFF	; 255
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	80 e4       	ldi	r24, 0x40	; 64
     6e0:	92 e0       	ldi	r25, 0x02	; 2
	adc_set_callback(&ADCB, &adc_handler);
     6e2:	c2 d7       	rcall	.+3972   	; 0x1668 <adc_write_configuration>
     6e4:	68 e6       	ldi	r22, 0x68	; 104
     6e6:	72 e0       	ldi	r23, 0x02	; 2
     6e8:	80 e4       	ldi	r24, 0x40	; 64
     6ea:	92 e0       	ldi	r25, 0x02	; 2
				ADC_CH_MUXPOS_gp;
	} else if (neg == ADCCH_NEG_NONE) {
		/* Configure for single-ended measurement. */
		Assert(gain == 1);

		ch_conf->ctrl = ADC_CH_INPUTMODE_SINGLEENDED_gc;
     6ec:	a5 d5       	rcall	.+2890   	; 0x1238 <adc_set_callback>
		ch_conf->muxctrl = pos << ADC_CH_MUXPOS_gp;
     6ee:	18 87       	std	Y+8, r17	; 0x08
     6f0:	88 e0       	ldi	r24, 0x08	; 8
 * \param ch_conf Pointer to ADC channel configuration.
 */
static inline void adcch_enable_interrupt(struct adc_channel_config *ch_conf)
{
	ch_conf->intctrl &= ~ADC_CH_INTLVL_gm;
	ch_conf->intctrl |= CONFIG_ADC_INTLVL;
     6f2:	89 87       	std	Y+9, r24	; 0x09
     6f4:	8a 85       	ldd	r24, Y+10	; 0x0a
     6f6:	80 7f       	andi	r24, 0xF0	; 240
     6f8:	81 60       	ori	r24, 0x01	; 1
	adcch_set_input(&adcch_conf, ADCCH_POS_PIN1, ADCCH_NEG_NONE,
	1);
	adcch_set_interrupt_mode(&adcch_conf, ADCCH_MODE_COMPLETE);
	adcch_enable_interrupt(&adcch_conf);
	
	adcch_write_configuration(&ADCB, ADC_CH0, &adcch_conf);
     6fa:	8a 87       	std	Y+10, r24	; 0x0a
     6fc:	ae 01       	movw	r20, r28
     6fe:	48 5f       	subi	r20, 0xF8	; 248
     700:	5f 4f       	sbci	r21, 0xFF	; 255
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	92 e0       	ldi	r25, 0x02	; 2
	
	// Enable the ADC and start the first conversion.
	adc_enable(&ADCB);
     708:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <adcch_write_configuration>
     70c:	80 e4       	ldi	r24, 0x40	; 64
     70e:	92 e0       	ldi	r25, 0x02	; 2

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     710:	ef d5       	rcall	.+3038   	; 0x12f0 <adc_enable>
     712:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
     714:	8c 87       	std	Y+12, r24	; 0x0c
	return flags;
     716:	f8 94       	cli
 */
static inline void adc_start_conversion(ADC_t *adc, uint8_t ch_mask)
{
	irqflags_t flags = cpu_irq_save();
#if !XMEGA_E
	adc->CTRLA |= ch_mask << ADC_CH0START_bp;
     718:	9c 85       	ldd	r25, Y+12	; 0x0c
     71a:	e0 e4       	ldi	r30, 0x40	; 64
     71c:	f2 e0       	ldi	r31, 0x02	; 2
     71e:	80 81       	ld	r24, Z
     720:	84 60       	ori	r24, 0x04	; 4
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     722:	80 83       	st	Z, r24

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     724:	9f bf       	out	0x3f, r25	; 63
     726:	4c e3       	ldi	r20, 0x3C	; 60
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
     728:	52 e2       	ldi	r21, 0x22	; 34
     72a:	28 e4       	ldi	r18, 0x48	; 72
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
     72c:	30 e0       	ldi	r19, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     72e:	f8 94       	cli
     730:	da 01       	movw	r26, r20
     732:	8c 91       	ld	r24, X
     734:	81 11       	cpse	r24, r1
     736:	09 c0       	rjmp	.+18     	; 0x74a <main+0xda>
     738:	ad e3       	ldi	r26, 0x3D	; 61
     73a:	b2 e2       	ldi	r27, 0x22	; 34
		lock_ptr++;
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
     73c:	e0 e0       	ldi	r30, 0x00	; 0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
     73e:	ef 5f       	subi	r30, 0xFF	; 255
     740:	8d 91       	ld	r24, X+
     742:	88 23       	and	r24, r24
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
     744:	e1 f3       	breq	.-8      	; 0x73e <main+0xce>
     746:	e1 11       	cpse	r30, r1
		cpu_irq_enable();
     748:	02 c0       	rjmp	.+4      	; 0x74e <main+0xde>
     74a:	78 94       	sei
     74c:	f0 cf       	rjmp	.-32     	; 0x72e <main+0xbe>
     74e:	d9 01       	movw	r26, r18

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	sleep_set_mode(sleepmgr_configs[sleep_mode-1]);
     750:	8c 91       	ld	r24, X
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	ea 5f       	subi	r30, 0xFA	; 250
     756:	ff 4d       	sbci	r31, 0xDF	; 223
     758:	81 7f       	andi	r24, 0xF1	; 241
     75a:	90 81       	ld	r25, Z
     75c:	89 2b       	or	r24, r25
	sleep_enable();
     75e:	8c 93       	st	X, r24
     760:	8c 91       	ld	r24, X
     762:	81 60       	ori	r24, 0x01	; 1

	cpu_irq_enable();
     764:	8c 93       	st	X, r24
	sleep_enter();
     766:	78 94       	sei

	sleep_disable();
     768:	88 95       	sleep
     76a:	f9 01       	movw	r30, r18
     76c:	80 81       	ld	r24, Z
     76e:	8e 7f       	andi	r24, 0xFE	; 254
     770:	80 83       	st	Z, r24
     772:	dd cf       	rjmp	.-70     	; 0x72e <main+0xbe>

00000774 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     774:	04 c0       	rjmp	.+8      	; 0x77e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     776:	61 50       	subi	r22, 0x01	; 1
     778:	71 09       	sbc	r23, r1
     77a:	81 09       	sbc	r24, r1
     77c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     77e:	61 15       	cp	r22, r1
     780:	71 05       	cpc	r23, r1
     782:	81 05       	cpc	r24, r1
     784:	91 05       	cpc	r25, r1
     786:	b9 f7       	brne	.-18     	; 0x776 <__portable_avr_delay_cycles+0x2>
     788:	08 95       	ret

0000078a <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	1f 92       	push	r1
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     7a2:	00 e0       	ldi	r16, 0x00	; 0
     7a4:	16 e0       	ldi	r17, 0x06	; 6
     7a6:	68 94       	set
     7a8:	ff 24       	eor	r15, r15
     7aa:	f3 f8       	bld	r15, 3
     7ac:	f8 01       	movw	r30, r16
     7ae:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     7b0:	6e e0       	ldi	r22, 0x0E	; 14
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	dd df       	rcall	.-70     	; 0x774 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     7ba:	f8 01       	movw	r30, r16
     7bc:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     7be:	6e e0       	ldi	r22, 0x0E	; 14
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	d6 df       	rcall	.-84     	; 0x774 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     7c8:	0f 2e       	mov	r0, r31
     7ca:	fb e2       	ldi	r31, 0x2B	; 43
     7cc:	bf 2e       	mov	r11, r31
     7ce:	f0 2d       	mov	r31, r0
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     7d0:	b9 82       	std	Y+1, r11	; 0x01
     7d2:	80 ea       	ldi	r24, 0xA0	; 160
     7d4:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     7d6:	6c d4       	rcall	.+2264   	; 0x10b0 <usart_spi_init>
     7d8:	c1 2c       	mov	r12, r1
     7da:	d1 2c       	mov	r13, r1
     7dc:	76 01       	movw	r14, r12
     7de:	00 e4       	ldi	r16, 0x40	; 64
     7e0:	12 e4       	ldi	r17, 0x42	; 66
     7e2:	2f e0       	ldi	r18, 0x0F	; 15
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	43 e0       	ldi	r20, 0x03	; 3
     7e8:	be 01       	movw	r22, r28
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	80 ea       	ldi	r24, 0xA0	; 160
     7f0:	99 e0       	ldi	r25, 0x09	; 9
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     7f2:	8d d4       	rcall	.+2330   	; 0x110e <usart_spi_setup_device>
     7f4:	00 e6       	ldi	r16, 0x60	; 96
     7f6:	16 e0       	ldi	r17, 0x06	; 6
     7f8:	ff 24       	eor	r15, r15
     7fa:	f3 94       	inc	r15
     7fc:	f8 01       	movw	r30, r16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7fe:	f6 82       	std	Z+6, r15	; 0x06
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     800:	b9 82       	std	Y+1, r11	; 0x01
     802:	be 01       	movw	r22, r28
     804:	6f 5f       	subi	r22, 0xFF	; 255
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	80 ea       	ldi	r24, 0xA0	; 160
     80a:	99 e0       	ldi	r25, 0x09	; 9
     80c:	9a d4       	rcall	.+2356   	; 0x1142 <usart_spi_select_device>
     80e:	f8 01       	movw	r30, r16
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     810:	f6 82       	std	Z+6, r15	; 0x06
     812:	e0 ea       	ldi	r30, 0xA0	; 160
     814:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     816:	81 81       	ldd	r24, Z+1	; 0x01
     818:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     81a:	fd cf       	rjmp	.-6      	; 0x816 <st7565r_init+0x8c>
     81c:	80 ea       	ldi	r24, 0xA0	; 160
     81e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     822:	e0 ea       	ldi	r30, 0xA0	; 160
     824:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     826:	81 81       	ldd	r24, Z+1	; 0x01
     828:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     82a:	fd cf       	rjmp	.-6      	; 0x826 <st7565r_init+0x9c>
     82c:	e0 ea       	ldi	r30, 0xA0	; 160
     82e:	f9 e0       	ldi	r31, 0x09	; 9
     830:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     832:	81 83       	std	Z+1, r24	; 0x01
     834:	80 81       	ld	r24, Z
     836:	be 01       	movw	r22, r28
     838:	6f 5f       	subi	r22, 0xFF	; 255
     83a:	7f 4f       	sbci	r23, 0xFF	; 255
     83c:	80 ea       	ldi	r24, 0xA0	; 160
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     83e:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     840:	96 d4       	rcall	.+2348   	; 0x116e <usart_spi_deselect_device>
     842:	8b e2       	ldi	r24, 0x2B	; 43
     844:	89 83       	std	Y+1, r24	; 0x01
     846:	be 01       	movw	r22, r28
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	7f 4f       	sbci	r23, 0xFF	; 255
     84c:	80 ea       	ldi	r24, 0xA0	; 160
     84e:	99 e0       	ldi	r25, 0x09	; 9
     850:	78 d4       	rcall	.+2288   	; 0x1142 <usart_spi_select_device>
     852:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     854:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     858:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     85a:	f9 e0       	ldi	r31, 0x09	; 9
     85c:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     85e:	85 ff       	sbrs	r24, 5
     860:	fd cf       	rjmp	.-6      	; 0x85c <st7565r_init+0xd2>
     862:	86 ea       	ldi	r24, 0xA6	; 166
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     864:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     868:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     86a:	f9 e0       	ldi	r31, 0x09	; 9
     86c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     86e:	86 ff       	sbrs	r24, 6
     870:	fd cf       	rjmp	.-6      	; 0x86c <st7565r_init+0xe2>
     872:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     874:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     876:	80 e4       	ldi	r24, 0x40	; 64
     878:	81 83       	std	Z+1, r24	; 0x01
     87a:	80 81       	ld	r24, Z
     87c:	be 01       	movw	r22, r28
     87e:	6f 5f       	subi	r22, 0xFF	; 255
     880:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     882:	80 ea       	ldi	r24, 0xA0	; 160
     884:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     886:	73 d4       	rcall	.+2278   	; 0x116e <usart_spi_deselect_device>
     888:	8b e2       	ldi	r24, 0x2B	; 43
     88a:	89 83       	std	Y+1, r24	; 0x01
     88c:	be 01       	movw	r22, r28
     88e:	6f 5f       	subi	r22, 0xFF	; 255
     890:	7f 4f       	sbci	r23, 0xFF	; 255
     892:	80 ea       	ldi	r24, 0xA0	; 160
     894:	99 e0       	ldi	r25, 0x09	; 9
     896:	55 d4       	rcall	.+2218   	; 0x1142 <usart_spi_select_device>
     898:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     89a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     89e:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8a0:	f9 e0       	ldi	r31, 0x09	; 9
     8a2:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8a4:	85 ff       	sbrs	r24, 5
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <st7565r_init+0x118>
     8a8:	88 ec       	ldi	r24, 0xC8	; 200
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     8ae:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8b0:	f9 e0       	ldi	r31, 0x09	; 9
     8b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8b4:	86 ff       	sbrs	r24, 6
     8b6:	fd cf       	rjmp	.-6      	; 0x8b2 <st7565r_init+0x128>
     8b8:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8ba:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8bc:	80 e4       	ldi	r24, 0x40	; 64
     8be:	81 83       	std	Z+1, r24	; 0x01
     8c0:	80 81       	ld	r24, Z
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8c8:	80 ea       	ldi	r24, 0xA0	; 160
     8ca:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8cc:	50 d4       	rcall	.+2208   	; 0x116e <usart_spi_deselect_device>
     8ce:	8b e2       	ldi	r24, 0x2B	; 43
     8d0:	89 83       	std	Y+1, r24	; 0x01
     8d2:	be 01       	movw	r22, r28
     8d4:	6f 5f       	subi	r22, 0xFF	; 255
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	80 ea       	ldi	r24, 0xA0	; 160
     8da:	99 e0       	ldi	r25, 0x09	; 9
     8dc:	32 d4       	rcall	.+2148   	; 0x1142 <usart_spi_select_device>
     8de:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     8e4:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8e6:	f9 e0       	ldi	r31, 0x09	; 9
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8ea:	85 ff       	sbrs	r24, 5
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <st7565r_init+0x15e>
     8ee:	82 ea       	ldi	r24, 0xA2	; 162
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     8f4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8f6:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8f8:	81 81       	ldd	r24, Z+1	; 0x01
     8fa:	86 ff       	sbrs	r24, 6
     8fc:	fd cf       	rjmp	.-6      	; 0x8f8 <st7565r_init+0x16e>
     8fe:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     900:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     902:	80 e4       	ldi	r24, 0x40	; 64
     904:	81 83       	std	Z+1, r24	; 0x01
     906:	80 81       	ld	r24, Z
     908:	be 01       	movw	r22, r28
     90a:	6f 5f       	subi	r22, 0xFF	; 255
     90c:	7f 4f       	sbci	r23, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     90e:	80 ea       	ldi	r24, 0xA0	; 160
     910:	99 e0       	ldi	r25, 0x09	; 9
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     912:	2d d4       	rcall	.+2138   	; 0x116e <usart_spi_deselect_device>
     914:	8b e2       	ldi	r24, 0x2B	; 43
     916:	89 83       	std	Y+1, r24	; 0x01
     918:	be 01       	movw	r22, r28
     91a:	6f 5f       	subi	r22, 0xFF	; 255
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	80 ea       	ldi	r24, 0xA0	; 160
     920:	99 e0       	ldi	r25, 0x09	; 9
     922:	0f d4       	rcall	.+2078   	; 0x1142 <usart_spi_select_device>
     924:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     926:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     92a:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     92c:	f9 e0       	ldi	r31, 0x09	; 9
     92e:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     930:	85 ff       	sbrs	r24, 5
     932:	fd cf       	rjmp	.-6      	; 0x92e <st7565r_init+0x1a4>
     934:	8f e2       	ldi	r24, 0x2F	; 47
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     936:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     93a:	e0 ea       	ldi	r30, 0xA0	; 160
     93c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     93e:	81 81       	ldd	r24, Z+1	; 0x01
     940:	86 ff       	sbrs	r24, 6
     942:	fd cf       	rjmp	.-6      	; 0x93e <st7565r_init+0x1b4>
     944:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     946:	f9 e0       	ldi	r31, 0x09	; 9
     948:	80 e4       	ldi	r24, 0x40	; 64
     94a:	81 83       	std	Z+1, r24	; 0x01
     94c:	80 81       	ld	r24, Z
     94e:	be 01       	movw	r22, r28
     950:	6f 5f       	subi	r22, 0xFF	; 255
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	80 ea       	ldi	r24, 0xA0	; 160
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     956:	99 e0       	ldi	r25, 0x09	; 9
     958:	0a d4       	rcall	.+2068   	; 0x116e <usart_spi_deselect_device>
     95a:	8b e2       	ldi	r24, 0x2B	; 43
     95c:	89 83       	std	Y+1, r24	; 0x01
     95e:	be 01       	movw	r22, r28
     960:	6f 5f       	subi	r22, 0xFF	; 255
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	80 ea       	ldi	r24, 0xA0	; 160
     966:	99 e0       	ldi	r25, 0x09	; 9
     968:	ec d3       	rcall	.+2008   	; 0x1142 <usart_spi_select_device>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     970:	e0 ea       	ldi	r30, 0xA0	; 160
     972:	f9 e0       	ldi	r31, 0x09	; 9
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     974:	81 81       	ldd	r24, Z+1	; 0x01
     976:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     978:	fd cf       	rjmp	.-6      	; 0x974 <st7565r_init+0x1ea>
     97a:	88 ef       	ldi	r24, 0xF8	; 248
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     97c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     980:	e0 ea       	ldi	r30, 0xA0	; 160
     982:	f9 e0       	ldi	r31, 0x09	; 9
     984:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     986:	86 ff       	sbrs	r24, 6
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     988:	fd cf       	rjmp	.-6      	; 0x984 <st7565r_init+0x1fa>
     98a:	e0 ea       	ldi	r30, 0xA0	; 160
     98c:	f9 e0       	ldi	r31, 0x09	; 9
     98e:	80 e4       	ldi	r24, 0x40	; 64
     990:	81 83       	std	Z+1, r24	; 0x01
     992:	80 81       	ld	r24, Z
     994:	be 01       	movw	r22, r28
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     996:	6f 5f       	subi	r22, 0xFF	; 255
     998:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     99a:	80 ea       	ldi	r24, 0xA0	; 160
     99c:	99 e0       	ldi	r25, 0x09	; 9
     99e:	e7 d3       	rcall	.+1998   	; 0x116e <usart_spi_deselect_device>
     9a0:	8b e2       	ldi	r24, 0x2B	; 43
     9a2:	89 83       	std	Y+1, r24	; 0x01
     9a4:	be 01       	movw	r22, r28
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	80 ea       	ldi	r24, 0xA0	; 160
     9ac:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9ae:	c9 d3       	rcall	.+1938   	; 0x1142 <usart_spi_select_device>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9b6:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9b8:	f9 e0       	ldi	r31, 0x09	; 9
     9ba:	81 81       	ldd	r24, Z+1	; 0x01
     9bc:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <st7565r_init+0x230>
     9c0:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9c4:	e0 ea       	ldi	r30, 0xA0	; 160
     9c6:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9c8:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9ca:	86 ff       	sbrs	r24, 6
     9cc:	fd cf       	rjmp	.-6      	; 0x9c8 <st7565r_init+0x23e>
     9ce:	e0 ea       	ldi	r30, 0xA0	; 160
     9d0:	f9 e0       	ldi	r31, 0x09	; 9
     9d2:	80 e4       	ldi	r24, 0x40	; 64
     9d4:	81 83       	std	Z+1, r24	; 0x01
     9d6:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9d8:	be 01       	movw	r22, r28
     9da:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	80 ea       	ldi	r24, 0xA0	; 160
     9e0:	99 e0       	ldi	r25, 0x09	; 9
     9e2:	c5 d3       	rcall	.+1930   	; 0x116e <usart_spi_deselect_device>
     9e4:	8b e2       	ldi	r24, 0x2B	; 43
     9e6:	89 83       	std	Y+1, r24	; 0x01
     9e8:	be 01       	movw	r22, r28
     9ea:	6f 5f       	subi	r22, 0xFF	; 255
     9ec:	7f 4f       	sbci	r23, 0xFF	; 255
     9ee:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9f0:	99 e0       	ldi	r25, 0x09	; 9
     9f2:	a7 d3       	rcall	.+1870   	; 0x1142 <usart_spi_select_device>
     9f4:	81 e0       	ldi	r24, 0x01	; 1
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9f6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9fa:	e0 ea       	ldi	r30, 0xA0	; 160
     9fc:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	85 ff       	sbrs	r24, 5
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <st7565r_init+0x274>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a04:	81 e2       	ldi	r24, 0x21	; 33
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a06:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a0a:	e0 ea       	ldi	r30, 0xA0	; 160
     a0c:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a0e:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a10:	86 ff       	sbrs	r24, 6
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <st7565r_init+0x284>
     a14:	e0 ea       	ldi	r30, 0xA0	; 160
     a16:	f9 e0       	ldi	r31, 0x09	; 9
     a18:	80 e4       	ldi	r24, 0x40	; 64
     a1a:	81 83       	std	Z+1, r24	; 0x01
     a1c:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a1e:	be 01       	movw	r22, r28
     a20:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a22:	7f 4f       	sbci	r23, 0xFF	; 255
     a24:	80 ea       	ldi	r24, 0xA0	; 160
     a26:	99 e0       	ldi	r25, 0x09	; 9
     a28:	a2 d3       	rcall	.+1860   	; 0x116e <usart_spi_deselect_device>
     a2a:	8b e2       	ldi	r24, 0x2B	; 43
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	be 01       	movw	r22, r28
     a30:	6f 5f       	subi	r22, 0xFF	; 255
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	80 ea       	ldi	r24, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a36:	99 e0       	ldi	r25, 0x09	; 9
     a38:	84 d3       	rcall	.+1800   	; 0x1142 <usart_spi_select_device>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a40:	e0 ea       	ldi	r30, 0xA0	; 160
     a42:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a44:	81 81       	ldd	r24, Z+1	; 0x01
     a46:	85 ff       	sbrs	r24, 5
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <st7565r_init+0x2ba>
     a4a:	81 e8       	ldi	r24, 0x81	; 129
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a4c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     a50:	e0 ea       	ldi	r30, 0xA0	; 160
     a52:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a54:	81 81       	ldd	r24, Z+1	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a56:	86 ff       	sbrs	r24, 6
     a58:	fd cf       	rjmp	.-6      	; 0xa54 <st7565r_init+0x2ca>
     a5a:	e0 ea       	ldi	r30, 0xA0	; 160
     a5c:	f9 e0       	ldi	r31, 0x09	; 9
     a5e:	80 e4       	ldi	r24, 0x40	; 64
     a60:	81 83       	std	Z+1, r24	; 0x01
     a62:	80 81       	ld	r24, Z
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a64:	be 01       	movw	r22, r28
     a66:	6f 5f       	subi	r22, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	80 ea       	ldi	r24, 0xA0	; 160
     a6c:	99 e0       	ldi	r25, 0x09	; 9
     a6e:	7f d3       	rcall	.+1790   	; 0x116e <usart_spi_deselect_device>
     a70:	8b e2       	ldi	r24, 0x2B	; 43
     a72:	89 83       	std	Y+1, r24	; 0x01
     a74:	be 01       	movw	r22, r28
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a7a:	80 ea       	ldi	r24, 0xA0	; 160
     a7c:	99 e0       	ldi	r25, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a7e:	61 d3       	rcall	.+1730   	; 0x1142 <usart_spi_select_device>
     a80:	81 e0       	ldi	r24, 0x01	; 1
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a82:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a86:	e0 ea       	ldi	r30, 0xA0	; 160
     a88:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a8a:	81 81       	ldd	r24, Z+1	; 0x01
     a8c:	85 ff       	sbrs	r24, 5
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a8e:	fd cf       	rjmp	.-6      	; 0xa8a <st7565r_init+0x300>
     a90:	89 e3       	ldi	r24, 0x39	; 57
     a92:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a96:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a98:	f9 e0       	ldi	r31, 0x09	; 9
     a9a:	81 81       	ldd	r24, Z+1	; 0x01
     a9c:	86 ff       	sbrs	r24, 6
     a9e:	fd cf       	rjmp	.-6      	; 0xa9a <st7565r_init+0x310>
     aa0:	e0 ea       	ldi	r30, 0xA0	; 160
     aa2:	f9 e0       	ldi	r31, 0x09	; 9
     aa4:	80 e4       	ldi	r24, 0x40	; 64
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     aa6:	81 83       	std	Z+1, r24	; 0x01
     aa8:	80 81       	ld	r24, Z
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     aaa:	be 01       	movw	r22, r28
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	80 ea       	ldi	r24, 0xA0	; 160
     ab2:	99 e0       	ldi	r25, 0x09	; 9
     ab4:	5c d3       	rcall	.+1720   	; 0x116e <usart_spi_deselect_device>
     ab6:	8b e2       	ldi	r24, 0x2B	; 43
     ab8:	89 83       	std	Y+1, r24	; 0x01
     aba:	be 01       	movw	r22, r28
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     abc:	6f 5f       	subi	r22, 0xFF	; 255
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	80 ea       	ldi	r24, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ac2:	99 e0       	ldi	r25, 0x09	; 9
     ac4:	3e d3       	rcall	.+1660   	; 0x1142 <usart_spi_select_device>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     acc:	e0 ea       	ldi	r30, 0xA0	; 160
     ace:	f9 e0       	ldi	r31, 0x09	; 9
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     ad2:	85 ff       	sbrs	r24, 5
     ad4:	fd cf       	rjmp	.-6      	; 0xad0 <st7565r_init+0x346>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     ad6:	8f ea       	ldi	r24, 0xAF	; 175
     ad8:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     adc:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     ade:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	86 ff       	sbrs	r24, 6
     ae4:	fd cf       	rjmp	.-6      	; 0xae0 <st7565r_init+0x356>
     ae6:	e0 ea       	ldi	r30, 0xA0	; 160
     ae8:	f9 e0       	ldi	r31, 0x09	; 9
     aea:	80 e4       	ldi	r24, 0x40	; 64
     aec:	81 83       	std	Z+1, r24	; 0x01
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     aee:	80 81       	ld	r24, Z
     af0:	be 01       	movw	r22, r28
     af2:	6f 5f       	subi	r22, 0xFF	; 255
     af4:	7f 4f       	sbci	r23, 0xFF	; 255
     af6:	80 ea       	ldi	r24, 0xA0	; 160
     af8:	99 e0       	ldi	r25, 0x09	; 9
     afa:	39 d3       	rcall	.+1650   	; 0x116e <usart_spi_deselect_device>
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	08 95       	ret

00000b12 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	1f 92       	push	r1
     b18:	1f 92       	push	r1
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     b24:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     b28:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     b2c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     b30:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     b34:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     b38:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
     b3c:	6c e0       	ldi	r22, 0x0C	; 12
     b3e:	81 e4       	ldi	r24, 0x41	; 65
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	c7 d6       	rcall	.+3470   	; 0x18d2 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b44:	8f b7       	in	r24, 0x3f	; 63
     b46:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     b48:	f8 94       	cli
	return flags;
     b4a:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     b4c:	e0 e5       	ldi	r30, 0x50	; 80
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	82 60       	ori	r24, 0x02	; 2
     b54:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b56:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     b58:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     b5a:	81 ff       	sbrs	r24, 1
     b5c:	fd cf       	rjmp	.-6      	; 0xb58 <sysclk_init+0x46>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	80 e4       	ldi	r24, 0x40	; 64
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	b6 d6       	rcall	.+3436   	; 0x18d2 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b66:	8f b7       	in	r24, 0x3f	; 63
     b68:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     b6a:	f8 94       	cli
	return flags;
     b6c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     b6e:	e0 e5       	ldi	r30, 0x50	; 80
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     b78:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	1f 92       	push	r1
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     b8e:	9f b7       	in	r25, 0x3f	; 63
     b90:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     b92:	f8 94       	cli
	return flags;
     b94:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     b96:	e8 2f       	mov	r30, r24
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	e0 59       	subi	r30, 0x90	; 144
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	60 95       	com	r22
     ba0:	80 81       	ld	r24, Z
     ba2:	68 23       	and	r22, r24
     ba4:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ba6:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     ba8:	0f 90       	pop	r0
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <sysclk_disable_module>:

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	1f 92       	push	r1
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bba:	9f b7       	in	r25, 0x3f	; 63
     bbc:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     bbe:	f8 94       	cli
	return flags;
     bc0:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
     bc2:	e8 2f       	mov	r30, r24
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	e0 59       	subi	r30, 0x90	; 144
     bc8:	ff 4f       	sbci	r31, 0xFF	; 255
     bca:	80 81       	ld	r24, Z
     bcc:	68 2b       	or	r22, r24
     bce:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bd0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     bd2:	0f 90       	pop	r0
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	1f 92       	push	r1
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	08 2f       	mov	r16, r24
     bec:	f6 2e       	mov	r15, r22
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     bee:	14 2f       	mov	r17, r20
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     bf0:	1a d1       	rcall	.+564    	; 0xe26 <gfx_mono_framebuffer_put_byte>
     bf2:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     bf4:	00 6b       	ori	r16, 0xB0	; 176
     bf6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	be 01       	movw	r22, r28
     bfc:	6f 5f       	subi	r22, 0xFF	; 255
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	80 ea       	ldi	r24, 0xA0	; 160
     c02:	99 e0       	ldi	r25, 0x09	; 9
     c04:	9e d2       	rcall	.+1340   	; 0x1142 <usart_spi_select_device>
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c0c:	e0 ea       	ldi	r30, 0xA0	; 160
     c0e:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c10:	91 81       	ldd	r25, Z+1	; 0x01
     c12:	95 ff       	sbrs	r25, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c14:	fd cf       	rjmp	.-6      	; 0xc10 <gfx_mono_st7565r_put_byte+0x36>
     c16:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c1a:	e0 ea       	ldi	r30, 0xA0	; 160
     c1c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c1e:	81 81       	ldd	r24, Z+1	; 0x01
     c20:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <gfx_mono_st7565r_put_byte+0x44>
     c24:	e0 ea       	ldi	r30, 0xA0	; 160
     c26:	f9 e0       	ldi	r31, 0x09	; 9
     c28:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c2a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c2c:	80 81       	ld	r24, Z
     c2e:	be 01       	movw	r22, r28
     c30:	6f 5f       	subi	r22, 0xFF	; 255
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	80 ea       	ldi	r24, 0xA0	; 160
     c36:	99 e0       	ldi	r25, 0x09	; 9
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     c38:	9a d2       	rcall	.+1332   	; 0x116e <usart_spi_deselect_device>
     c3a:	0f 2d       	mov	r16, r15
     c3c:	0f 77       	andi	r16, 0x7F	; 127
     c3e:	02 95       	swap	r16
     c40:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c42:	00 61       	ori	r16, 0x10	; 16
     c44:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	be 01       	movw	r22, r28
     c4a:	6f 5f       	subi	r22, 0xFF	; 255
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	80 ea       	ldi	r24, 0xA0	; 160
     c50:	99 e0       	ldi	r25, 0x09	; 9
     c52:	77 d2       	rcall	.+1262   	; 0x1142 <usart_spi_select_device>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c5a:	e0 ea       	ldi	r30, 0xA0	; 160
     c5c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <gfx_mono_st7565r_put_byte+0x84>
     c64:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     c68:	e0 ea       	ldi	r30, 0xA0	; 160
     c6a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     c6c:	81 81       	ldd	r24, Z+1	; 0x01
     c6e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     c70:	fd cf       	rjmp	.-6      	; 0xc6c <gfx_mono_st7565r_put_byte+0x92>
     c72:	e0 ea       	ldi	r30, 0xA0	; 160
     c74:	f9 e0       	ldi	r31, 0x09	; 9
     c76:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     c78:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     c7a:	80 81       	ld	r24, Z
     c7c:	be 01       	movw	r22, r28
     c7e:	6f 5f       	subi	r22, 0xFF	; 255
     c80:	7f 4f       	sbci	r23, 0xFF	; 255
     c82:	80 ea       	ldi	r24, 0xA0	; 160
     c84:	99 e0       	ldi	r25, 0x09	; 9
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     c86:	73 d2       	rcall	.+1254   	; 0x116e <usart_spi_deselect_device>
     c88:	0f 2d       	mov	r16, r15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     c8a:	0f 70       	andi	r16, 0x0F	; 15
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     c8c:	8b e2       	ldi	r24, 0x2B	; 43
     c8e:	89 83       	std	Y+1, r24	; 0x01
     c90:	be 01       	movw	r22, r28
     c92:	6f 5f       	subi	r22, 0xFF	; 255
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	80 ea       	ldi	r24, 0xA0	; 160
     c98:	99 e0       	ldi	r25, 0x09	; 9
     c9a:	53 d2       	rcall	.+1190   	; 0x1142 <usart_spi_select_device>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     c9e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     ca2:	e0 ea       	ldi	r30, 0xA0	; 160
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ca4:	f9 e0       	ldi	r31, 0x09	; 9
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ca8:	85 ff       	sbrs	r24, 5
     caa:	fd cf       	rjmp	.-6      	; 0xca6 <gfx_mono_st7565r_put_byte+0xcc>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     cac:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
     cb0:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     cb2:	f9 e0       	ldi	r31, 0x09	; 9
     cb4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     cb6:	86 ff       	sbrs	r24, 6
     cb8:	fd cf       	rjmp	.-6      	; 0xcb4 <gfx_mono_st7565r_put_byte+0xda>
     cba:	e0 ea       	ldi	r30, 0xA0	; 160
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     cbc:	f9 e0       	ldi	r31, 0x09	; 9
     cbe:	80 e4       	ldi	r24, 0x40	; 64
     cc0:	81 83       	std	Z+1, r24	; 0x01
     cc2:	80 81       	ld	r24, Z
     cc4:	be 01       	movw	r22, r28
     cc6:	6f 5f       	subi	r22, 0xFF	; 255
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     cc8:	7f 4f       	sbci	r23, 0xFF	; 255
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     cca:	80 ea       	ldi	r24, 0xA0	; 160
     ccc:	99 e0       	ldi	r25, 0x09	; 9
     cce:	4f d2       	rcall	.+1182   	; 0x116e <usart_spi_deselect_device>
     cd0:	8b e2       	ldi	r24, 0x2B	; 43
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	be 01       	movw	r22, r28
     cd6:	6f 5f       	subi	r22, 0xFF	; 255
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     cd8:	7f 4f       	sbci	r23, 0xFF	; 255
     cda:	80 ea       	ldi	r24, 0xA0	; 160
     cdc:	99 e0       	ldi	r25, 0x09	; 9
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     cde:	31 d2       	rcall	.+1122   	; 0x1142 <usart_spi_select_device>
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     ce6:	e0 ea       	ldi	r30, 0xA0	; 160
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     ce8:	f9 e0       	ldi	r31, 0x09	; 9
     cea:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     cec:	85 ff       	sbrs	r24, 5
     cee:	fd cf       	rjmp	.-6      	; 0xcea <gfx_mono_st7565r_put_byte+0x110>
     cf0:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     cf4:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     cf6:	f9 e0       	ldi	r31, 0x09	; 9
     cf8:	81 81       	ldd	r24, Z+1	; 0x01
     cfa:	86 ff       	sbrs	r24, 6
     cfc:	fd cf       	rjmp	.-6      	; 0xcf8 <gfx_mono_st7565r_put_byte+0x11e>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     cfe:	e0 ea       	ldi	r30, 0xA0	; 160
     d00:	f9 e0       	ldi	r31, 0x09	; 9
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     d02:	80 e4       	ldi	r24, 0x40	; 64
     d04:	81 83       	std	Z+1, r24	; 0x01
     d06:	80 81       	ld	r24, Z
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     d0e:	be 01       	movw	r22, r28

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     d10:	6f 5f       	subi	r22, 0xFF	; 255
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	80 ea       	ldi	r24, 0xA0	; 160
     d16:	99 e0       	ldi	r25, 0x09	; 9
     d18:	2a d2       	rcall	.+1108   	; 0x116e <usart_spi_deselect_device>
     d1a:	0f 90       	pop	r0
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	08 95       	ret

00000d28 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	1f 92       	push	r1
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     d36:	88 e3       	ldi	r24, 0x38	; 56
     d38:	90 e2       	ldi	r25, 0x20	; 32
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     d3a:	70 d0       	rcall	.+224    	; 0xe1c <gfx_mono_set_framebuffer>
     d3c:	26 dd       	rcall	.-1460   	; 0x78a <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     d3e:	8b e2       	ldi	r24, 0x2B	; 43
     d40:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     d42:	be 01       	movw	r22, r28
     d44:	6f 5f       	subi	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	80 ea       	ldi	r24, 0xA0	; 160
     d4a:	99 e0       	ldi	r25, 0x09	; 9
     d4c:	fa d1       	rcall	.+1012   	; 0x1142 <usart_spi_select_device>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     d54:	e0 ea       	ldi	r30, 0xA0	; 160
     d56:	f9 e0       	ldi	r31, 0x09	; 9
     d58:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     d5a:	85 ff       	sbrs	r24, 5
     d5c:	fd cf       	rjmp	.-6      	; 0xd58 <gfx_mono_st7565r_init+0x30>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     d5e:	80 e4       	ldi	r24, 0x40	; 64
     d60:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     d64:	e0 ea       	ldi	r30, 0xA0	; 160
     d66:	f9 e0       	ldi	r31, 0x09	; 9
     d68:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     d6a:	86 ff       	sbrs	r24, 6
     d6c:	fd cf       	rjmp	.-6      	; 0xd68 <gfx_mono_st7565r_init+0x40>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     d6e:	e0 ea       	ldi	r30, 0xA0	; 160
     d70:	f9 e0       	ldi	r31, 0x09	; 9
     d72:	80 e4       	ldi	r24, 0x40	; 64
     d74:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     d76:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     d78:	be 01       	movw	r22, r28
     d7a:	6f 5f       	subi	r22, 0xFF	; 255
     d7c:	7f 4f       	sbci	r23, 0xFF	; 255
     d7e:	80 ea       	ldi	r24, 0xA0	; 160
     d80:	99 e0       	ldi	r25, 0x09	; 9
     d82:	f5 d1       	rcall	.+1002   	; 0x116e <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     d84:	00 e0       	ldi	r16, 0x00	; 0
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <gfx_mono_st7565r_init+0x74>
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	61 2f       	mov	r22, r17
     d8c:	80 2f       	mov	r24, r16
     d8e:	25 df       	rcall	.-438    	; 0xbda <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     d90:	1f 5f       	subi	r17, 0xFF	; 255
     d92:	10 38       	cpi	r17, 0x80	; 128
     d94:	c9 f7       	brne	.-14     	; 0xd88 <gfx_mono_st7565r_init+0x60>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     d96:	0f 5f       	subi	r16, 0xFF	; 255
     d98:	04 30       	cpi	r16, 0x04	; 4
     d9a:	11 f0       	breq	.+4      	; 0xda0 <gfx_mono_st7565r_init+0x78>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	f4 cf       	rjmp	.-24     	; 0xd88 <gfx_mono_st7565r_init+0x60>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     da0:	0f 90       	pop	r0
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	08 95       	ret

00000dac <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     db6:	88 23       	and	r24, r24
     db8:	4c f1       	brlt	.+82     	; 0xe0c <gfx_mono_st7565r_draw_pixel+0x60>
     dba:	60 32       	cpi	r22, 0x20	; 32
     dbc:	38 f5       	brcc	.+78     	; 0xe0c <gfx_mono_st7565r_draw_pixel+0x60>
     dbe:	d4 2f       	mov	r29, r20
     dc0:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     dc2:	f6 2e       	mov	r15, r22
     dc4:	f6 94       	lsr	r15
     dc6:	f6 94       	lsr	r15
     dc8:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	88 e0       	ldi	r24, 0x08	; 8
     dce:	f8 9e       	mul	r15, r24
     dd0:	60 19       	sub	r22, r0
     dd2:	71 09       	sbc	r23, r1
     dd4:	11 24       	eor	r1, r1
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	8c 01       	movw	r16, r24
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <gfx_mono_st7565r_draw_pixel+0x36>
     dde:	00 0f       	add	r16, r16
     de0:	11 1f       	adc	r17, r17
     de2:	6a 95       	dec	r22
     de4:	e2 f7       	brpl	.-8      	; 0xdde <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     de6:	6c 2f       	mov	r22, r28
     de8:	8f 2d       	mov	r24, r15
     dea:	2b d0       	rcall	.+86     	; 0xe42 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     dec:	d1 30       	cpi	r29, 0x01	; 1
     dee:	21 f0       	breq	.+8      	; 0xdf8 <gfx_mono_st7565r_draw_pixel+0x4c>
     df0:	28 f0       	brcs	.+10     	; 0xdfc <gfx_mono_st7565r_draw_pixel+0x50>
     df2:	d2 30       	cpi	r29, 0x02	; 2
     df4:	31 f0       	breq	.+12     	; 0xe02 <gfx_mono_st7565r_draw_pixel+0x56>
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     df8:	80 2b       	or	r24, r16
		break;
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     dfc:	00 95       	com	r16
     dfe:	80 23       	and	r24, r16
		break;
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     e02:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     e04:	48 2f       	mov	r20, r24
     e06:	6c 2f       	mov	r22, r28
     e08:	8f 2d       	mov	r24, r15
     e0a:	e7 de       	rcall	.-562    	; 0xbda <gfx_mono_st7565r_put_byte>
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	08 95       	ret

00000e18 <gfx_mono_st7565r_get_byte>:
 * \code
	data = gfx_mono_st7565r_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
     e18:	14 c0       	rjmp	.+40     	; 0xe42 <gfx_mono_framebuffer_get_byte>
     e1a:	08 95       	ret

00000e1c <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     e1c:	80 93 38 22 	sts	0x2238, r24	; 0x802238 <fbpointer>
     e20:	90 93 39 22 	sts	0x2239, r25	; 0x802239 <fbpointer+0x1>
     e24:	08 95       	ret

00000e26 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     e26:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <fbpointer>
     e2a:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <fbpointer+0x1>
     e2e:	90 e8       	ldi	r25, 0x80	; 128
     e30:	89 9f       	mul	r24, r25
     e32:	20 0d       	add	r18, r0
     e34:	31 1d       	adc	r19, r1
     e36:	11 24       	eor	r1, r1
     e38:	f9 01       	movw	r30, r18
     e3a:	e6 0f       	add	r30, r22
     e3c:	f1 1d       	adc	r31, r1
     e3e:	40 83       	st	Z, r20
     e40:	08 95       	ret

00000e42 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     e42:	20 91 38 22 	lds	r18, 0x2238	; 0x802238 <fbpointer>
     e46:	30 91 39 22 	lds	r19, 0x2239	; 0x802239 <fbpointer+0x1>
     e4a:	90 e8       	ldi	r25, 0x80	; 128
     e4c:	89 9f       	mul	r24, r25
     e4e:	20 0d       	add	r18, r0
     e50:	31 1d       	adc	r19, r1
     e52:	11 24       	eor	r1, r1
     e54:	f9 01       	movw	r30, r18
     e56:	e6 0f       	add	r30, r22
     e58:	f1 1d       	adc	r31, r1
}
     e5a:	80 81       	ld	r24, Z
     e5c:	08 95       	ret

00000e5e <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	e4 2f       	mov	r30, r20
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	e8 0f       	add	r30, r24
     e6e:	f1 1d       	adc	r31, r1
     e70:	e1 38       	cpi	r30, 0x81	; 129
     e72:	f1 05       	cpc	r31, r1
     e74:	1c f0       	brlt	.+6      	; 0xe7c <gfx_mono_generic_draw_horizontal_line+0x1e>
     e76:	c0 e8       	ldi	r28, 0x80	; 128
     e78:	4c 2f       	mov	r20, r28
     e7a:	48 1b       	sub	r20, r24
     e7c:	44 23       	and	r20, r20
     e7e:	09 f4       	brne	.+2      	; 0xe82 <gfx_mono_generic_draw_horizontal_line+0x24>
     e80:	4a c0       	rjmp	.+148    	; 0xf16 <gfx_mono_generic_draw_horizontal_line+0xb8>
     e82:	d6 2f       	mov	r29, r22
     e84:	d6 95       	lsr	r29
     e86:	d6 95       	lsr	r29
     e88:	d6 95       	lsr	r29
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	98 e0       	ldi	r25, 0x08	; 8
     e8e:	d9 9f       	mul	r29, r25
     e90:	60 19       	sub	r22, r0
     e92:	71 09       	sbc	r23, r1
     e94:	11 24       	eor	r1, r1
     e96:	e1 e0       	ldi	r30, 0x01	; 1
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	df 01       	movw	r26, r30
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <gfx_mono_generic_draw_horizontal_line+0x44>
     e9e:	aa 0f       	add	r26, r26
     ea0:	bb 1f       	adc	r27, r27
     ea2:	6a 95       	dec	r22
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <gfx_mono_generic_draw_horizontal_line+0x40>
     ea6:	fa 2e       	mov	r15, r26
     ea8:	21 30       	cpi	r18, 0x01	; 1
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <gfx_mono_generic_draw_horizontal_line+0x56>
     eac:	98 f0       	brcs	.+38     	; 0xed4 <gfx_mono_generic_draw_horizontal_line+0x76>
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	19 f1       	breq	.+70     	; 0xef8 <gfx_mono_generic_draw_horizontal_line+0x9a>
     eb2:	31 c0       	rjmp	.+98     	; 0xf16 <gfx_mono_generic_draw_horizontal_line+0xb8>
     eb4:	c4 2f       	mov	r28, r20
     eb6:	1f ef       	ldi	r17, 0xFF	; 255
     eb8:	18 0f       	add	r17, r24
     eba:	01 2f       	mov	r16, r17
     ebc:	0c 0f       	add	r16, r28
     ebe:	60 2f       	mov	r22, r16
     ec0:	8d 2f       	mov	r24, r29
     ec2:	aa df       	rcall	.-172    	; 0xe18 <gfx_mono_st7565r_get_byte>
     ec4:	4f 2d       	mov	r20, r15
     ec6:	48 2b       	or	r20, r24
     ec8:	60 2f       	mov	r22, r16
     eca:	8d 2f       	mov	r24, r29
     ecc:	86 de       	rcall	.-756    	; 0xbda <gfx_mono_st7565r_put_byte>
     ece:	c1 50       	subi	r28, 0x01	; 1
     ed0:	a1 f7       	brne	.-24     	; 0xeba <gfx_mono_generic_draw_horizontal_line+0x5c>
     ed2:	21 c0       	rjmp	.+66     	; 0xf16 <gfx_mono_generic_draw_horizontal_line+0xb8>
     ed4:	c4 2f       	mov	r28, r20
     ed6:	1f ef       	ldi	r17, 0xFF	; 255
     ed8:	18 0f       	add	r17, r24
     eda:	fa 2e       	mov	r15, r26
     edc:	f0 94       	com	r15
     ede:	01 2f       	mov	r16, r17
     ee0:	0c 0f       	add	r16, r28
     ee2:	60 2f       	mov	r22, r16
     ee4:	8d 2f       	mov	r24, r29
     ee6:	98 df       	rcall	.-208    	; 0xe18 <gfx_mono_st7565r_get_byte>
     ee8:	4f 2d       	mov	r20, r15
     eea:	48 23       	and	r20, r24
     eec:	60 2f       	mov	r22, r16
     eee:	8d 2f       	mov	r24, r29
     ef0:	74 de       	rcall	.-792    	; 0xbda <gfx_mono_st7565r_put_byte>
     ef2:	c1 50       	subi	r28, 0x01	; 1
     ef4:	a1 f7       	brne	.-24     	; 0xede <gfx_mono_generic_draw_horizontal_line+0x80>
     ef6:	0f c0       	rjmp	.+30     	; 0xf16 <gfx_mono_generic_draw_horizontal_line+0xb8>
     ef8:	c4 2f       	mov	r28, r20
     efa:	1f ef       	ldi	r17, 0xFF	; 255
     efc:	18 0f       	add	r17, r24
     efe:	01 2f       	mov	r16, r17
     f00:	0c 0f       	add	r16, r28
     f02:	60 2f       	mov	r22, r16
     f04:	8d 2f       	mov	r24, r29
     f06:	88 df       	rcall	.-240    	; 0xe18 <gfx_mono_st7565r_get_byte>
     f08:	4f 2d       	mov	r20, r15
     f0a:	48 27       	eor	r20, r24
     f0c:	60 2f       	mov	r22, r16
     f0e:	8d 2f       	mov	r24, r29
     f10:	64 de       	rcall	.-824    	; 0xbda <gfx_mono_st7565r_put_byte>
     f12:	c1 50       	subi	r28, 0x01	; 1
     f14:	a1 f7       	brne	.-24     	; 0xefe <gfx_mono_generic_draw_horizontal_line+0xa0>
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	1f 91       	pop	r17
     f1c:	0f 91       	pop	r16
     f1e:	ff 90       	pop	r15
     f20:	08 95       	ret

00000f22 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
	if (height == 0) {
     f2c:	22 23       	and	r18, r18
     f2e:	69 f0       	breq	.+26     	; 0xf4a <gfx_mono_generic_draw_filled_rect+0x28>
     f30:	f4 2e       	mov	r15, r20
     f32:	18 2f       	mov	r17, r24
     f34:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     f36:	df ef       	ldi	r29, 0xFF	; 255
     f38:	d6 0f       	add	r29, r22
     f3a:	6d 2f       	mov	r22, r29
     f3c:	6c 0f       	add	r22, r28
     f3e:	20 2f       	mov	r18, r16
     f40:	4f 2d       	mov	r20, r15
     f42:	81 2f       	mov	r24, r17
     f44:	8c df       	rcall	.-232    	; 0xe5e <gfx_mono_generic_draw_horizontal_line>
     f46:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     f48:	c1 f7       	brne	.-16     	; 0xf3a <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	08 95       	ret

00000f56 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     f56:	af 92       	push	r10
     f58:	bf 92       	push	r11
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	c8 2f       	mov	r28, r24
     f6c:	e6 2e       	mov	r14, r22
     f6e:	b4 2e       	mov	r11, r20
     f70:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     f72:	00 e0       	ldi	r16, 0x00	; 0
     f74:	f9 01       	movw	r30, r18
     f76:	24 81       	ldd	r18, Z+4	; 0x04
     f78:	43 81       	ldd	r20, Z+3	; 0x03
     f7a:	6b 2d       	mov	r22, r11
     f7c:	8e 2d       	mov	r24, r14
     f7e:	d1 df       	rcall	.-94     	; 0xf22 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     f80:	f6 01       	movw	r30, r12
     f82:	80 81       	ld	r24, Z
     f84:	81 11       	cpse	r24, r1
     f86:	39 c0       	rjmp	.+114    	; 0xffa <gfx_mono_draw_char+0xa4>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     f88:	83 81       	ldd	r24, Z+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	26 95       	lsr	r18
     f8e:	26 95       	lsr	r18
     f90:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     f92:	87 70       	andi	r24, 0x07	; 7
     f94:	09 f0       	breq	.+2      	; 0xf98 <gfx_mono_draw_char+0x42>
		char_row_size++;
     f96:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     f98:	f6 01       	movw	r30, r12
     f9a:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     f9c:	8c 2f       	mov	r24, r28
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	35 81       	ldd	r19, Z+5	; 0x05
     fa2:	83 1b       	sub	r24, r19
     fa4:	91 09       	sbc	r25, r1
     fa6:	2a 9d       	mul	r18, r10
     fa8:	90 01       	movw	r18, r0
     faa:	11 24       	eor	r1, r1
     fac:	82 9f       	mul	r24, r18
     fae:	a0 01       	movw	r20, r0
     fb0:	83 9f       	mul	r24, r19
     fb2:	50 0d       	add	r21, r0
     fb4:	92 9f       	mul	r25, r18
     fb6:	50 0d       	add	r21, r0
     fb8:	11 24       	eor	r1, r1
     fba:	01 81       	ldd	r16, Z+1	; 0x01
     fbc:	12 81       	ldd	r17, Z+2	; 0x02
     fbe:	04 0f       	add	r16, r20
     fc0:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     fc2:	f6 01       	movw	r30, r12
     fc4:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     fc6:	ff 20       	and	r15, r15
     fc8:	a1 f0       	breq	.+40     	; 0xff2 <gfx_mono_draw_char+0x9c>
     fca:	d0 e0       	ldi	r29, 0x00	; 0
     fcc:	c0 e0       	ldi	r28, 0x00	; 0
     fce:	8e 2d       	mov	r24, r14
     fd0:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     fd2:	9c 2f       	mov	r25, r28
     fd4:	97 70       	andi	r25, 0x07	; 7
     fd6:	21 f4       	brne	.+8      	; 0xfe0 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     fd8:	f8 01       	movw	r30, r16
     fda:	d4 91       	lpm	r29, Z
				glyph_data++;
     fdc:	0f 5f       	subi	r16, 0xFF	; 255
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
     fe0:	dd 23       	and	r29, r29
     fe2:	1c f4       	brge	.+6      	; 0xfea <gfx_mono_draw_char+0x94>
				gfx_mono_draw_pixel(inc_x, inc_y,
     fe4:	41 e0       	ldi	r20, 0x01	; 1
     fe6:	6b 2d       	mov	r22, r11
     fe8:	e1 de       	rcall	.-574    	; 0xdac <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     fea:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     fec:	cf 5f       	subi	r28, 0xFF	; 255
     fee:	fc 12       	cpse	r15, r28
     ff0:	ee cf       	rjmp	.-36     	; 0xfce <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     ff2:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
     ff4:	aa 94       	dec	r10
	} while (rows_left > 0);
     ff6:	a1 10       	cpse	r10, r1
     ff8:	e4 cf       	rjmp	.-56     	; 0xfc2 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	08 95       	ret

00001010 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	d6 2e       	mov	r13, r22
    1020:	04 2f       	mov	r16, r20
    1022:	79 01       	movw	r14, r18
    1024:	ec 01       	movw	r28, r24
    1026:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    1028:	89 91       	ld	r24, Y+
    102a:	8a 30       	cpi	r24, 0x0A	; 10
    102c:	31 f4       	brne	.+12     	; 0x103a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    102e:	f7 01       	movw	r30, r14
    1030:	84 81       	ldd	r24, Z+4	; 0x04
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    1036:	1d 2d       	mov	r17, r13
    1038:	09 c0       	rjmp	.+18     	; 0x104c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    103a:	8d 30       	cpi	r24, 0x0D	; 13
    103c:	39 f0       	breq	.+14     	; 0x104c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    103e:	97 01       	movw	r18, r14
    1040:	40 2f       	mov	r20, r16
    1042:	61 2f       	mov	r22, r17
    1044:	88 df       	rcall	.-240    	; 0xf56 <gfx_mono_draw_char>
			x += font->width;
    1046:	f7 01       	movw	r30, r14
    1048:	83 81       	ldd	r24, Z+3	; 0x03
    104a:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    104c:	88 81       	ld	r24, Y
    104e:	81 11       	cpse	r24, r1
    1050:	eb cf       	rjmp	.-42     	; 0x1028 <gfx_mono_draw_string+0x18>
}
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	1f 91       	pop	r17
    1058:	0f 91       	pop	r16
    105a:	ff 90       	pop	r15
    105c:	ef 90       	pop	r14
    105e:	df 90       	pop	r13
    1060:	08 95       	ret

00001062 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    106c:	c6 2f       	mov	r28, r22
    106e:	d0 e0       	ldi	r29, 0x00	; 0
    1070:	de 01       	movw	r26, r28
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <ioport_configure_port_pin+0x18>
    1076:	b5 95       	asr	r27
    1078:	a7 95       	ror	r26
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <ioport_configure_port_pin+0x14>
    107e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    1080:	50 8b       	std	Z+16, r21	; 0x10
    1082:	2f 5f       	subi	r18, 0xFF	; 255
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    1088:	28 30       	cpi	r18, 0x08	; 8
    108a:	31 05       	cpc	r19, r1
    108c:	89 f7       	brne	.-30     	; 0x1070 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    108e:	40 ff       	sbrs	r20, 0
    1090:	0a c0       	rjmp	.+20     	; 0x10a6 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    1092:	41 ff       	sbrs	r20, 1
    1094:	03 c0       	rjmp	.+6      	; 0x109c <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    1096:	fc 01       	movw	r30, r24
    1098:	65 83       	std	Z+5, r22	; 0x05
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    109c:	fc 01       	movw	r30, r24
    109e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    10a0:	fc 01       	movw	r30, r24
    10a2:	61 83       	std	Z+1, r22	; 0x01
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    10a6:	fc 01       	movw	r30, r24
    10a8:	62 83       	std	Z+2, r22	; 0x02
	}
}
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    10b0:	80 3a       	cpi	r24, 0xA0	; 160
    10b2:	28 e0       	ldi	r18, 0x08	; 8
    10b4:	92 07       	cpc	r25, r18
    10b6:	21 f4       	brne	.+8      	; 0x10c0 <usart_spi_init+0x10>
    10b8:	60 e1       	ldi	r22, 0x10	; 16
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	63 cd       	rjmp	.-1338   	; 0xb84 <sysclk_enable_module>
    10be:	08 95       	ret
    10c0:	80 3b       	cpi	r24, 0xB0	; 176
    10c2:	28 e0       	ldi	r18, 0x08	; 8
    10c4:	92 07       	cpc	r25, r18
    10c6:	21 f4       	brne	.+8      	; 0x10d0 <usart_spi_init+0x20>
    10c8:	60 e2       	ldi	r22, 0x20	; 32
    10ca:	83 e0       	ldi	r24, 0x03	; 3
    10cc:	5b cd       	rjmp	.-1354   	; 0xb84 <sysclk_enable_module>
    10ce:	08 95       	ret
    10d0:	80 3a       	cpi	r24, 0xA0	; 160
    10d2:	29 e0       	ldi	r18, 0x09	; 9
    10d4:	92 07       	cpc	r25, r18
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <usart_spi_init+0x30>
    10d8:	60 e1       	ldi	r22, 0x10	; 16
    10da:	84 e0       	ldi	r24, 0x04	; 4
    10dc:	53 cd       	rjmp	.-1370   	; 0xb84 <sysclk_enable_module>
    10de:	08 95       	ret
    10e0:	80 3b       	cpi	r24, 0xB0	; 176
    10e2:	29 e0       	ldi	r18, 0x09	; 9
    10e4:	92 07       	cpc	r25, r18
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <usart_spi_init+0x40>
    10e8:	60 e2       	ldi	r22, 0x20	; 32
    10ea:	84 e0       	ldi	r24, 0x04	; 4
    10ec:	4b cd       	rjmp	.-1386   	; 0xb84 <sysclk_enable_module>
    10ee:	08 95       	ret
    10f0:	80 3a       	cpi	r24, 0xA0	; 160
    10f2:	2a e0       	ldi	r18, 0x0A	; 10
    10f4:	92 07       	cpc	r25, r18
    10f6:	21 f4       	brne	.+8      	; 0x1100 <usart_spi_init+0x50>
    10f8:	60 e1       	ldi	r22, 0x10	; 16
    10fa:	85 e0       	ldi	r24, 0x05	; 5
    10fc:	43 cd       	rjmp	.-1402   	; 0xb84 <sysclk_enable_module>
    10fe:	08 95       	ret
    1100:	80 3a       	cpi	r24, 0xA0	; 160
    1102:	9b 40       	sbci	r25, 0x0B	; 11
    1104:	19 f4       	brne	.+6      	; 0x110c <usart_spi_init+0x5c>
    1106:	60 e1       	ldi	r22, 0x10	; 16
    1108:	86 e0       	ldi	r24, 0x06	; 6
    110a:	3c cd       	rjmp	.-1416   	; 0xb84 <sysclk_enable_module>
    110c:	08 95       	ret

0000110e <usart_spi_setup_device>:
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	00 d0       	rcall	.+0      	; 0x1118 <usart_spi_setup_device+0xa>
    1118:	00 d0       	rcall	.+0      	; 0x111a <usart_spi_setup_device+0xc>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	09 83       	std	Y+1, r16	; 0x01
    1120:	1a 83       	std	Y+2, r17	; 0x02
    1122:	2b 83       	std	Y+3, r18	; 0x03
    1124:	3c 83       	std	Y+4, r19	; 0x04
    1126:	4d 83       	std	Y+5, r20	; 0x05
    1128:	1e 82       	std	Y+6, r1	; 0x06
    112a:	be 01       	movw	r22, r28
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	11 d4       	rcall	.+2082   	; 0x1954 <usart_init_spi>
    1132:	26 96       	adiw	r28, 0x06	; 6
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    1142:	fb 01       	movw	r30, r22
    1144:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1146:	e8 2f       	mov	r30, r24
    1148:	e6 95       	lsr	r30
    114a:	e6 95       	lsr	r30
    114c:	e6 95       	lsr	r30
    114e:	40 e2       	ldi	r20, 0x20	; 32
    1150:	e4 9f       	mul	r30, r20
    1152:	f0 01       	movw	r30, r0
    1154:	11 24       	eor	r1, r1
    1156:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1158:	87 70       	andi	r24, 0x07	; 7
    115a:	21 e0       	ldi	r18, 0x01	; 1
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <usart_spi_select_device+0x24>
    1162:	44 0f       	add	r20, r20
    1164:	55 1f       	adc	r21, r21
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    116a:	46 83       	std	Z+6, r20	; 0x06
    116c:	08 95       	ret

0000116e <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    116e:	fb 01       	movw	r30, r22
    1170:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1172:	e8 2f       	mov	r30, r24
    1174:	e6 95       	lsr	r30
    1176:	e6 95       	lsr	r30
    1178:	e6 95       	lsr	r30
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	e4 9f       	mul	r30, r20
    117e:	f0 01       	movw	r30, r0
    1180:	11 24       	eor	r1, r1
    1182:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1184:	87 70       	andi	r24, 0x07	; 7
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <usart_spi_deselect_device+0x24>
    118e:	44 0f       	add	r20, r20
    1190:	55 1f       	adc	r21, r21
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1196:	45 83       	std	Z+5, r20	; 0x05
    1198:	08 95       	ret

0000119a <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    119a:	43 e0       	ldi	r20, 0x03	; 3
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	80 ee       	ldi	r24, 0xE0	; 224
    11a2:	97 e0       	ldi	r25, 0x07	; 7
    11a4:	5e df       	rcall	.-324    	; 0x1062 <ioport_configure_port_pin>
    11a6:	43 e0       	ldi	r20, 0x03	; 3
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	62 e0       	ldi	r22, 0x02	; 2
    11ac:	80 ee       	ldi	r24, 0xE0	; 224
    11ae:	97 e0       	ldi	r25, 0x07	; 7
    11b0:	58 df       	rcall	.-336    	; 0x1062 <ioport_configure_port_pin>
    11b2:	43 e0       	ldi	r20, 0x03	; 3
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	60 e1       	ldi	r22, 0x10	; 16
    11b8:	80 e6       	ldi	r24, 0x60	; 96
    11ba:	96 e0       	ldi	r25, 0x06	; 6
    11bc:	52 df       	rcall	.-348    	; 0x1062 <ioport_configure_port_pin>
    11be:	41 e0       	ldi	r20, 0x01	; 1
    11c0:	50 e4       	ldi	r21, 0x40	; 64
    11c2:	60 e2       	ldi	r22, 0x20	; 32
    11c4:	80 e6       	ldi	r24, 0x60	; 96
    11c6:	96 e0       	ldi	r25, 0x06	; 6
    11c8:	4c df       	rcall	.-360    	; 0x1062 <ioport_configure_port_pin>
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	5b e1       	ldi	r21, 0x1B	; 27
    11ce:	60 e2       	ldi	r22, 0x20	; 32
    11d0:	80 e8       	ldi	r24, 0x80	; 128
    11d2:	96 e0       	ldi	r25, 0x06	; 6
    11d4:	46 df       	rcall	.-372    	; 0x1062 <ioport_configure_port_pin>
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	5b e1       	ldi	r21, 0x1B	; 27
    11da:	62 e0       	ldi	r22, 0x02	; 2
    11dc:	80 ea       	ldi	r24, 0xA0	; 160
    11de:	96 e0       	ldi	r25, 0x06	; 6
    11e0:	40 df       	rcall	.-384    	; 0x1062 <ioport_configure_port_pin>
    11e2:	40 e0       	ldi	r20, 0x00	; 0
    11e4:	5b e1       	ldi	r21, 0x1B	; 27
    11e6:	64 e0       	ldi	r22, 0x04	; 4
    11e8:	80 ea       	ldi	r24, 0xA0	; 160
    11ea:	96 e0       	ldi	r25, 0x06	; 6
    11ec:	3a df       	rcall	.-396    	; 0x1062 <ioport_configure_port_pin>
    11ee:	43 e0       	ldi	r20, 0x03	; 3
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	62 e0       	ldi	r22, 0x02	; 2
    11f4:	80 e6       	ldi	r24, 0x60	; 96
    11f6:	96 e0       	ldi	r25, 0x06	; 6
    11f8:	34 df       	rcall	.-408    	; 0x1062 <ioport_configure_port_pin>
    11fa:	43 e0       	ldi	r20, 0x03	; 3
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	68 e0       	ldi	r22, 0x08	; 8
    1200:	80 e6       	ldi	r24, 0x60	; 96
    1202:	96 e0       	ldi	r25, 0x06	; 6
    1204:	2e df       	rcall	.-420    	; 0x1062 <ioport_configure_port_pin>
    1206:	43 e0       	ldi	r20, 0x03	; 3
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	68 e0       	ldi	r22, 0x08	; 8
    120c:	80 ea       	ldi	r24, 0xA0	; 160
    120e:	96 e0       	ldi	r25, 0x06	; 6
    1210:	28 df       	rcall	.-432    	; 0x1062 <ioport_configure_port_pin>
    1212:	43 e0       	ldi	r20, 0x03	; 3
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	80 e6       	ldi	r24, 0x60	; 96
    121a:	96 e0       	ldi	r25, 0x06	; 6
    121c:	22 df       	rcall	.-444    	; 0x1062 <ioport_configure_port_pin>
    121e:	43 e0       	ldi	r20, 0x03	; 3
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	68 e0       	ldi	r22, 0x08	; 8
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	96 e0       	ldi	r25, 0x06	; 6
    1228:	1c df       	rcall	.-456    	; 0x1062 <ioport_configure_port_pin>
    122a:	41 e0       	ldi	r20, 0x01	; 1
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	60 e1       	ldi	r22, 0x10	; 16
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	96 e0       	ldi	r25, 0x06	; 6
    1234:	16 cf       	rjmp	.-468    	; 0x1062 <ioport_configure_port_pin>
    1236:	08 95       	ret

00001238 <adc_set_callback>:
 *
 * \param adc Pointer to ADC module.
 * \param callback Pointer to the callback function to set.
 */
void adc_set_callback(ADC_t *adc, adc_callback_t callback)
{
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	1f 92       	push	r1
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1242:	2f b7       	in	r18, 0x3f	; 63
    1244:	29 83       	std	Y+1, r18	; 0x01
	cpu_irq_disable();
    1246:	f8 94       	cli
	return flags;
    1248:	49 81       	ldd	r20, Y+1	; 0x01
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    124a:	28 2f       	mov	r18, r24
    124c:	39 2f       	mov	r19, r25
    124e:	21 15       	cp	r18, r1
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	38 07       	cpc	r19, r24
    1254:	29 f4       	brne	.+10     	; 0x1260 <adc_set_callback+0x28>
		adca_callback = callback;
    1256:	60 93 44 22 	sts	0x2244, r22	; 0x802244 <adca_callback>
    125a:	70 93 45 22 	sts	0x2245, r23	; 0x802245 <adca_callback+0x1>
    125e:	07 c0       	rjmp	.+14     	; 0x126e <adc_set_callback+0x36>
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    1260:	20 34       	cpi	r18, 0x40	; 64
    1262:	32 40       	sbci	r19, 0x02	; 2
    1264:	21 f4       	brne	.+8      	; 0x126e <adc_set_callback+0x36>
		adcb_callback = callback;
    1266:	60 93 42 22 	sts	0x2242, r22	; 0x802242 <adcb_callback>
    126a:	70 93 43 22 	sts	0x2243, r23	; 0x802243 <adcb_callback+0x1>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    126e:	4f bf       	out	0x3f, r20	; 63
	{
		Assert(0);
	}

	cpu_irq_restore(flags);
}
    1270:	0f 90       	pop	r0
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	08 95       	ret

00001278 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    1278:	81 15       	cp	r24, r1
    127a:	22 e0       	ldi	r18, 0x02	; 2
    127c:	92 07       	cpc	r25, r18
    127e:	61 f4       	brne	.+24     	; 0x1298 <adc_enable_clock+0x20>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    1280:	80 91 3b 22 	lds	r24, 0x223B	; 0x80223b <adca_enable_count>
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	98 0f       	add	r25, r24
    1288:	90 93 3b 22 	sts	0x223B, r25	; 0x80223b <adca_enable_count>
    128c:	81 11       	cpse	r24, r1
    128e:	12 c0       	rjmp	.+36     	; 0x12b4 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1290:	62 e0       	ldi	r22, 0x02	; 2
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	77 cc       	rjmp	.-1810   	; 0xb84 <sysclk_enable_module>
    1296:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    1298:	80 34       	cpi	r24, 0x40	; 64
    129a:	92 40       	sbci	r25, 0x02	; 2
    129c:	59 f4       	brne	.+22     	; 0x12b4 <adc_enable_clock+0x3c>
		Assert(adcb_enable_count < 0xff);
		if (!adcb_enable_count++) {
    129e:	80 91 3a 22 	lds	r24, 0x223A	; 0x80223a <adcb_enable_count>
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	98 0f       	add	r25, r24
    12a6:	90 93 3a 22 	sts	0x223A, r25	; 0x80223a <adcb_enable_count>
    12aa:	81 11       	cpse	r24, r1
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <adc_enable_clock+0x3c>
			sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    12ae:	62 e0       	ldi	r22, 0x02	; 2
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	68 cc       	rjmp	.-1840   	; 0xb84 <sysclk_enable_module>
    12b4:	08 95       	ret

000012b6 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    12b6:	81 15       	cp	r24, r1
    12b8:	22 e0       	ldi	r18, 0x02	; 2
    12ba:	92 07       	cpc	r25, r18
    12bc:	59 f4       	brne	.+22     	; 0x12d4 <adc_disable_clock+0x1e>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    12be:	80 91 3b 22 	lds	r24, 0x223B	; 0x80223b <adca_enable_count>
    12c2:	81 50       	subi	r24, 0x01	; 1
    12c4:	80 93 3b 22 	sts	0x223B, r24	; 0x80223b <adca_enable_count>
    12c8:	81 11       	cpse	r24, r1
    12ca:	11 c0       	rjmp	.+34     	; 0x12ee <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    12cc:	62 e0       	ldi	r22, 0x02	; 2
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	6f cc       	rjmp	.-1826   	; 0xbb0 <sysclk_disable_module>
    12d2:	08 95       	ret
		}
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)(&ADCB)) {
    12d4:	80 34       	cpi	r24, 0x40	; 64
    12d6:	92 40       	sbci	r25, 0x02	; 2
    12d8:	51 f4       	brne	.+20     	; 0x12ee <adc_disable_clock+0x38>
		Assert(adcb_enable_count);
		if (!--adcb_enable_count) {
    12da:	80 91 3a 22 	lds	r24, 0x223A	; 0x80223a <adcb_enable_count>
    12de:	81 50       	subi	r24, 0x01	; 1
    12e0:	80 93 3a 22 	sts	0x223A, r24	; 0x80223a <adcb_enable_count>
    12e4:	81 11       	cpse	r24, r1
    12e6:	03 c0       	rjmp	.+6      	; 0x12ee <adc_disable_clock+0x38>
			sysclk_disable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    12e8:	62 e0       	ldi	r22, 0x02	; 2
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	61 cc       	rjmp	.-1854   	; 0xbb0 <sysclk_disable_module>
    12ee:	08 95       	ret

000012f0 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    12f0:	ef 92       	push	r14
    12f2:	ff 92       	push	r15
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	1f 92       	push	r1
    12fc:	1f 92       	push	r1
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	7c 01       	movw	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1304:	8f b7       	in	r24, 0x3f	; 63
    1306:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1308:	f8 94       	cli
	return flags;
    130a:	19 81       	ldd	r17, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    130c:	c7 01       	movw	r24, r14
    130e:	b4 df       	rcall	.-152    	; 0x1278 <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    1310:	f7 01       	movw	r30, r14
    1312:	80 81       	ld	r24, Z
    1314:	81 60       	ori	r24, 0x01	; 1
    1316:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1318:	1f bf       	out	0x3f, r17	; 63
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    131a:	80 91 3d 22 	lds	r24, 0x223D	; 0x80223d <sleepmgr_locks+0x1>
    131e:	8f 3f       	cpi	r24, 0xFF	; 255
    1320:	09 f4       	brne	.+2      	; 0x1324 <adc_enable+0x34>
    1322:	ff cf       	rjmp	.-2      	; 0x1322 <adc_enable+0x32>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1324:	8f b7       	in	r24, 0x3f	; 63
    1326:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    1328:	f8 94       	cli
	return flags;
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    132c:	ec e3       	ldi	r30, 0x3C	; 60
    132e:	f2 e2       	ldi	r31, 0x22	; 34
    1330:	81 81       	ldd	r24, Z+1	; 0x01
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	81 83       	std	Z+1, r24	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1336:	9f bf       	out	0x3f, r25	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	08 95       	ret

00001348 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	0b b6       	in	r0, 0x3b	; 59
    1354:	0f 92       	push	r0
    1356:	2f 93       	push	r18
    1358:	3f 93       	push	r19
    135a:	4f 93       	push	r20
    135c:	5f 93       	push	r21
    135e:	6f 93       	push	r22
    1360:	7f 93       	push	r23
    1362:	8f 93       	push	r24
    1364:	9f 93       	push	r25
    1366:	af 93       	push	r26
    1368:	bf 93       	push	r27
    136a:	ef 93       	push	r30
    136c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    136e:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    1372:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    1376:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <adca_callback>
    137a:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <adca_callback+0x1>
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	19 95       	eicall
}
    1386:	ff 91       	pop	r31
    1388:	ef 91       	pop	r30
    138a:	bf 91       	pop	r27
    138c:	af 91       	pop	r26
    138e:	9f 91       	pop	r25
    1390:	8f 91       	pop	r24
    1392:	7f 91       	pop	r23
    1394:	6f 91       	pop	r22
    1396:	5f 91       	pop	r21
    1398:	4f 91       	pop	r20
    139a:	3f 91       	pop	r19
    139c:	2f 91       	pop	r18
    139e:	0f 90       	pop	r0
    13a0:	0b be       	out	0x3b, r0	; 59
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f 90       	pop	r0
    13a8:	1f 90       	pop	r1
    13aa:	18 95       	reti

000013ac <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    13ac:	1f 92       	push	r1
    13ae:	0f 92       	push	r0
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	0f 92       	push	r0
    13b4:	11 24       	eor	r1, r1
    13b6:	0b b6       	in	r0, 0x3b	; 59
    13b8:	0f 92       	push	r0
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    13d2:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    13d6:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    13da:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <adca_callback>
    13de:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <adca_callback+0x1>
    13e2:	62 e0       	ldi	r22, 0x02	; 2
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	19 95       	eicall
}
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	bf 91       	pop	r27
    13f0:	af 91       	pop	r26
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	7f 91       	pop	r23
    13f8:	6f 91       	pop	r22
    13fa:	5f 91       	pop	r21
    13fc:	4f 91       	pop	r20
    13fe:	3f 91       	pop	r19
    1400:	2f 91       	pop	r18
    1402:	0f 90       	pop	r0
    1404:	0b be       	out	0x3b, r0	; 59
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	0b b6       	in	r0, 0x3b	; 59
    141c:	0f 92       	push	r0
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    1436:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    143a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    143e:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <adca_callback>
    1442:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <adca_callback+0x1>
    1446:	64 e0       	ldi	r22, 0x04	; 4
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	19 95       	eicall
}
    144e:	ff 91       	pop	r31
    1450:	ef 91       	pop	r30
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	0f 90       	pop	r0
    1468:	0b be       	out	0x3b, r0	; 59
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	0f 90       	pop	r0
    1470:	1f 90       	pop	r1
    1472:	18 95       	reti

00001474 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    1474:	1f 92       	push	r1
    1476:	0f 92       	push	r0
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	0f 92       	push	r0
    147c:	11 24       	eor	r1, r1
    147e:	0b b6       	in	r0, 0x3b	; 59
    1480:	0f 92       	push	r0
    1482:	2f 93       	push	r18
    1484:	3f 93       	push	r19
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	af 93       	push	r26
    1494:	bf 93       	push	r27
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    149a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    149e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    14a2:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <adca_callback>
    14a6:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <adca_callback+0x1>
    14aa:	68 e0       	ldi	r22, 0x08	; 8
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	19 95       	eicall
}
    14b2:	ff 91       	pop	r31
    14b4:	ef 91       	pop	r30
    14b6:	bf 91       	pop	r27
    14b8:	af 91       	pop	r26
    14ba:	9f 91       	pop	r25
    14bc:	8f 91       	pop	r24
    14be:	7f 91       	pop	r23
    14c0:	6f 91       	pop	r22
    14c2:	5f 91       	pop	r21
    14c4:	4f 91       	pop	r20
    14c6:	3f 91       	pop	r19
    14c8:	2f 91       	pop	r18
    14ca:	0f 90       	pop	r0
    14cc:	0b be       	out	0x3b, r0	; 59
    14ce:	0f 90       	pop	r0
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	0f 90       	pop	r0
    14d4:	1f 90       	pop	r1
    14d6:	18 95       	reti

000014d8 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    14d8:	1f 92       	push	r1
    14da:	0f 92       	push	r0
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	0f 92       	push	r0
    14e0:	11 24       	eor	r1, r1
    14e2:	0b b6       	in	r0, 0x3b	; 59
    14e4:	0f 92       	push	r0
    14e6:	2f 93       	push	r18
    14e8:	3f 93       	push	r19
    14ea:	4f 93       	push	r20
    14ec:	5f 93       	push	r21
    14ee:	6f 93       	push	r22
    14f0:	7f 93       	push	r23
    14f2:	8f 93       	push	r24
    14f4:	9f 93       	push	r25
    14f6:	af 93       	push	r26
    14f8:	bf 93       	push	r27
    14fa:	ef 93       	push	r30
    14fc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    14fe:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    1502:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    1506:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <adcb_callback>
    150a:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <adcb_callback+0x1>
    150e:	61 e0       	ldi	r22, 0x01	; 1
    1510:	80 e4       	ldi	r24, 0x40	; 64
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	19 95       	eicall
}
    1516:	ff 91       	pop	r31
    1518:	ef 91       	pop	r30
    151a:	bf 91       	pop	r27
    151c:	af 91       	pop	r26
    151e:	9f 91       	pop	r25
    1520:	8f 91       	pop	r24
    1522:	7f 91       	pop	r23
    1524:	6f 91       	pop	r22
    1526:	5f 91       	pop	r21
    1528:	4f 91       	pop	r20
    152a:	3f 91       	pop	r19
    152c:	2f 91       	pop	r18
    152e:	0f 90       	pop	r0
    1530:	0b be       	out	0x3b, r0	; 59
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	0b b6       	in	r0, 0x3b	; 59
    1548:	0f 92       	push	r0
    154a:	2f 93       	push	r18
    154c:	3f 93       	push	r19
    154e:	4f 93       	push	r20
    1550:	5f 93       	push	r21
    1552:	6f 93       	push	r22
    1554:	7f 93       	push	r23
    1556:	8f 93       	push	r24
    1558:	9f 93       	push	r25
    155a:	af 93       	push	r26
    155c:	bf 93       	push	r27
    155e:	ef 93       	push	r30
    1560:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    1562:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    1566:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    156a:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <adcb_callback>
    156e:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <adcb_callback+0x1>
    1572:	62 e0       	ldi	r22, 0x02	; 2
    1574:	80 e4       	ldi	r24, 0x40	; 64
    1576:	92 e0       	ldi	r25, 0x02	; 2
    1578:	19 95       	eicall
}
    157a:	ff 91       	pop	r31
    157c:	ef 91       	pop	r30
    157e:	bf 91       	pop	r27
    1580:	af 91       	pop	r26
    1582:	9f 91       	pop	r25
    1584:	8f 91       	pop	r24
    1586:	7f 91       	pop	r23
    1588:	6f 91       	pop	r22
    158a:	5f 91       	pop	r21
    158c:	4f 91       	pop	r20
    158e:	3f 91       	pop	r19
    1590:	2f 91       	pop	r18
    1592:	0f 90       	pop	r0
    1594:	0b be       	out	0x3b, r0	; 59
    1596:	0f 90       	pop	r0
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	0f 90       	pop	r0
    159c:	1f 90       	pop	r1
    159e:	18 95       	reti

000015a0 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    15a0:	1f 92       	push	r1
    15a2:	0f 92       	push	r0
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	0b b6       	in	r0, 0x3b	; 59
    15ac:	0f 92       	push	r0
    15ae:	2f 93       	push	r18
    15b0:	3f 93       	push	r19
    15b2:	4f 93       	push	r20
    15b4:	5f 93       	push	r21
    15b6:	6f 93       	push	r22
    15b8:	7f 93       	push	r23
    15ba:	8f 93       	push	r24
    15bc:	9f 93       	push	r25
    15be:	af 93       	push	r26
    15c0:	bf 93       	push	r27
    15c2:	ef 93       	push	r30
    15c4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    15c6:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    15ca:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    15ce:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <adcb_callback>
    15d2:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <adcb_callback+0x1>
    15d6:	64 e0       	ldi	r22, 0x04	; 4
    15d8:	80 e4       	ldi	r24, 0x40	; 64
    15da:	92 e0       	ldi	r25, 0x02	; 2
    15dc:	19 95       	eicall
}
    15de:	ff 91       	pop	r31
    15e0:	ef 91       	pop	r30
    15e2:	bf 91       	pop	r27
    15e4:	af 91       	pop	r26
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	7f 91       	pop	r23
    15ec:	6f 91       	pop	r22
    15ee:	5f 91       	pop	r21
    15f0:	4f 91       	pop	r20
    15f2:	3f 91       	pop	r19
    15f4:	2f 91       	pop	r18
    15f6:	0f 90       	pop	r0
    15f8:	0b be       	out	0x3b, r0	; 59
    15fa:	0f 90       	pop	r0
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	0f 90       	pop	r0
    1600:	1f 90       	pop	r1
    1602:	18 95       	reti

00001604 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    1604:	1f 92       	push	r1
    1606:	0f 92       	push	r0
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	0f 92       	push	r0
    160c:	11 24       	eor	r1, r1
    160e:	0b b6       	in	r0, 0x3b	; 59
    1610:	0f 92       	push	r0
    1612:	2f 93       	push	r18
    1614:	3f 93       	push	r19
    1616:	4f 93       	push	r20
    1618:	5f 93       	push	r21
    161a:	6f 93       	push	r22
    161c:	7f 93       	push	r23
    161e:	8f 93       	push	r24
    1620:	9f 93       	push	r25
    1622:	af 93       	push	r26
    1624:	bf 93       	push	r27
    1626:	ef 93       	push	r30
    1628:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    162a:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    162e:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    1632:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <adcb_callback>
    1636:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <adcb_callback+0x1>
    163a:	68 e0       	ldi	r22, 0x08	; 8
    163c:	80 e4       	ldi	r24, 0x40	; 64
    163e:	92 e0       	ldi	r25, 0x02	; 2
    1640:	19 95       	eicall
}
    1642:	ff 91       	pop	r31
    1644:	ef 91       	pop	r30
    1646:	bf 91       	pop	r27
    1648:	af 91       	pop	r26
    164a:	9f 91       	pop	r25
    164c:	8f 91       	pop	r24
    164e:	7f 91       	pop	r23
    1650:	6f 91       	pop	r22
    1652:	5f 91       	pop	r21
    1654:	4f 91       	pop	r20
    1656:	3f 91       	pop	r19
    1658:	2f 91       	pop	r18
    165a:	0f 90       	pop	r0
    165c:	0b be       	out	0x3b, r0	; 59
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	0f 90       	pop	r0
    1664:	1f 90       	pop	r1
    1666:	18 95       	reti

00001668 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	1f 92       	push	r1
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	8c 01       	movw	r16, r24
    1682:	7b 01       	movw	r14, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    1684:	81 15       	cp	r24, r1
    1686:	22 e0       	ldi	r18, 0x02	; 2
    1688:	92 07       	cpc	r25, r18
    168a:	71 f4       	brne	.+28     	; 0x16a8 <adc_write_configuration+0x40>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    168c:	61 e2       	ldi	r22, 0x21	; 33
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	25 d1       	rcall	.+586    	; 0x18de <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    1694:	c8 2e       	mov	r12, r24
    1696:	d1 2c       	mov	r13, r1
    1698:	60 e2       	ldi	r22, 0x20	; 32
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	82 e0       	ldi	r24, 0x02	; 2
    169e:	1f d1       	rcall	.+574    	; 0x18de <nvm_read_byte>
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCACAL0);
    16a0:	dc 2c       	mov	r13, r12
    16a2:	cc 24       	eor	r12, r12
    16a4:	c8 2a       	or	r12, r24
    16a6:	10 c0       	rjmp	.+32     	; 0x16c8 <adc_write_configuration+0x60>
		cal = adc_get_calibration_data(ADC_CAL_ADCA);
	} else
#endif

#ifdef ADCB
	if ((uintptr_t)adc == (uintptr_t)&ADCB) {
    16a8:	80 34       	cpi	r24, 0x40	; 64
    16aa:	92 40       	sbci	r25, 0x02	; 2
    16ac:	c1 f5       	brne	.+112    	; 0x171e <adc_write_configuration+0xb6>
    16ae:	65 e2       	ldi	r22, 0x25	; 37
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	14 d1       	rcall	.+552    	; 0x18de <nvm_read_byte>
		break;
#endif

#ifdef ADCB
	case ADC_CAL_ADCB:
		data = nvm_read_production_signature_row(ADCBCAL1);
    16b6:	c8 2e       	mov	r12, r24
    16b8:	d1 2c       	mov	r13, r1
    16ba:	64 e2       	ldi	r22, 0x24	; 36
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	82 e0       	ldi	r24, 0x02	; 2
		data <<= 8;
		data |= nvm_read_production_signature_row(ADCBCAL0);
    16c0:	0e d1       	rcall	.+540    	; 0x18de <nvm_read_byte>
    16c2:	dc 2c       	mov	r13, r12
    16c4:	cc 24       	eor	r12, r12

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    16c6:	c8 2a       	or	r12, r24
	cpu_irq_disable();
    16c8:	8f b7       	in	r24, 0x3f	; 63
	return flags;
    16ca:	89 83       	std	Y+1, r24	; 0x01
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    16cc:	f8 94       	cli
    16ce:	b9 80       	ldd	r11, Y+1	; 0x01
    16d0:	c8 01       	movw	r24, r16
	enable = adc->CTRLA & ADC_ENABLE_bm;
    16d2:	d2 dd       	rcall	.-1116   	; 0x1278 <adc_enable_clock>
    16d4:	f8 01       	movw	r30, r16

	adc->CTRLA = ADC_FLUSH_bm;
    16d6:	80 81       	ld	r24, Z
    16d8:	92 e0       	ldi	r25, 0x02	; 2
	adc->CAL = cal;
    16da:	90 83       	st	Z, r25
    16dc:	c4 86       	std	Z+12, r12	; 0x0c
	adc->CMP = conf->cmp;
    16de:	d5 86       	std	Z+13, r13	; 0x0d
    16e0:	f7 01       	movw	r30, r14
    16e2:	25 81       	ldd	r18, Z+5	; 0x05
    16e4:	36 81       	ldd	r19, Z+6	; 0x06
    16e6:	f8 01       	movw	r30, r16
    16e8:	20 8f       	std	Z+24, r18	; 0x18
	adc->REFCTRL = conf->refctrl;
    16ea:	31 8f       	std	Z+25, r19	; 0x19
    16ec:	f7 01       	movw	r30, r14
    16ee:	92 81       	ldd	r25, Z+2	; 0x02
    16f0:	f8 01       	movw	r30, r16
	adc->PRESCALER = conf->prescaler;
    16f2:	92 83       	std	Z+2, r25	; 0x02
    16f4:	f7 01       	movw	r30, r14
    16f6:	94 81       	ldd	r25, Z+4	; 0x04
    16f8:	f8 01       	movw	r30, r16
	adc->EVCTRL = conf->evctrl;
    16fa:	94 83       	std	Z+4, r25	; 0x04
    16fc:	f7 01       	movw	r30, r14
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	f8 01       	movw	r30, r16
	adc->CTRLB = conf->ctrlb;
    1702:	93 83       	std	Z+3, r25	; 0x03
    1704:	f7 01       	movw	r30, r14
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	f8 01       	movw	r30, r16

	adc->CTRLA = enable | conf->ctrla;
    170a:	91 83       	std	Z+1, r25	; 0x01
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	f7 01       	movw	r30, r14
    1710:	90 81       	ld	r25, Z
    1712:	89 2b       	or	r24, r25

	adc_disable_clock(adc);
    1714:	f8 01       	movw	r30, r16
    1716:	80 83       	st	Z, r24
    1718:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    171a:	cd dd       	rcall	.-1126   	; 0x12b6 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    171c:	bf be       	out	0x3f, r11	; 63
    171e:	0f 90       	pop	r0
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	bf 90       	pop	r11
    1732:	08 95       	ret

00001734 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	1f 92       	push	r1
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	8c 01       	movw	r16, r24
    174a:	7b 01       	movw	r14, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    174c:	8f b7       	in	r24, 0x3f	; 63
    174e:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1750:	f8 94       	cli
	return flags;
    1752:	d9 80       	ldd	r13, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    1754:	c8 01       	movw	r24, r16
    1756:	90 dd       	rcall	.-1248   	; 0x1278 <adc_enable_clock>

	conf->ctrla = adc->CTRLA & ADC_DMASEL_gm;
    1758:	f8 01       	movw	r30, r16
    175a:	80 81       	ld	r24, Z
    175c:	80 7c       	andi	r24, 0xC0	; 192
    175e:	f7 01       	movw	r30, r14
    1760:	80 83       	st	Z, r24

	conf->cmp = adc->CMP;
    1762:	f8 01       	movw	r30, r16
    1764:	80 8d       	ldd	r24, Z+24	; 0x18
    1766:	91 8d       	ldd	r25, Z+25	; 0x19
    1768:	f7 01       	movw	r30, r14
    176a:	85 83       	std	Z+5, r24	; 0x05
    176c:	96 83       	std	Z+6, r25	; 0x06
	conf->refctrl = adc->REFCTRL;
    176e:	f8 01       	movw	r30, r16
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	f7 01       	movw	r30, r14
    1774:	82 83       	std	Z+2, r24	; 0x02
	conf->prescaler = adc->PRESCALER;
    1776:	f8 01       	movw	r30, r16
    1778:	84 81       	ldd	r24, Z+4	; 0x04
    177a:	f7 01       	movw	r30, r14
    177c:	84 83       	std	Z+4, r24	; 0x04
	conf->evctrl = adc->EVCTRL;
    177e:	f8 01       	movw	r30, r16
    1780:	83 81       	ldd	r24, Z+3	; 0x03
    1782:	f7 01       	movw	r30, r14
    1784:	83 83       	std	Z+3, r24	; 0x03
	conf->ctrlb = adc->CTRLB;
    1786:	f8 01       	movw	r30, r16
    1788:	81 81       	ldd	r24, Z+1	; 0x01
    178a:	f7 01       	movw	r30, r14

	adc_disable_clock(adc);
    178c:	81 83       	std	Z+1, r24	; 0x01
    178e:	c8 01       	movw	r24, r16
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1790:	92 dd       	rcall	.-1244   	; 0x12b6 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    1792:	df be       	out	0x3f, r13	; 63
    1794:	0f 90       	pop	r0
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	df 90       	pop	r13
    17a4:	08 95       	ret

000017a6 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    17a6:	af 92       	push	r10
    17a8:	bf 92       	push	r11
    17aa:	cf 92       	push	r12
    17ac:	df 92       	push	r13
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	1f 92       	push	r1
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	6c 01       	movw	r12, r24
    17c2:	b6 2e       	mov	r11, r22
    17c4:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    17c6:	86 2f       	mov	r24, r22
    17c8:	83 70       	andi	r24, 0x03	; 3
    17ca:	29 f4       	brne	.+10     	; 0x17d6 <adcch_write_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    17cc:	96 2f       	mov	r25, r22
    17ce:	96 95       	lsr	r25
    17d0:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <adcch_write_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    17d6:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    17d8:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    17da:	90 ff       	sbrs	r25, 0
		index++;
    17dc:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    17de:	86 01       	movw	r16, r12
    17e0:	00 5e       	subi	r16, 0xE0	; 224
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	98 e0       	ldi	r25, 0x08	; 8
    17e6:	89 9f       	mul	r24, r25
    17e8:	00 0d       	add	r16, r0
    17ea:	11 1d       	adc	r17, r1
    17ec:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    17ee:	8f b7       	in	r24, 0x3f	; 63
    17f0:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    17f2:	f8 94       	cli
	return flags;
    17f4:	a9 80       	ldd	r10, Y+1	; 0x01
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    17f6:	c6 01       	movw	r24, r12
    17f8:	3f dd       	rcall	.-1410   	; 0x1278 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    17fa:	f7 01       	movw	r30, r14
    17fc:	80 81       	ld	r24, Z
    17fe:	f8 01       	movw	r30, r16
    1800:	80 83       	st	Z, r24
	adc_ch->INTCTRL = ch_conf->intctrl;
    1802:	f7 01       	movw	r30, r14
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	f8 01       	movw	r30, r16
    1808:	82 83       	std	Z+2, r24	; 0x02
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    180a:	f7 01       	movw	r30, r14
    180c:	81 81       	ldd	r24, Z+1	; 0x01
    180e:	f8 01       	movw	r30, r16
    1810:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    1812:	b0 fe       	sbrs	r11, 0
    1814:	04 c0       	rjmp	.+8      	; 0x181e <adcch_write_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		adc_ch->SCAN = ch_conf->scan;
    1816:	f7 01       	movw	r30, r14
    1818:	83 81       	ldd	r24, Z+3	; 0x03
    181a:	f8 01       	movw	r30, r16
	}
	adc_disable_clock(adc);
    181c:	86 83       	std	Z+6, r24	; 0x06
    181e:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1820:	4a dd       	rcall	.-1388   	; 0x12b6 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    1822:	af be       	out	0x3f, r10	; 63
    1824:	0f 90       	pop	r0
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	08 95       	ret

0000183c <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    183c:	af 92       	push	r10
    183e:	bf 92       	push	r11
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	1f 92       	push	r1
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	6c 01       	movw	r12, r24
    1858:	b6 2e       	mov	r11, r22
    185a:	7a 01       	movw	r14, r20
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    185c:	86 2f       	mov	r24, r22
    185e:	83 70       	andi	r24, 0x03	; 3
    1860:	29 f4       	brne	.+10     	; 0x186c <adcch_read_configuration+0x30>
		index += 2;
		ch_mask >>= 2;
    1862:	96 2f       	mov	r25, r22
    1864:	96 95       	lsr	r25
    1866:	96 95       	lsr	r25
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
		index += 2;
    1868:	82 e0       	ldi	r24, 0x02	; 2
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <adcch_read_configuration+0x34>
		index += 4;
		ch_mask >>= 4;
	}
#endif
#if ADC_NR_OF_CHANNELS > 2
	if (!(ch_mask & 0x03)) {
    186c:	96 2f       	mov	r25, r22
 * \return Pointer to ADC channel
 */
__always_inline static  ADC_CH_t *adc_get_channel(
		ADC_t *adc, uint8_t ch_mask)
{
	uint8_t index = 0;
    186e:	80 e0       	ldi	r24, 0x00	; 0
		index += 2;
		ch_mask >>= 2;
	}
#endif
#if ADC_NR_OF_CHANNELS > 1
	if (!(ch_mask & 0x01)) {
    1870:	90 ff       	sbrs	r25, 0
		index++;
    1872:	8f 5f       	subi	r24, 0xFF	; 255
	}
#endif

	return (ADC_CH_t *)(&adc->CH0 + index);
    1874:	86 01       	movw	r16, r12
    1876:	00 5e       	subi	r16, 0xE0	; 224
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	98 e0       	ldi	r25, 0x08	; 8
    187c:	89 9f       	mul	r24, r25
    187e:	00 0d       	add	r16, r0
    1880:	11 1d       	adc	r17, r1
    1882:	11 24       	eor	r1, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1884:	8f b7       	in	r24, 0x3f	; 63
    1886:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    1888:	f8 94       	cli
	return flags;
    188a:	a9 80       	ldd	r10, Y+1	; 0x01

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    188c:	c6 01       	movw	r24, r12
    188e:	f4 dc       	rcall	.-1560   	; 0x1278 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    1890:	f8 01       	movw	r30, r16
    1892:	80 81       	ld	r24, Z
    1894:	f7 01       	movw	r30, r14
    1896:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    1898:	f8 01       	movw	r30, r16
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	f7 01       	movw	r30, r14
    189e:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    18a0:	f8 01       	movw	r30, r16
    18a2:	81 81       	ldd	r24, Z+1	; 0x01
    18a4:	f7 01       	movw	r30, r14
    18a6:	81 83       	std	Z+1, r24	; 0x01
	if (ch_mask & ADC_CH0) {
    18a8:	b0 fe       	sbrs	r11, 0
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <adcch_read_configuration+0x78>
		/* USB devices has channel scan available on ADC channel 0 */
		ch_conf->scan = adc_ch->SCAN;
    18ac:	f8 01       	movw	r30, r16
    18ae:	86 81       	ldd	r24, Z+6	; 0x06
    18b0:	f7 01       	movw	r30, r14
	}
	adc_disable_clock(adc);
    18b2:	83 83       	std	Z+3, r24	; 0x03
    18b4:	c6 01       	movw	r24, r12
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    18b6:	ff dc       	rcall	.-1538   	; 0x12b6 <adc_disable_clock>

	cpu_irq_restore(flags);
}
    18b8:	af be       	out	0x3f, r10	; 63
    18ba:	0f 90       	pop	r0
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	ff 90       	pop	r15
    18c6:	ef 90       	pop	r14
    18c8:	df 90       	pop	r13
    18ca:	cf 90       	pop	r12
    18cc:	bf 90       	pop	r11
    18ce:	af 90       	pop	r10
    18d0:	08 95       	ret

000018d2 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    18d2:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    18d4:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    18d6:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    18d8:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    18da:	60 83       	st	Z, r22
	ret                             // Return to caller
    18dc:	08 95       	ret

000018de <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    18de:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    18e2:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    18e4:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    18e6:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    18ea:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    18ec:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    18f0:	08 95       	ret

000018f2 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    18f2:	cf 92       	push	r12
    18f4:	df 92       	push	r13
    18f6:	ef 92       	push	r14
    18f8:	ff 92       	push	r15
    18fa:	0f 93       	push	r16
    18fc:	1f 93       	push	r17
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1904:	d9 01       	movw	r26, r18
    1906:	c8 01       	movw	r24, r16
    1908:	b6 95       	lsr	r27
    190a:	a7 95       	ror	r26
    190c:	97 95       	ror	r25
    190e:	87 95       	ror	r24
    1910:	48 17       	cp	r20, r24
    1912:	59 07       	cpc	r21, r25
    1914:	6a 07       	cpc	r22, r26
    1916:	7b 07       	cpc	r23, r27
    1918:	70 f4       	brcc	.+28     	; 0x1936 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    191a:	6a 01       	movw	r12, r20
    191c:	7b 01       	movw	r14, r22
    191e:	cc 0c       	add	r12, r12
    1920:	dd 1c       	adc	r13, r13
    1922:	ee 1c       	adc	r14, r14
    1924:	ff 1c       	adc	r15, r15
    1926:	c9 01       	movw	r24, r18
    1928:	b8 01       	movw	r22, r16
    192a:	a7 01       	movw	r20, r14
    192c:	96 01       	movw	r18, r12
    192e:	7d d3       	rcall	.+1786   	; 0x202a <__udivmodsi4>
    1930:	21 50       	subi	r18, 0x01	; 1
    1932:	31 09       	sbc	r19, r1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    193a:	83 2f       	mov	r24, r19
    193c:	8f 70       	andi	r24, 0x0F	; 15
    193e:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1940:	2e 83       	std	Y+6, r18	; 0x06
}
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	ff 90       	pop	r15
    194c:	ef 90       	pop	r14
    194e:	df 90       	pop	r13
    1950:	cf 90       	pop	r12
    1952:	08 95       	ret

00001954 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1954:	df 92       	push	r13
    1956:	ef 92       	push	r14
    1958:	ff 92       	push	r15
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
    1962:	1f 92       	push	r1
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	7c 01       	movw	r14, r24
    196a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	09 f4       	brne	.+2      	; 0x1972 <usart_init_spi+0x1e>
    1970:	b2 c1       	rjmp	.+868    	; 0x1cd6 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1972:	80 3c       	cpi	r24, 0xC0	; 192
    1974:	91 05       	cpc	r25, r1
    1976:	21 f4       	brne	.+8      	; 0x1980 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1978:	60 e1       	ldi	r22, 0x10	; 16
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	03 d9       	rcall	.-3578   	; 0xb84 <sysclk_enable_module>
    197e:	ab c1       	rjmp	.+854    	; 0x1cd6 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1980:	80 e8       	ldi	r24, 0x80	; 128
    1982:	e8 16       	cp	r14, r24
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	f8 06       	cpc	r15, r24
    1988:	21 f4       	brne	.+8      	; 0x1992 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    198a:	62 e0       	ldi	r22, 0x02	; 2
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	fa d8       	rcall	.-3596   	; 0xb84 <sysclk_enable_module>
    1990:	a2 c1       	rjmp	.+836    	; 0x1cd6 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1992:	e1 14       	cp	r14, r1
    1994:	e1 e0       	ldi	r30, 0x01	; 1
    1996:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1998:	21 f4       	brne	.+8      	; 0x19a2 <usart_init_spi+0x4e>
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	f2 d8       	rcall	.-3612   	; 0xb84 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    19a0:	9a c1       	rjmp	.+820    	; 0x1cd6 <usart_init_spi+0x382>
    19a2:	f0 e8       	ldi	r31, 0x80	; 128
    19a4:	ef 16       	cp	r14, r31
    19a6:	f3 e0       	ldi	r31, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    19a8:	ff 06       	cpc	r15, r31
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <usart_init_spi+0x60>
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	e9 d8       	rcall	.-3630   	; 0xb84 <sysclk_enable_module>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    19b2:	91 c1       	rjmp	.+802    	; 0x1cd6 <usart_init_spi+0x382>
    19b4:	30 e9       	ldi	r19, 0x90	; 144
    19b6:	e3 16       	cp	r14, r19
    19b8:	33 e0       	ldi	r19, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    19ba:	f3 06       	cpc	r15, r19
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <usart_init_spi+0x72>
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	e0 d8       	rcall	.-3648   	; 0xb84 <sysclk_enable_module>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    19c4:	88 c1       	rjmp	.+784    	; 0x1cd6 <usart_init_spi+0x382>
    19c6:	e1 14       	cp	r14, r1
    19c8:	82 e0       	ldi	r24, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    19ca:	f8 06       	cpc	r15, r24
    19cc:	21 f4       	brne	.+8      	; 0x19d6 <usart_init_spi+0x82>
    19ce:	62 e0       	ldi	r22, 0x02	; 2
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	d8 d8       	rcall	.-3664   	; 0xb84 <sysclk_enable_module>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    19d4:	80 c1       	rjmp	.+768    	; 0x1cd6 <usart_init_spi+0x382>
    19d6:	e0 e4       	ldi	r30, 0x40	; 64
    19d8:	ee 16       	cp	r14, r30
    19da:	e2 e0       	ldi	r30, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    19dc:	fe 06       	cpc	r15, r30
    19de:	21 f4       	brne	.+8      	; 0x19e8 <usart_init_spi+0x94>
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	82 e0       	ldi	r24, 0x02	; 2
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    19e4:	cf d8       	rcall	.-3682   	; 0xb84 <sysclk_enable_module>
    19e6:	77 c1       	rjmp	.+750    	; 0x1cd6 <usart_init_spi+0x382>
    19e8:	f0 e2       	ldi	r31, 0x20	; 32
    19ea:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    19ec:	f3 e0       	ldi	r31, 0x03	; 3
    19ee:	ff 06       	cpc	r15, r31
    19f0:	21 f4       	brne	.+8      	; 0x19fa <usart_init_spi+0xa6>
    19f2:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	c6 d8       	rcall	.-3700   	; 0xb84 <sysclk_enable_module>
    19f8:	6e c1       	rjmp	.+732    	; 0x1cd6 <usart_init_spi+0x382>
    19fa:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    19fc:	38 e0       	ldi	r19, 0x08	; 8
    19fe:	f3 06       	cpc	r15, r19
    1a00:	21 f4       	brne	.+8      	; 0x1a0a <usart_init_spi+0xb6>
    1a02:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	be d8       	rcall	.-3716   	; 0xb84 <sysclk_enable_module>
    1a08:	66 c1       	rjmp	.+716    	; 0x1cd6 <usart_init_spi+0x382>
    1a0a:	e1 14       	cp	r14, r1
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1a0c:	89 e0       	ldi	r24, 0x09	; 9
    1a0e:	f8 06       	cpc	r15, r24
    1a10:	21 f4       	brne	.+8      	; 0x1a1a <usart_init_spi+0xc6>
    1a12:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1a14:	84 e0       	ldi	r24, 0x04	; 4
    1a16:	b6 d8       	rcall	.-3732   	; 0xb84 <sysclk_enable_module>
    1a18:	5e c1       	rjmp	.+700    	; 0x1cd6 <usart_init_spi+0x382>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1a1a:	e1 14       	cp	r14, r1
    1a1c:	ea e0       	ldi	r30, 0x0A	; 10
    1a1e:	fe 06       	cpc	r15, r30
    1a20:	21 f4       	brne	.+8      	; 0x1a2a <usart_init_spi+0xd6>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1a22:	61 e0       	ldi	r22, 0x01	; 1
    1a24:	85 e0       	ldi	r24, 0x05	; 5
    1a26:	ae d8       	rcall	.-3748   	; 0xb84 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1a28:	56 c1       	rjmp	.+684    	; 0x1cd6 <usart_init_spi+0x382>
    1a2a:	e1 14       	cp	r14, r1
    1a2c:	fb e0       	ldi	r31, 0x0B	; 11
    1a2e:	ff 06       	cpc	r15, r31
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1a30:	21 f4       	brne	.+8      	; 0x1a3a <usart_init_spi+0xe6>
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	86 e0       	ldi	r24, 0x06	; 6
    1a36:	a6 d8       	rcall	.-3764   	; 0xb84 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a38:	4e c1       	rjmp	.+668    	; 0x1cd6 <usart_init_spi+0x382>
    1a3a:	30 e4       	ldi	r19, 0x40	; 64
    1a3c:	e3 16       	cp	r14, r19
    1a3e:	38 e0       	ldi	r19, 0x08	; 8
    1a40:	f3 06       	cpc	r15, r19
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1a42:	21 f4       	brne	.+8      	; 0x1a4c <usart_init_spi+0xf8>
    1a44:	62 e0       	ldi	r22, 0x02	; 2
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	9d d8       	rcall	.-3782   	; 0xb84 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1a4a:	45 c1       	rjmp	.+650    	; 0x1cd6 <usart_init_spi+0x382>
    1a4c:	80 e4       	ldi	r24, 0x40	; 64
    1a4e:	e8 16       	cp	r14, r24
    1a50:	89 e0       	ldi	r24, 0x09	; 9
    1a52:	f8 06       	cpc	r15, r24
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1a54:	21 f4       	brne	.+8      	; 0x1a5e <usart_init_spi+0x10a>
    1a56:	62 e0       	ldi	r22, 0x02	; 2
    1a58:	84 e0       	ldi	r24, 0x04	; 4
    1a5a:	94 d8       	rcall	.-3800   	; 0xb84 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1a5c:	3c c1       	rjmp	.+632    	; 0x1cd6 <usart_init_spi+0x382>
    1a5e:	e0 e4       	ldi	r30, 0x40	; 64
    1a60:	ee 16       	cp	r14, r30
    1a62:	ea e0       	ldi	r30, 0x0A	; 10
    1a64:	fe 06       	cpc	r15, r30
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1a66:	21 f4       	brne	.+8      	; 0x1a70 <usart_init_spi+0x11c>
    1a68:	62 e0       	ldi	r22, 0x02	; 2
    1a6a:	85 e0       	ldi	r24, 0x05	; 5
    1a6c:	8b d8       	rcall	.-3818   	; 0xb84 <sysclk_enable_module>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a6e:	33 c1       	rjmp	.+614    	; 0x1cd6 <usart_init_spi+0x382>
    1a70:	f0 e9       	ldi	r31, 0x90	; 144
    1a72:	ef 16       	cp	r14, r31
    1a74:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1a76:	ff 06       	cpc	r15, r31
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <usart_init_spi+0x12e>
    1a7a:	64 e0       	ldi	r22, 0x04	; 4
    1a7c:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1a7e:	82 d8       	rcall	.-3836   	; 0xb84 <sysclk_enable_module>
    1a80:	2a c1       	rjmp	.+596    	; 0x1cd6 <usart_init_spi+0x382>
    1a82:	30 e9       	ldi	r19, 0x90	; 144
    1a84:	e3 16       	cp	r14, r19
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1a86:	39 e0       	ldi	r19, 0x09	; 9
    1a88:	f3 06       	cpc	r15, r19
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <usart_init_spi+0x140>
    1a8c:	64 e0       	ldi	r22, 0x04	; 4
    1a8e:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1a90:	79 d8       	rcall	.-3854   	; 0xb84 <sysclk_enable_module>
    1a92:	21 c1       	rjmp	.+578    	; 0x1cd6 <usart_init_spi+0x382>
    1a94:	80 e9       	ldi	r24, 0x90	; 144
    1a96:	e8 16       	cp	r14, r24
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1a98:	8a e0       	ldi	r24, 0x0A	; 10
    1a9a:	f8 06       	cpc	r15, r24
    1a9c:	21 f4       	brne	.+8      	; 0x1aa6 <usart_init_spi+0x152>
    1a9e:	64 e0       	ldi	r22, 0x04	; 4
    1aa0:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1aa2:	70 d8       	rcall	.-3872   	; 0xb84 <sysclk_enable_module>
    1aa4:	18 c1       	rjmp	.+560    	; 0x1cd6 <usart_init_spi+0x382>
    1aa6:	e0 e9       	ldi	r30, 0x90	; 144
    1aa8:	ee 16       	cp	r14, r30
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1aaa:	eb e0       	ldi	r30, 0x0B	; 11
    1aac:	fe 06       	cpc	r15, r30
    1aae:	21 f4       	brne	.+8      	; 0x1ab8 <usart_init_spi+0x164>
    1ab0:	64 e0       	ldi	r22, 0x04	; 4
    1ab2:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1ab4:	67 d8       	rcall	.-3890   	; 0xb84 <sysclk_enable_module>
    1ab6:	0f c1       	rjmp	.+542    	; 0x1cd6 <usart_init_spi+0x382>
    1ab8:	f0 ec       	ldi	r31, 0xC0	; 192
    1aba:	ef 16       	cp	r14, r31
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1abc:	f8 e0       	ldi	r31, 0x08	; 8
    1abe:	ff 06       	cpc	r15, r31
    1ac0:	21 f4       	brne	.+8      	; 0x1aca <usart_init_spi+0x176>
    1ac2:	68 e0       	ldi	r22, 0x08	; 8
    1ac4:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1ac6:	5e d8       	rcall	.-3908   	; 0xb84 <sysclk_enable_module>
    1ac8:	06 c1       	rjmp	.+524    	; 0x1cd6 <usart_init_spi+0x382>
    1aca:	30 ec       	ldi	r19, 0xC0	; 192
    1acc:	e3 16       	cp	r14, r19
    1ace:	39 e0       	ldi	r19, 0x09	; 9
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1ad0:	f3 06       	cpc	r15, r19
    1ad2:	21 f4       	brne	.+8      	; 0x1adc <usart_init_spi+0x188>
    1ad4:	68 e0       	ldi	r22, 0x08	; 8
    1ad6:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1ad8:	55 d8       	rcall	.-3926   	; 0xb84 <sysclk_enable_module>
    1ada:	fd c0       	rjmp	.+506    	; 0x1cd6 <usart_init_spi+0x382>
    1adc:	80 ea       	ldi	r24, 0xA0	; 160
    1ade:	e8 16       	cp	r14, r24
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1ae0:	88 e0       	ldi	r24, 0x08	; 8
    1ae2:	f8 06       	cpc	r15, r24
    1ae4:	61 f4       	brne	.+24     	; 0x1afe <usart_init_spi+0x1aa>
    1ae6:	60 e1       	ldi	r22, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1ae8:	83 e0       	ldi	r24, 0x03	; 3
    1aea:	4c d8       	rcall	.-3944   	; 0xb84 <sysclk_enable_module>
    1aec:	e0 ea       	ldi	r30, 0xA0	; 160
    1aee:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1af0:	84 81       	ldd	r24, Z+4	; 0x04
    1af2:	8f 7e       	andi	r24, 0xEF	; 239
    1af4:	84 83       	std	Z+4, r24	; 0x04
    1af6:	f8 01       	movw	r30, r16
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1af8:	24 81       	ldd	r18, Z+4	; 0x04
    1afa:	22 50       	subi	r18, 0x02	; 2
    1afc:	4c c0       	rjmp	.+152    	; 0x1b96 <usart_init_spi+0x242>
    1afe:	f0 ea       	ldi	r31, 0xA0	; 160
    1b00:	ef 16       	cp	r14, r31
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1b02:	f9 e0       	ldi	r31, 0x09	; 9
    1b04:	ff 06       	cpc	r15, r31
    1b06:	21 f4       	brne	.+8      	; 0x1b10 <usart_init_spi+0x1bc>
    1b08:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1b0a:	84 e0       	ldi	r24, 0x04	; 4
    1b0c:	3b d8       	rcall	.-3978   	; 0xb84 <sysclk_enable_module>
    1b0e:	e3 c0       	rjmp	.+454    	; 0x1cd6 <usart_init_spi+0x382>
    1b10:	30 ea       	ldi	r19, 0xA0	; 160
    1b12:	e3 16       	cp	r14, r19
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1b14:	3a e0       	ldi	r19, 0x0A	; 10
    1b16:	f3 06       	cpc	r15, r19
    1b18:	21 f4       	brne	.+8      	; 0x1b22 <usart_init_spi+0x1ce>
    1b1a:	60 e1       	ldi	r22, 0x10	; 16
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1b1c:	85 e0       	ldi	r24, 0x05	; 5
    1b1e:	32 d8       	rcall	.-3996   	; 0xb84 <sysclk_enable_module>
    1b20:	da c0       	rjmp	.+436    	; 0x1cd6 <usart_init_spi+0x382>
    1b22:	80 ea       	ldi	r24, 0xA0	; 160
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1b24:	e8 16       	cp	r14, r24
    1b26:	8b e0       	ldi	r24, 0x0B	; 11
    1b28:	f8 06       	cpc	r15, r24
    1b2a:	21 f4       	brne	.+8      	; 0x1b34 <usart_init_spi+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1b2c:	60 e1       	ldi	r22, 0x10	; 16
    1b2e:	86 e0       	ldi	r24, 0x06	; 6
    1b30:	29 d8       	rcall	.-4014   	; 0xb84 <sysclk_enable_module>
    1b32:	d1 c0       	rjmp	.+418    	; 0x1cd6 <usart_init_spi+0x382>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1b34:	e0 eb       	ldi	r30, 0xB0	; 176
    1b36:	ee 16       	cp	r14, r30
    1b38:	e8 e0       	ldi	r30, 0x08	; 8
    1b3a:	fe 06       	cpc	r15, r30
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <usart_init_spi+0x1f2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1b3e:	60 e2       	ldi	r22, 0x20	; 32
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	20 d8       	rcall	.-4032   	; 0xb84 <sysclk_enable_module>
    1b44:	c8 c0       	rjmp	.+400    	; 0x1cd6 <usart_init_spi+0x382>
    1b46:	f0 eb       	ldi	r31, 0xB0	; 176
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1b48:	ef 16       	cp	r14, r31
    1b4a:	f9 e0       	ldi	r31, 0x09	; 9
    1b4c:	ff 06       	cpc	r15, r31
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <usart_init_spi+0x204>
    1b50:	60 e2       	ldi	r22, 0x20	; 32
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1b52:	84 e0       	ldi	r24, 0x04	; 4
    1b54:	17 d8       	rcall	.-4050   	; 0xb84 <sysclk_enable_module>
    1b56:	bf c0       	rjmp	.+382    	; 0x1cd6 <usart_init_spi+0x382>
    1b58:	30 e8       	ldi	r19, 0x80	; 128
    1b5a:	e3 16       	cp	r14, r19
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1b5c:	34 e0       	ldi	r19, 0x04	; 4
    1b5e:	f3 06       	cpc	r15, r19
    1b60:	21 f4       	brne	.+8      	; 0x1b6a <usart_init_spi+0x216>
    1b62:	60 e4       	ldi	r22, 0x40	; 64
    1b64:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1b66:	0e d8       	rcall	.-4068   	; 0xb84 <sysclk_enable_module>
    1b68:	b6 c0       	rjmp	.+364    	; 0x1cd6 <usart_init_spi+0x382>
    1b6a:	80 ea       	ldi	r24, 0xA0	; 160
    1b6c:	e8 16       	cp	r14, r24
    1b6e:	84 e0       	ldi	r24, 0x04	; 4
    1b70:	f8 06       	cpc	r15, r24
    1b72:	21 f4       	brne	.+8      	; 0x1b7c <usart_init_spi+0x228>
    1b74:	60 e4       	ldi	r22, 0x40	; 64
    1b76:	85 e0       	ldi	r24, 0x05	; 5
    1b78:	05 d8       	rcall	.-4086   	; 0xb84 <sysclk_enable_module>
    1b7a:	ad c0       	rjmp	.+346    	; 0x1cd6 <usart_init_spi+0x382>
    1b7c:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1b7e:	84 81       	ldd	r24, Z+4	; 0x04
    1b80:	8f 7e       	andi	r24, 0xEF	; 239
    1b82:	84 83       	std	Z+4, r24	; 0x04
    1b84:	fb 01       	movw	r30, r22
    1b86:	24 81       	ldd	r18, Z+4	; 0x04
    1b88:	22 50       	subi	r18, 0x02	; 2
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1b8a:	c7 01       	movw	r24, r14
    1b8c:	f0 ea       	ldi	r31, 0xA0	; 160
    1b8e:	ef 16       	cp	r14, r31
    1b90:	f8 e0       	ldi	r31, 0x08	; 8
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1b92:	ff 06       	cpc	r15, r31
    1b94:	49 f4       	brne	.+18     	; 0x1ba8 <usart_init_spi+0x254>
    1b96:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1b9a:	84 fd       	sbrc	r24, 4
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1b9c:	a5 c0       	rjmp	.+330    	; 0x1ce8 <usart_init_spi+0x394>
    1b9e:	0f 2e       	mov	r0, r31
    1ba0:	f1 e1       	ldi	r31, 0x11	; 17
    1ba2:	df 2e       	mov	r13, r31
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1ba4:	f0 2d       	mov	r31, r0
    1ba6:	a4 c0       	rjmp	.+328    	; 0x1cf0 <usart_init_spi+0x39c>
    1ba8:	80 3b       	cpi	r24, 0xB0	; 176
    1baa:	38 e0       	ldi	r19, 0x08	; 8
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1bac:	93 07       	cpc	r25, r19
    1bae:	91 f0       	breq	.+36     	; 0x1bd4 <usart_init_spi+0x280>
    1bb0:	80 3a       	cpi	r24, 0xA0	; 160
    1bb2:	e9 e0       	ldi	r30, 0x09	; 9
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1bb4:	9e 07       	cpc	r25, r30
    1bb6:	49 f4       	brne	.+18     	; 0x1bca <usart_init_spi+0x276>
    1bb8:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1bbc:	34 fd       	sbrc	r19, 4
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1bbe:	9b c0       	rjmp	.+310    	; 0x1cf6 <usart_init_spi+0x3a2>
    1bc0:	0f 2e       	mov	r0, r31
    1bc2:	f9 e1       	ldi	r31, 0x19	; 25
    1bc4:	df 2e       	mov	r13, r31
    1bc6:	f0 2d       	mov	r31, r0
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1bc8:	16 c0       	rjmp	.+44     	; 0x1bf6 <usart_init_spi+0x2a2>
    1bca:	80 3b       	cpi	r24, 0xB0	; 176
    1bcc:	f9 e0       	ldi	r31, 0x09	; 9
    1bce:	9f 07       	cpc	r25, r31
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1bd0:	f1 f0       	breq	.+60     	; 0x1c0e <usart_init_spi+0x2ba>
    1bd2:	04 c0       	rjmp	.+8      	; 0x1bdc <usart_init_spi+0x288>
    1bd4:	0f 2e       	mov	r0, r31
    1bd6:	f5 e1       	ldi	r31, 0x15	; 21
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1bd8:	df 2e       	mov	r13, r31
    1bda:	f0 2d       	mov	r31, r0
    1bdc:	80 3a       	cpi	r24, 0xA0	; 160
    1bde:	3a e0       	ldi	r19, 0x0A	; 10
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1be0:	93 07       	cpc	r25, r19
    1be2:	49 f4       	brne	.+18     	; 0x1bf6 <usart_init_spi+0x2a2>
    1be4:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1be8:	84 fd       	sbrc	r24, 4
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1bea:	8a c0       	rjmp	.+276    	; 0x1d00 <usart_init_spi+0x3ac>
    1bec:	0f 2e       	mov	r0, r31
    1bee:	f1 e2       	ldi	r31, 0x21	; 33
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1bf0:	df 2e       	mov	r13, r31
    1bf2:	f0 2d       	mov	r31, r0
    1bf4:	15 c0       	rjmp	.+42     	; 0x1c20 <usart_init_spi+0x2cc>
    1bf6:	80 3a       	cpi	r24, 0xA0	; 160
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1bf8:	9b 40       	sbci	r25, 0x0B	; 11
    1bfa:	91 f4       	brne	.+36     	; 0x1c20 <usart_init_spi+0x2cc>
    1bfc:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1c00:	84 fd       	sbrc	r24, 4
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1c02:	0a c0       	rjmp	.+20     	; 0x1c18 <usart_init_spi+0x2c4>
    1c04:	0f 2e       	mov	r0, r31
    1c06:	f9 e2       	ldi	r31, 0x29	; 41
    1c08:	df 2e       	mov	r13, r31
    1c0a:	f0 2d       	mov	r31, r0
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1c0c:	09 c0       	rjmp	.+18     	; 0x1c20 <usart_init_spi+0x2cc>
    1c0e:	0f 2e       	mov	r0, r31
    1c10:	fd e1       	ldi	r31, 0x1D	; 29
    1c12:	df 2e       	mov	r13, r31
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1c14:	f0 2d       	mov	r31, r0
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <usart_init_spi+0x2cc>
    1c18:	0f 2e       	mov	r0, r31
    1c1a:	fd e2       	ldi	r31, 0x2D	; 45
    1c1c:	df 2e       	mov	r13, r31
    1c1e:	f0 2d       	mov	r31, r0
    1c20:	ed 2d       	mov	r30, r13
    1c22:	e6 95       	lsr	r30
    1c24:	e6 95       	lsr	r30
    1c26:	e6 95       	lsr	r30
    1c28:	30 e2       	ldi	r19, 0x20	; 32
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1c2a:	e3 9f       	mul	r30, r19
    1c2c:	f0 01       	movw	r30, r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	fa 5f       	subi	r31, 0xFA	; 250
    1c32:	3d 2d       	mov	r19, r13
    1c34:	37 70       	andi	r19, 0x07	; 7
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1c3a:	03 2e       	mov	r0, r19
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1c3c:	02 c0       	rjmp	.+4      	; 0x1c42 <usart_init_spi+0x2ee>
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	0a 94       	dec	r0
    1c44:	e2 f7       	brpl	.-8      	; 0x1c3e <usart_init_spi+0x2ea>
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1c46:	81 83       	std	Z+1, r24	; 0x01
    1c48:	22 30       	cpi	r18, 0x02	; 2

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1c4a:	10 f0       	brcs	.+4      	; 0x1c50 <usart_init_spi+0x2fc>
    1c4c:	40 e0       	ldi	r20, 0x00	; 0

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c4e:	01 c0       	rjmp	.+2      	; 0x1c52 <usart_init_spi+0x2fe>
    1c50:	40 e4       	ldi	r20, 0x40	; 64
	cpu_irq_disable();
    1c52:	df 01       	movw	r26, r30
	return flags;
    1c54:	50 96       	adiw	r26, 0x10	; 16
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1c56:	a3 0f       	add	r26, r19
    1c58:	b1 1d       	adc	r27, r1
    1c5a:	9f b7       	in	r25, 0x3f	; 63
	*pin_ctrl |= mode;
    1c5c:	99 83       	std	Y+1, r25	; 0x01
    1c5e:	f8 94       	cli
    1c60:	39 81       	ldd	r19, Y+1	; 0x01
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c62:	2c 91       	ld	r18, X
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1c64:	27 70       	andi	r18, 0x07	; 7
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1c66:	2c 93       	st	X, r18
    1c68:	9c 91       	ld	r25, X
    1c6a:	94 2b       	or	r25, r20
    1c6c:	9c 93       	st	X, r25
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1c6e:	3f bf       	out	0x3f, r19	; 63
    1c70:	85 83       	std	Z+5, r24	; 0x05
    1c72:	f7 01       	movw	r30, r14
    1c74:	85 81       	ldd	r24, Z+5	; 0x05
    1c76:	80 6c       	ori	r24, 0xC0	; 192
		usart->CTRLC |= USART_UCPHA_bm;
    1c78:	85 83       	std	Z+5, r24	; 0x05
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	84 81       	ldd	r24, Z+4	; 0x04
    1c7e:	8d 7f       	andi	r24, 0xFD	; 253
    1c80:	81 30       	cpi	r24, 0x01	; 1
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <usart_init_spi+0x33a>
    1c84:	f7 01       	movw	r30, r14
    1c86:	85 81       	ldd	r24, Z+5	; 0x05
    1c88:	82 60       	ori	r24, 0x02	; 2
	}
	if (opt->data_order) {
    1c8a:	85 83       	std	Z+5, r24	; 0x05
    1c8c:	04 c0       	rjmp	.+8      	; 0x1c96 <usart_init_spi+0x342>
    1c8e:	f7 01       	movw	r30, r14
    1c90:	85 81       	ldd	r24, Z+5	; 0x05
		(usart)->CTRLC |= USART_DORD_bm;
    1c92:	8d 7f       	andi	r24, 0xFD	; 253
    1c94:	85 83       	std	Z+5, r24	; 0x05
    1c96:	f8 01       	movw	r30, r16
    1c98:	85 81       	ldd	r24, Z+5	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1c9a:	88 23       	and	r24, r24
    1c9c:	29 f0       	breq	.+10     	; 0x1ca8 <usart_init_spi+0x354>
    1c9e:	f7 01       	movw	r30, r14
    1ca0:	85 81       	ldd	r24, Z+5	; 0x05
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1ca2:	84 60       	ori	r24, 0x04	; 4
    1ca4:	85 83       	std	Z+5, r24	; 0x05
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <usart_init_spi+0x35c>
    1ca8:	f7 01       	movw	r30, r14
    1caa:	85 81       	ldd	r24, Z+5	; 0x05
    1cac:	8b 7f       	andi	r24, 0xFB	; 251
    1cae:	85 83       	std	Z+5, r24	; 0x05
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	40 81       	ld	r20, Z
    1cb4:	51 81       	ldd	r21, Z+1	; 0x01
    1cb6:	62 81       	ldd	r22, Z+2	; 0x02
    1cb8:	73 81       	ldd	r23, Z+3	; 0x03
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1cba:	00 e0       	ldi	r16, 0x00	; 0
    1cbc:	12 e1       	ldi	r17, 0x12	; 18
    1cbe:	2a e7       	ldi	r18, 0x7A	; 122
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1cc2:	c7 01       	movw	r24, r14
    1cc4:	16 de       	rcall	.-980    	; 0x18f2 <usart_spi_set_baudrate>
    1cc6:	f7 01       	movw	r30, r14
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1cc8:	84 81       	ldd	r24, Z+4	; 0x04
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1cca:	88 60       	ori	r24, 0x08	; 8
    1ccc:	84 83       	std	Z+4, r24	; 0x04
    1cce:	84 81       	ldd	r24, Z+4	; 0x04
    1cd0:	80 61       	ori	r24, 0x10	; 16
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1cd2:	84 83       	std	Z+4, r24	; 0x04
    1cd4:	1a c0       	rjmp	.+52     	; 0x1d0a <usart_init_spi+0x3b6>
    1cd6:	f7 01       	movw	r30, r14
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1cd8:	84 81       	ldd	r24, Z+4	; 0x04
    1cda:	8f 7e       	andi	r24, 0xEF	; 239
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1cdc:	84 83       	std	Z+4, r24	; 0x04
    1cde:	f8 01       	movw	r30, r16
    1ce0:	24 81       	ldd	r18, Z+4	; 0x04
    1ce2:	22 50       	subi	r18, 0x02	; 2
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1ce4:	c7 01       	movw	r24, r14
    1ce6:	60 cf       	rjmp	.-320    	; 0x1ba8 <usart_init_spi+0x254>
    1ce8:	0f 2e       	mov	r0, r31
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1cea:	f5 e1       	ldi	r31, 0x15	; 21
    1cec:	df 2e       	mov	r13, r31
    1cee:	f0 2d       	mov	r31, r0
    1cf0:	80 ea       	ldi	r24, 0xA0	; 160
    1cf2:	98 e0       	ldi	r25, 0x08	; 8
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1cf4:	6a cf       	rjmp	.-300    	; 0x1bca <usart_init_spi+0x276>
    1cf6:	0f 2e       	mov	r0, r31
    1cf8:	fd e1       	ldi	r31, 0x1D	; 29
    1cfa:	df 2e       	mov	r13, r31
    1cfc:	f0 2d       	mov	r31, r0
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1cfe:	7b cf       	rjmp	.-266    	; 0x1bf6 <usart_init_spi+0x2a2>
    1d00:	0f 2e       	mov	r0, r31
    1d02:	f5 e2       	ldi	r31, 0x25	; 37
    1d04:	df 2e       	mov	r13, r31
    1d06:	f0 2d       	mov	r31, r0
    1d08:	8b cf       	rjmp	.-234    	; 0x1c20 <usart_init_spi+0x2cc>
    1d0a:	0f 90       	pop	r0
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	df 90       	pop	r13
    1d1a:	08 95       	ret

00001d1c <__subsf3>:
    1d1c:	50 58       	subi	r21, 0x80	; 128

00001d1e <__addsf3>:
    1d1e:	bb 27       	eor	r27, r27
    1d20:	aa 27       	eor	r26, r26
    1d22:	0e d0       	rcall	.+28     	; 0x1d40 <__addsf3x>
    1d24:	e5 c0       	rjmp	.+458    	; 0x1ef0 <__fp_round>
    1d26:	d6 d0       	rcall	.+428    	; 0x1ed4 <__fp_pscA>
    1d28:	30 f0       	brcs	.+12     	; 0x1d36 <__addsf3+0x18>
    1d2a:	db d0       	rcall	.+438    	; 0x1ee2 <__fp_pscB>
    1d2c:	20 f0       	brcs	.+8      	; 0x1d36 <__addsf3+0x18>
    1d2e:	31 f4       	brne	.+12     	; 0x1d3c <__addsf3+0x1e>
    1d30:	9f 3f       	cpi	r25, 0xFF	; 255
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <__addsf3+0x1a>
    1d34:	1e f4       	brtc	.+6      	; 0x1d3c <__addsf3+0x1e>
    1d36:	cb c0       	rjmp	.+406    	; 0x1ece <__fp_nan>
    1d38:	0e f4       	brtc	.+2      	; 0x1d3c <__addsf3+0x1e>
    1d3a:	e0 95       	com	r30
    1d3c:	e7 fb       	bst	r30, 7
    1d3e:	c1 c0       	rjmp	.+386    	; 0x1ec2 <__fp_inf>

00001d40 <__addsf3x>:
    1d40:	e9 2f       	mov	r30, r25
    1d42:	e7 d0       	rcall	.+462    	; 0x1f12 <__fp_split3>
    1d44:	80 f3       	brcs	.-32     	; 0x1d26 <__addsf3+0x8>
    1d46:	ba 17       	cp	r27, r26
    1d48:	62 07       	cpc	r22, r18
    1d4a:	73 07       	cpc	r23, r19
    1d4c:	84 07       	cpc	r24, r20
    1d4e:	95 07       	cpc	r25, r21
    1d50:	18 f0       	brcs	.+6      	; 0x1d58 <__addsf3x+0x18>
    1d52:	71 f4       	brne	.+28     	; 0x1d70 <__addsf3x+0x30>
    1d54:	9e f5       	brtc	.+102    	; 0x1dbc <__addsf3x+0x7c>
    1d56:	ff c0       	rjmp	.+510    	; 0x1f56 <__fp_zero>
    1d58:	0e f4       	brtc	.+2      	; 0x1d5c <__addsf3x+0x1c>
    1d5a:	e0 95       	com	r30
    1d5c:	0b 2e       	mov	r0, r27
    1d5e:	ba 2f       	mov	r27, r26
    1d60:	a0 2d       	mov	r26, r0
    1d62:	0b 01       	movw	r0, r22
    1d64:	b9 01       	movw	r22, r18
    1d66:	90 01       	movw	r18, r0
    1d68:	0c 01       	movw	r0, r24
    1d6a:	ca 01       	movw	r24, r20
    1d6c:	a0 01       	movw	r20, r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	ff 27       	eor	r31, r31
    1d72:	59 1b       	sub	r21, r25
    1d74:	99 f0       	breq	.+38     	; 0x1d9c <__addsf3x+0x5c>
    1d76:	59 3f       	cpi	r21, 0xF9	; 249
    1d78:	50 f4       	brcc	.+20     	; 0x1d8e <__addsf3x+0x4e>
    1d7a:	50 3e       	cpi	r21, 0xE0	; 224
    1d7c:	68 f1       	brcs	.+90     	; 0x1dd8 <__addsf3x+0x98>
    1d7e:	1a 16       	cp	r1, r26
    1d80:	f0 40       	sbci	r31, 0x00	; 0
    1d82:	a2 2f       	mov	r26, r18
    1d84:	23 2f       	mov	r18, r19
    1d86:	34 2f       	mov	r19, r20
    1d88:	44 27       	eor	r20, r20
    1d8a:	58 5f       	subi	r21, 0xF8	; 248
    1d8c:	f3 cf       	rjmp	.-26     	; 0x1d74 <__addsf3x+0x34>
    1d8e:	46 95       	lsr	r20
    1d90:	37 95       	ror	r19
    1d92:	27 95       	ror	r18
    1d94:	a7 95       	ror	r26
    1d96:	f0 40       	sbci	r31, 0x00	; 0
    1d98:	53 95       	inc	r21
    1d9a:	c9 f7       	brne	.-14     	; 0x1d8e <__addsf3x+0x4e>
    1d9c:	7e f4       	brtc	.+30     	; 0x1dbc <__addsf3x+0x7c>
    1d9e:	1f 16       	cp	r1, r31
    1da0:	ba 0b       	sbc	r27, r26
    1da2:	62 0b       	sbc	r22, r18
    1da4:	73 0b       	sbc	r23, r19
    1da6:	84 0b       	sbc	r24, r20
    1da8:	ba f0       	brmi	.+46     	; 0x1dd8 <__addsf3x+0x98>
    1daa:	91 50       	subi	r25, 0x01	; 1
    1dac:	a1 f0       	breq	.+40     	; 0x1dd6 <__addsf3x+0x96>
    1dae:	ff 0f       	add	r31, r31
    1db0:	bb 1f       	adc	r27, r27
    1db2:	66 1f       	adc	r22, r22
    1db4:	77 1f       	adc	r23, r23
    1db6:	88 1f       	adc	r24, r24
    1db8:	c2 f7       	brpl	.-16     	; 0x1daa <__addsf3x+0x6a>
    1dba:	0e c0       	rjmp	.+28     	; 0x1dd8 <__addsf3x+0x98>
    1dbc:	ba 0f       	add	r27, r26
    1dbe:	62 1f       	adc	r22, r18
    1dc0:	73 1f       	adc	r23, r19
    1dc2:	84 1f       	adc	r24, r20
    1dc4:	48 f4       	brcc	.+18     	; 0x1dd8 <__addsf3x+0x98>
    1dc6:	87 95       	ror	r24
    1dc8:	77 95       	ror	r23
    1dca:	67 95       	ror	r22
    1dcc:	b7 95       	ror	r27
    1dce:	f7 95       	ror	r31
    1dd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1dd2:	08 f0       	brcs	.+2      	; 0x1dd6 <__addsf3x+0x96>
    1dd4:	b3 cf       	rjmp	.-154    	; 0x1d3c <__addsf3+0x1e>
    1dd6:	93 95       	inc	r25
    1dd8:	88 0f       	add	r24, r24
    1dda:	08 f0       	brcs	.+2      	; 0x1dde <__addsf3x+0x9e>
    1ddc:	99 27       	eor	r25, r25
    1dde:	ee 0f       	add	r30, r30
    1de0:	97 95       	ror	r25
    1de2:	87 95       	ror	r24
    1de4:	08 95       	ret

00001de6 <__fixsfsi>:
    1de6:	04 d0       	rcall	.+8      	; 0x1df0 <__fixunssfsi>
    1de8:	68 94       	set
    1dea:	b1 11       	cpse	r27, r1
    1dec:	b5 c0       	rjmp	.+362    	; 0x1f58 <__fp_szero>
    1dee:	08 95       	ret

00001df0 <__fixunssfsi>:
    1df0:	98 d0       	rcall	.+304    	; 0x1f22 <__fp_splitA>
    1df2:	88 f0       	brcs	.+34     	; 0x1e16 <__fixunssfsi+0x26>
    1df4:	9f 57       	subi	r25, 0x7F	; 127
    1df6:	90 f0       	brcs	.+36     	; 0x1e1c <__fixunssfsi+0x2c>
    1df8:	b9 2f       	mov	r27, r25
    1dfa:	99 27       	eor	r25, r25
    1dfc:	b7 51       	subi	r27, 0x17	; 23
    1dfe:	a0 f0       	brcs	.+40     	; 0x1e28 <__fixunssfsi+0x38>
    1e00:	d1 f0       	breq	.+52     	; 0x1e36 <__fixunssfsi+0x46>
    1e02:	66 0f       	add	r22, r22
    1e04:	77 1f       	adc	r23, r23
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	1a f0       	brmi	.+6      	; 0x1e12 <__fixunssfsi+0x22>
    1e0c:	ba 95       	dec	r27
    1e0e:	c9 f7       	brne	.-14     	; 0x1e02 <__fixunssfsi+0x12>
    1e10:	12 c0       	rjmp	.+36     	; 0x1e36 <__fixunssfsi+0x46>
    1e12:	b1 30       	cpi	r27, 0x01	; 1
    1e14:	81 f0       	breq	.+32     	; 0x1e36 <__fixunssfsi+0x46>
    1e16:	9f d0       	rcall	.+318    	; 0x1f56 <__fp_zero>
    1e18:	b1 e0       	ldi	r27, 0x01	; 1
    1e1a:	08 95       	ret
    1e1c:	9c c0       	rjmp	.+312    	; 0x1f56 <__fp_zero>
    1e1e:	67 2f       	mov	r22, r23
    1e20:	78 2f       	mov	r23, r24
    1e22:	88 27       	eor	r24, r24
    1e24:	b8 5f       	subi	r27, 0xF8	; 248
    1e26:	39 f0       	breq	.+14     	; 0x1e36 <__fixunssfsi+0x46>
    1e28:	b9 3f       	cpi	r27, 0xF9	; 249
    1e2a:	cc f3       	brlt	.-14     	; 0x1e1e <__fixunssfsi+0x2e>
    1e2c:	86 95       	lsr	r24
    1e2e:	77 95       	ror	r23
    1e30:	67 95       	ror	r22
    1e32:	b3 95       	inc	r27
    1e34:	d9 f7       	brne	.-10     	; 0x1e2c <__fixunssfsi+0x3c>
    1e36:	3e f4       	brtc	.+14     	; 0x1e46 <__fixunssfsi+0x56>
    1e38:	90 95       	com	r25
    1e3a:	80 95       	com	r24
    1e3c:	70 95       	com	r23
    1e3e:	61 95       	neg	r22
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	8f 4f       	sbci	r24, 0xFF	; 255
    1e44:	9f 4f       	sbci	r25, 0xFF	; 255
    1e46:	08 95       	ret

00001e48 <__floatunsisf>:
    1e48:	e8 94       	clt
    1e4a:	09 c0       	rjmp	.+18     	; 0x1e5e <__floatsisf+0x12>

00001e4c <__floatsisf>:
    1e4c:	97 fb       	bst	r25, 7
    1e4e:	3e f4       	brtc	.+14     	; 0x1e5e <__floatsisf+0x12>
    1e50:	90 95       	com	r25
    1e52:	80 95       	com	r24
    1e54:	70 95       	com	r23
    1e56:	61 95       	neg	r22
    1e58:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5e:	99 23       	and	r25, r25
    1e60:	a9 f0       	breq	.+42     	; 0x1e8c <__floatsisf+0x40>
    1e62:	f9 2f       	mov	r31, r25
    1e64:	96 e9       	ldi	r25, 0x96	; 150
    1e66:	bb 27       	eor	r27, r27
    1e68:	93 95       	inc	r25
    1e6a:	f6 95       	lsr	r31
    1e6c:	87 95       	ror	r24
    1e6e:	77 95       	ror	r23
    1e70:	67 95       	ror	r22
    1e72:	b7 95       	ror	r27
    1e74:	f1 11       	cpse	r31, r1
    1e76:	f8 cf       	rjmp	.-16     	; 0x1e68 <__floatsisf+0x1c>
    1e78:	fa f4       	brpl	.+62     	; 0x1eb8 <__floatsisf+0x6c>
    1e7a:	bb 0f       	add	r27, r27
    1e7c:	11 f4       	brne	.+4      	; 0x1e82 <__floatsisf+0x36>
    1e7e:	60 ff       	sbrs	r22, 0
    1e80:	1b c0       	rjmp	.+54     	; 0x1eb8 <__floatsisf+0x6c>
    1e82:	6f 5f       	subi	r22, 0xFF	; 255
    1e84:	7f 4f       	sbci	r23, 0xFF	; 255
    1e86:	8f 4f       	sbci	r24, 0xFF	; 255
    1e88:	9f 4f       	sbci	r25, 0xFF	; 255
    1e8a:	16 c0       	rjmp	.+44     	; 0x1eb8 <__floatsisf+0x6c>
    1e8c:	88 23       	and	r24, r24
    1e8e:	11 f0       	breq	.+4      	; 0x1e94 <__floatsisf+0x48>
    1e90:	96 e9       	ldi	r25, 0x96	; 150
    1e92:	11 c0       	rjmp	.+34     	; 0x1eb6 <__floatsisf+0x6a>
    1e94:	77 23       	and	r23, r23
    1e96:	21 f0       	breq	.+8      	; 0x1ea0 <__floatsisf+0x54>
    1e98:	9e e8       	ldi	r25, 0x8E	; 142
    1e9a:	87 2f       	mov	r24, r23
    1e9c:	76 2f       	mov	r23, r22
    1e9e:	05 c0       	rjmp	.+10     	; 0x1eaa <__floatsisf+0x5e>
    1ea0:	66 23       	and	r22, r22
    1ea2:	71 f0       	breq	.+28     	; 0x1ec0 <__floatsisf+0x74>
    1ea4:	96 e8       	ldi	r25, 0x86	; 134
    1ea6:	86 2f       	mov	r24, r22
    1ea8:	70 e0       	ldi	r23, 0x00	; 0
    1eaa:	60 e0       	ldi	r22, 0x00	; 0
    1eac:	2a f0       	brmi	.+10     	; 0x1eb8 <__floatsisf+0x6c>
    1eae:	9a 95       	dec	r25
    1eb0:	66 0f       	add	r22, r22
    1eb2:	77 1f       	adc	r23, r23
    1eb4:	88 1f       	adc	r24, r24
    1eb6:	da f7       	brpl	.-10     	; 0x1eae <__floatsisf+0x62>
    1eb8:	88 0f       	add	r24, r24
    1eba:	96 95       	lsr	r25
    1ebc:	87 95       	ror	r24
    1ebe:	97 f9       	bld	r25, 7
    1ec0:	08 95       	ret

00001ec2 <__fp_inf>:
    1ec2:	97 f9       	bld	r25, 7
    1ec4:	9f 67       	ori	r25, 0x7F	; 127
    1ec6:	80 e8       	ldi	r24, 0x80	; 128
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	08 95       	ret

00001ece <__fp_nan>:
    1ece:	9f ef       	ldi	r25, 0xFF	; 255
    1ed0:	80 ec       	ldi	r24, 0xC0	; 192
    1ed2:	08 95       	ret

00001ed4 <__fp_pscA>:
    1ed4:	00 24       	eor	r0, r0
    1ed6:	0a 94       	dec	r0
    1ed8:	16 16       	cp	r1, r22
    1eda:	17 06       	cpc	r1, r23
    1edc:	18 06       	cpc	r1, r24
    1ede:	09 06       	cpc	r0, r25
    1ee0:	08 95       	ret

00001ee2 <__fp_pscB>:
    1ee2:	00 24       	eor	r0, r0
    1ee4:	0a 94       	dec	r0
    1ee6:	12 16       	cp	r1, r18
    1ee8:	13 06       	cpc	r1, r19
    1eea:	14 06       	cpc	r1, r20
    1eec:	05 06       	cpc	r0, r21
    1eee:	08 95       	ret

00001ef0 <__fp_round>:
    1ef0:	09 2e       	mov	r0, r25
    1ef2:	03 94       	inc	r0
    1ef4:	00 0c       	add	r0, r0
    1ef6:	11 f4       	brne	.+4      	; 0x1efc <__fp_round+0xc>
    1ef8:	88 23       	and	r24, r24
    1efa:	52 f0       	brmi	.+20     	; 0x1f10 <__fp_round+0x20>
    1efc:	bb 0f       	add	r27, r27
    1efe:	40 f4       	brcc	.+16     	; 0x1f10 <__fp_round+0x20>
    1f00:	bf 2b       	or	r27, r31
    1f02:	11 f4       	brne	.+4      	; 0x1f08 <__fp_round+0x18>
    1f04:	60 ff       	sbrs	r22, 0
    1f06:	04 c0       	rjmp	.+8      	; 0x1f10 <__fp_round+0x20>
    1f08:	6f 5f       	subi	r22, 0xFF	; 255
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	08 95       	ret

00001f12 <__fp_split3>:
    1f12:	57 fd       	sbrc	r21, 7
    1f14:	90 58       	subi	r25, 0x80	; 128
    1f16:	44 0f       	add	r20, r20
    1f18:	55 1f       	adc	r21, r21
    1f1a:	59 f0       	breq	.+22     	; 0x1f32 <__fp_splitA+0x10>
    1f1c:	5f 3f       	cpi	r21, 0xFF	; 255
    1f1e:	71 f0       	breq	.+28     	; 0x1f3c <__fp_splitA+0x1a>
    1f20:	47 95       	ror	r20

00001f22 <__fp_splitA>:
    1f22:	88 0f       	add	r24, r24
    1f24:	97 fb       	bst	r25, 7
    1f26:	99 1f       	adc	r25, r25
    1f28:	61 f0       	breq	.+24     	; 0x1f42 <__fp_splitA+0x20>
    1f2a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f2c:	79 f0       	breq	.+30     	; 0x1f4c <__fp_splitA+0x2a>
    1f2e:	87 95       	ror	r24
    1f30:	08 95       	ret
    1f32:	12 16       	cp	r1, r18
    1f34:	13 06       	cpc	r1, r19
    1f36:	14 06       	cpc	r1, r20
    1f38:	55 1f       	adc	r21, r21
    1f3a:	f2 cf       	rjmp	.-28     	; 0x1f20 <__fp_split3+0xe>
    1f3c:	46 95       	lsr	r20
    1f3e:	f1 df       	rcall	.-30     	; 0x1f22 <__fp_splitA>
    1f40:	08 c0       	rjmp	.+16     	; 0x1f52 <__fp_splitA+0x30>
    1f42:	16 16       	cp	r1, r22
    1f44:	17 06       	cpc	r1, r23
    1f46:	18 06       	cpc	r1, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	f1 cf       	rjmp	.-30     	; 0x1f2e <__fp_splitA+0xc>
    1f4c:	86 95       	lsr	r24
    1f4e:	71 05       	cpc	r23, r1
    1f50:	61 05       	cpc	r22, r1
    1f52:	08 94       	sec
    1f54:	08 95       	ret

00001f56 <__fp_zero>:
    1f56:	e8 94       	clt

00001f58 <__fp_szero>:
    1f58:	bb 27       	eor	r27, r27
    1f5a:	66 27       	eor	r22, r22
    1f5c:	77 27       	eor	r23, r23
    1f5e:	cb 01       	movw	r24, r22
    1f60:	97 f9       	bld	r25, 7
    1f62:	08 95       	ret

00001f64 <__mulsf3>:
    1f64:	0b d0       	rcall	.+22     	; 0x1f7c <__mulsf3x>
    1f66:	c4 cf       	rjmp	.-120    	; 0x1ef0 <__fp_round>
    1f68:	b5 df       	rcall	.-150    	; 0x1ed4 <__fp_pscA>
    1f6a:	28 f0       	brcs	.+10     	; 0x1f76 <__mulsf3+0x12>
    1f6c:	ba df       	rcall	.-140    	; 0x1ee2 <__fp_pscB>
    1f6e:	18 f0       	brcs	.+6      	; 0x1f76 <__mulsf3+0x12>
    1f70:	95 23       	and	r25, r21
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <__mulsf3+0x12>
    1f74:	a6 cf       	rjmp	.-180    	; 0x1ec2 <__fp_inf>
    1f76:	ab cf       	rjmp	.-170    	; 0x1ece <__fp_nan>
    1f78:	11 24       	eor	r1, r1
    1f7a:	ee cf       	rjmp	.-36     	; 0x1f58 <__fp_szero>

00001f7c <__mulsf3x>:
    1f7c:	ca df       	rcall	.-108    	; 0x1f12 <__fp_split3>
    1f7e:	a0 f3       	brcs	.-24     	; 0x1f68 <__mulsf3+0x4>

00001f80 <__mulsf3_pse>:
    1f80:	95 9f       	mul	r25, r21
    1f82:	d1 f3       	breq	.-12     	; 0x1f78 <__mulsf3+0x14>
    1f84:	95 0f       	add	r25, r21
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	55 1f       	adc	r21, r21
    1f8a:	62 9f       	mul	r22, r18
    1f8c:	f0 01       	movw	r30, r0
    1f8e:	72 9f       	mul	r23, r18
    1f90:	bb 27       	eor	r27, r27
    1f92:	f0 0d       	add	r31, r0
    1f94:	b1 1d       	adc	r27, r1
    1f96:	63 9f       	mul	r22, r19
    1f98:	aa 27       	eor	r26, r26
    1f9a:	f0 0d       	add	r31, r0
    1f9c:	b1 1d       	adc	r27, r1
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	64 9f       	mul	r22, r20
    1fa2:	66 27       	eor	r22, r22
    1fa4:	b0 0d       	add	r27, r0
    1fa6:	a1 1d       	adc	r26, r1
    1fa8:	66 1f       	adc	r22, r22
    1faa:	82 9f       	mul	r24, r18
    1fac:	22 27       	eor	r18, r18
    1fae:	b0 0d       	add	r27, r0
    1fb0:	a1 1d       	adc	r26, r1
    1fb2:	62 1f       	adc	r22, r18
    1fb4:	73 9f       	mul	r23, r19
    1fb6:	b0 0d       	add	r27, r0
    1fb8:	a1 1d       	adc	r26, r1
    1fba:	62 1f       	adc	r22, r18
    1fbc:	83 9f       	mul	r24, r19
    1fbe:	a0 0d       	add	r26, r0
    1fc0:	61 1d       	adc	r22, r1
    1fc2:	22 1f       	adc	r18, r18
    1fc4:	74 9f       	mul	r23, r20
    1fc6:	33 27       	eor	r19, r19
    1fc8:	a0 0d       	add	r26, r0
    1fca:	61 1d       	adc	r22, r1
    1fcc:	23 1f       	adc	r18, r19
    1fce:	84 9f       	mul	r24, r20
    1fd0:	60 0d       	add	r22, r0
    1fd2:	21 1d       	adc	r18, r1
    1fd4:	82 2f       	mov	r24, r18
    1fd6:	76 2f       	mov	r23, r22
    1fd8:	6a 2f       	mov	r22, r26
    1fda:	11 24       	eor	r1, r1
    1fdc:	9f 57       	subi	r25, 0x7F	; 127
    1fde:	50 40       	sbci	r21, 0x00	; 0
    1fe0:	8a f0       	brmi	.+34     	; 0x2004 <__mulsf3_pse+0x84>
    1fe2:	e1 f0       	breq	.+56     	; 0x201c <__mulsf3_pse+0x9c>
    1fe4:	88 23       	and	r24, r24
    1fe6:	4a f0       	brmi	.+18     	; 0x1ffa <__mulsf3_pse+0x7a>
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	bb 1f       	adc	r27, r27
    1fee:	66 1f       	adc	r22, r22
    1ff0:	77 1f       	adc	r23, r23
    1ff2:	88 1f       	adc	r24, r24
    1ff4:	91 50       	subi	r25, 0x01	; 1
    1ff6:	50 40       	sbci	r21, 0x00	; 0
    1ff8:	a9 f7       	brne	.-22     	; 0x1fe4 <__mulsf3_pse+0x64>
    1ffa:	9e 3f       	cpi	r25, 0xFE	; 254
    1ffc:	51 05       	cpc	r21, r1
    1ffe:	70 f0       	brcs	.+28     	; 0x201c <__mulsf3_pse+0x9c>
    2000:	60 cf       	rjmp	.-320    	; 0x1ec2 <__fp_inf>
    2002:	aa cf       	rjmp	.-172    	; 0x1f58 <__fp_szero>
    2004:	5f 3f       	cpi	r21, 0xFF	; 255
    2006:	ec f3       	brlt	.-6      	; 0x2002 <__mulsf3_pse+0x82>
    2008:	98 3e       	cpi	r25, 0xE8	; 232
    200a:	dc f3       	brlt	.-10     	; 0x2002 <__mulsf3_pse+0x82>
    200c:	86 95       	lsr	r24
    200e:	77 95       	ror	r23
    2010:	67 95       	ror	r22
    2012:	b7 95       	ror	r27
    2014:	f7 95       	ror	r31
    2016:	e7 95       	ror	r30
    2018:	9f 5f       	subi	r25, 0xFF	; 255
    201a:	c1 f7       	brne	.-16     	; 0x200c <__mulsf3_pse+0x8c>
    201c:	fe 2b       	or	r31, r30
    201e:	88 0f       	add	r24, r24
    2020:	91 1d       	adc	r25, r1
    2022:	96 95       	lsr	r25
    2024:	87 95       	ror	r24
    2026:	97 f9       	bld	r25, 7
    2028:	08 95       	ret

0000202a <__udivmodsi4>:
    202a:	a1 e2       	ldi	r26, 0x21	; 33
    202c:	1a 2e       	mov	r1, r26
    202e:	aa 1b       	sub	r26, r26
    2030:	bb 1b       	sub	r27, r27
    2032:	fd 01       	movw	r30, r26
    2034:	0d c0       	rjmp	.+26     	; 0x2050 <__udivmodsi4_ep>

00002036 <__udivmodsi4_loop>:
    2036:	aa 1f       	adc	r26, r26
    2038:	bb 1f       	adc	r27, r27
    203a:	ee 1f       	adc	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	a2 17       	cp	r26, r18
    2040:	b3 07       	cpc	r27, r19
    2042:	e4 07       	cpc	r30, r20
    2044:	f5 07       	cpc	r31, r21
    2046:	20 f0       	brcs	.+8      	; 0x2050 <__udivmodsi4_ep>
    2048:	a2 1b       	sub	r26, r18
    204a:	b3 0b       	sbc	r27, r19
    204c:	e4 0b       	sbc	r30, r20
    204e:	f5 0b       	sbc	r31, r21

00002050 <__udivmodsi4_ep>:
    2050:	66 1f       	adc	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	1a 94       	dec	r1
    205a:	69 f7       	brne	.-38     	; 0x2036 <__udivmodsi4_loop>
    205c:	60 95       	com	r22
    205e:	70 95       	com	r23
    2060:	80 95       	com	r24
    2062:	90 95       	com	r25
    2064:	9b 01       	movw	r18, r22
    2066:	ac 01       	movw	r20, r24
    2068:	bd 01       	movw	r22, r26
    206a:	cf 01       	movw	r24, r30
    206c:	08 95       	ret

0000206e <snprintf>:
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	2e 97       	sbiw	r28, 0x0e	; 14
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0e 89       	ldd	r16, Y+22	; 0x16
    2082:	1f 89       	ldd	r17, Y+23	; 0x17
    2084:	88 8d       	ldd	r24, Y+24	; 0x18
    2086:	99 8d       	ldd	r25, Y+25	; 0x19
    2088:	26 e0       	ldi	r18, 0x06	; 6
    208a:	2c 83       	std	Y+4, r18	; 0x04
    208c:	09 83       	std	Y+1, r16	; 0x01
    208e:	1a 83       	std	Y+2, r17	; 0x02
    2090:	97 ff       	sbrs	r25, 7
    2092:	02 c0       	rjmp	.+4      	; 0x2098 <snprintf+0x2a>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	90 e8       	ldi	r25, 0x80	; 128
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	9e 83       	std	Y+6, r25	; 0x06
    209e:	ae 01       	movw	r20, r28
    20a0:	44 5e       	subi	r20, 0xE4	; 228
    20a2:	5f 4f       	sbci	r21, 0xFF	; 255
    20a4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20a6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20a8:	ce 01       	movw	r24, r28
    20aa:	01 96       	adiw	r24, 0x01	; 1
    20ac:	16 d0       	rcall	.+44     	; 0x20da <vfprintf>
    20ae:	4d 81       	ldd	r20, Y+5	; 0x05
    20b0:	5e 81       	ldd	r21, Y+6	; 0x06
    20b2:	57 fd       	sbrc	r21, 7
    20b4:	0a c0       	rjmp	.+20     	; 0x20ca <snprintf+0x5c>
    20b6:	2f 81       	ldd	r18, Y+7	; 0x07
    20b8:	38 85       	ldd	r19, Y+8	; 0x08
    20ba:	42 17       	cp	r20, r18
    20bc:	53 07       	cpc	r21, r19
    20be:	0c f4       	brge	.+2      	; 0x20c2 <snprintf+0x54>
    20c0:	9a 01       	movw	r18, r20
    20c2:	f8 01       	movw	r30, r16
    20c4:	e2 0f       	add	r30, r18
    20c6:	f3 1f       	adc	r31, r19
    20c8:	10 82       	st	Z, r1
    20ca:	2e 96       	adiw	r28, 0x0e	; 14
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	08 95       	ret

000020da <vfprintf>:
    20da:	2f 92       	push	r2
    20dc:	3f 92       	push	r3
    20de:	4f 92       	push	r4
    20e0:	5f 92       	push	r5
    20e2:	6f 92       	push	r6
    20e4:	7f 92       	push	r7
    20e6:	8f 92       	push	r8
    20e8:	9f 92       	push	r9
    20ea:	af 92       	push	r10
    20ec:	bf 92       	push	r11
    20ee:	cf 92       	push	r12
    20f0:	df 92       	push	r13
    20f2:	ef 92       	push	r14
    20f4:	ff 92       	push	r15
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	2b 97       	sbiw	r28, 0x0b	; 11
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	6c 01       	movw	r12, r24
    210a:	7b 01       	movw	r14, r22
    210c:	8a 01       	movw	r16, r20
    210e:	fc 01       	movw	r30, r24
    2110:	16 82       	std	Z+6, r1	; 0x06
    2112:	17 82       	std	Z+7, r1	; 0x07
    2114:	83 81       	ldd	r24, Z+3	; 0x03
    2116:	81 ff       	sbrs	r24, 1
    2118:	bf c1       	rjmp	.+894    	; 0x2498 <vfprintf+0x3be>
    211a:	ce 01       	movw	r24, r28
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	3c 01       	movw	r6, r24
    2120:	f6 01       	movw	r30, r12
    2122:	93 81       	ldd	r25, Z+3	; 0x03
    2124:	f7 01       	movw	r30, r14
    2126:	93 fd       	sbrc	r25, 3
    2128:	85 91       	lpm	r24, Z+
    212a:	93 ff       	sbrs	r25, 3
    212c:	81 91       	ld	r24, Z+
    212e:	7f 01       	movw	r14, r30
    2130:	88 23       	and	r24, r24
    2132:	09 f4       	brne	.+2      	; 0x2136 <vfprintf+0x5c>
    2134:	ad c1       	rjmp	.+858    	; 0x2490 <vfprintf+0x3b6>
    2136:	85 32       	cpi	r24, 0x25	; 37
    2138:	39 f4       	brne	.+14     	; 0x2148 <vfprintf+0x6e>
    213a:	93 fd       	sbrc	r25, 3
    213c:	85 91       	lpm	r24, Z+
    213e:	93 ff       	sbrs	r25, 3
    2140:	81 91       	ld	r24, Z+
    2142:	7f 01       	movw	r14, r30
    2144:	85 32       	cpi	r24, 0x25	; 37
    2146:	21 f4       	brne	.+8      	; 0x2150 <vfprintf+0x76>
    2148:	b6 01       	movw	r22, r12
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	d3 d1       	rcall	.+934    	; 0x24f4 <fputc>
    214e:	e8 cf       	rjmp	.-48     	; 0x2120 <vfprintf+0x46>
    2150:	91 2c       	mov	r9, r1
    2152:	21 2c       	mov	r2, r1
    2154:	31 2c       	mov	r3, r1
    2156:	ff e1       	ldi	r31, 0x1F	; 31
    2158:	f3 15       	cp	r31, r3
    215a:	d8 f0       	brcs	.+54     	; 0x2192 <vfprintf+0xb8>
    215c:	8b 32       	cpi	r24, 0x2B	; 43
    215e:	79 f0       	breq	.+30     	; 0x217e <vfprintf+0xa4>
    2160:	38 f4       	brcc	.+14     	; 0x2170 <vfprintf+0x96>
    2162:	80 32       	cpi	r24, 0x20	; 32
    2164:	79 f0       	breq	.+30     	; 0x2184 <vfprintf+0xaa>
    2166:	83 32       	cpi	r24, 0x23	; 35
    2168:	a1 f4       	brne	.+40     	; 0x2192 <vfprintf+0xb8>
    216a:	23 2d       	mov	r18, r3
    216c:	20 61       	ori	r18, 0x10	; 16
    216e:	1d c0       	rjmp	.+58     	; 0x21aa <vfprintf+0xd0>
    2170:	8d 32       	cpi	r24, 0x2D	; 45
    2172:	61 f0       	breq	.+24     	; 0x218c <vfprintf+0xb2>
    2174:	80 33       	cpi	r24, 0x30	; 48
    2176:	69 f4       	brne	.+26     	; 0x2192 <vfprintf+0xb8>
    2178:	23 2d       	mov	r18, r3
    217a:	21 60       	ori	r18, 0x01	; 1
    217c:	16 c0       	rjmp	.+44     	; 0x21aa <vfprintf+0xd0>
    217e:	83 2d       	mov	r24, r3
    2180:	82 60       	ori	r24, 0x02	; 2
    2182:	38 2e       	mov	r3, r24
    2184:	e3 2d       	mov	r30, r3
    2186:	e4 60       	ori	r30, 0x04	; 4
    2188:	3e 2e       	mov	r3, r30
    218a:	2a c0       	rjmp	.+84     	; 0x21e0 <vfprintf+0x106>
    218c:	f3 2d       	mov	r31, r3
    218e:	f8 60       	ori	r31, 0x08	; 8
    2190:	1d c0       	rjmp	.+58     	; 0x21cc <vfprintf+0xf2>
    2192:	37 fc       	sbrc	r3, 7
    2194:	2d c0       	rjmp	.+90     	; 0x21f0 <vfprintf+0x116>
    2196:	20 ed       	ldi	r18, 0xD0	; 208
    2198:	28 0f       	add	r18, r24
    219a:	2a 30       	cpi	r18, 0x0A	; 10
    219c:	40 f0       	brcs	.+16     	; 0x21ae <vfprintf+0xd4>
    219e:	8e 32       	cpi	r24, 0x2E	; 46
    21a0:	b9 f4       	brne	.+46     	; 0x21d0 <vfprintf+0xf6>
    21a2:	36 fc       	sbrc	r3, 6
    21a4:	75 c1       	rjmp	.+746    	; 0x2490 <vfprintf+0x3b6>
    21a6:	23 2d       	mov	r18, r3
    21a8:	20 64       	ori	r18, 0x40	; 64
    21aa:	32 2e       	mov	r3, r18
    21ac:	19 c0       	rjmp	.+50     	; 0x21e0 <vfprintf+0x106>
    21ae:	36 fe       	sbrs	r3, 6
    21b0:	06 c0       	rjmp	.+12     	; 0x21be <vfprintf+0xe4>
    21b2:	8a e0       	ldi	r24, 0x0A	; 10
    21b4:	98 9e       	mul	r9, r24
    21b6:	20 0d       	add	r18, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	92 2e       	mov	r9, r18
    21bc:	11 c0       	rjmp	.+34     	; 0x21e0 <vfprintf+0x106>
    21be:	ea e0       	ldi	r30, 0x0A	; 10
    21c0:	2e 9e       	mul	r2, r30
    21c2:	20 0d       	add	r18, r0
    21c4:	11 24       	eor	r1, r1
    21c6:	22 2e       	mov	r2, r18
    21c8:	f3 2d       	mov	r31, r3
    21ca:	f0 62       	ori	r31, 0x20	; 32
    21cc:	3f 2e       	mov	r3, r31
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <vfprintf+0x106>
    21d0:	8c 36       	cpi	r24, 0x6C	; 108
    21d2:	21 f4       	brne	.+8      	; 0x21dc <vfprintf+0x102>
    21d4:	83 2d       	mov	r24, r3
    21d6:	80 68       	ori	r24, 0x80	; 128
    21d8:	38 2e       	mov	r3, r24
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <vfprintf+0x106>
    21dc:	88 36       	cpi	r24, 0x68	; 104
    21de:	41 f4       	brne	.+16     	; 0x21f0 <vfprintf+0x116>
    21e0:	f7 01       	movw	r30, r14
    21e2:	93 fd       	sbrc	r25, 3
    21e4:	85 91       	lpm	r24, Z+
    21e6:	93 ff       	sbrs	r25, 3
    21e8:	81 91       	ld	r24, Z+
    21ea:	7f 01       	movw	r14, r30
    21ec:	81 11       	cpse	r24, r1
    21ee:	b3 cf       	rjmp	.-154    	; 0x2156 <vfprintf+0x7c>
    21f0:	98 2f       	mov	r25, r24
    21f2:	9f 7d       	andi	r25, 0xDF	; 223
    21f4:	95 54       	subi	r25, 0x45	; 69
    21f6:	93 30       	cpi	r25, 0x03	; 3
    21f8:	28 f4       	brcc	.+10     	; 0x2204 <vfprintf+0x12a>
    21fa:	0c 5f       	subi	r16, 0xFC	; 252
    21fc:	1f 4f       	sbci	r17, 0xFF	; 255
    21fe:	9f e3       	ldi	r25, 0x3F	; 63
    2200:	99 83       	std	Y+1, r25	; 0x01
    2202:	0d c0       	rjmp	.+26     	; 0x221e <vfprintf+0x144>
    2204:	83 36       	cpi	r24, 0x63	; 99
    2206:	31 f0       	breq	.+12     	; 0x2214 <vfprintf+0x13a>
    2208:	83 37       	cpi	r24, 0x73	; 115
    220a:	71 f0       	breq	.+28     	; 0x2228 <vfprintf+0x14e>
    220c:	83 35       	cpi	r24, 0x53	; 83
    220e:	09 f0       	breq	.+2      	; 0x2212 <vfprintf+0x138>
    2210:	55 c0       	rjmp	.+170    	; 0x22bc <vfprintf+0x1e2>
    2212:	20 c0       	rjmp	.+64     	; 0x2254 <vfprintf+0x17a>
    2214:	f8 01       	movw	r30, r16
    2216:	80 81       	ld	r24, Z
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	0e 5f       	subi	r16, 0xFE	; 254
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	88 24       	eor	r8, r8
    2220:	83 94       	inc	r8
    2222:	91 2c       	mov	r9, r1
    2224:	53 01       	movw	r10, r6
    2226:	12 c0       	rjmp	.+36     	; 0x224c <vfprintf+0x172>
    2228:	28 01       	movw	r4, r16
    222a:	f2 e0       	ldi	r31, 0x02	; 2
    222c:	4f 0e       	add	r4, r31
    222e:	51 1c       	adc	r5, r1
    2230:	f8 01       	movw	r30, r16
    2232:	a0 80       	ld	r10, Z
    2234:	b1 80       	ldd	r11, Z+1	; 0x01
    2236:	36 fe       	sbrs	r3, 6
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <vfprintf+0x166>
    223a:	69 2d       	mov	r22, r9
    223c:	70 e0       	ldi	r23, 0x00	; 0
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <vfprintf+0x16a>
    2240:	6f ef       	ldi	r22, 0xFF	; 255
    2242:	7f ef       	ldi	r23, 0xFF	; 255
    2244:	c5 01       	movw	r24, r10
    2246:	4b d1       	rcall	.+662    	; 0x24de <strnlen>
    2248:	4c 01       	movw	r8, r24
    224a:	82 01       	movw	r16, r4
    224c:	f3 2d       	mov	r31, r3
    224e:	ff 77       	andi	r31, 0x7F	; 127
    2250:	3f 2e       	mov	r3, r31
    2252:	15 c0       	rjmp	.+42     	; 0x227e <vfprintf+0x1a4>
    2254:	28 01       	movw	r4, r16
    2256:	22 e0       	ldi	r18, 0x02	; 2
    2258:	42 0e       	add	r4, r18
    225a:	51 1c       	adc	r5, r1
    225c:	f8 01       	movw	r30, r16
    225e:	a0 80       	ld	r10, Z
    2260:	b1 80       	ldd	r11, Z+1	; 0x01
    2262:	36 fe       	sbrs	r3, 6
    2264:	03 c0       	rjmp	.+6      	; 0x226c <vfprintf+0x192>
    2266:	69 2d       	mov	r22, r9
    2268:	70 e0       	ldi	r23, 0x00	; 0
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <vfprintf+0x196>
    226c:	6f ef       	ldi	r22, 0xFF	; 255
    226e:	7f ef       	ldi	r23, 0xFF	; 255
    2270:	c5 01       	movw	r24, r10
    2272:	2a d1       	rcall	.+596    	; 0x24c8 <strnlen_P>
    2274:	4c 01       	movw	r8, r24
    2276:	f3 2d       	mov	r31, r3
    2278:	f0 68       	ori	r31, 0x80	; 128
    227a:	3f 2e       	mov	r3, r31
    227c:	82 01       	movw	r16, r4
    227e:	33 fc       	sbrc	r3, 3
    2280:	19 c0       	rjmp	.+50     	; 0x22b4 <vfprintf+0x1da>
    2282:	82 2d       	mov	r24, r2
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	88 16       	cp	r8, r24
    2288:	99 06       	cpc	r9, r25
    228a:	a0 f4       	brcc	.+40     	; 0x22b4 <vfprintf+0x1da>
    228c:	b6 01       	movw	r22, r12
    228e:	80 e2       	ldi	r24, 0x20	; 32
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	30 d1       	rcall	.+608    	; 0x24f4 <fputc>
    2294:	2a 94       	dec	r2
    2296:	f5 cf       	rjmp	.-22     	; 0x2282 <vfprintf+0x1a8>
    2298:	f5 01       	movw	r30, r10
    229a:	37 fc       	sbrc	r3, 7
    229c:	85 91       	lpm	r24, Z+
    229e:	37 fe       	sbrs	r3, 7
    22a0:	81 91       	ld	r24, Z+
    22a2:	5f 01       	movw	r10, r30
    22a4:	b6 01       	movw	r22, r12
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	25 d1       	rcall	.+586    	; 0x24f4 <fputc>
    22aa:	21 10       	cpse	r2, r1
    22ac:	2a 94       	dec	r2
    22ae:	21 e0       	ldi	r18, 0x01	; 1
    22b0:	82 1a       	sub	r8, r18
    22b2:	91 08       	sbc	r9, r1
    22b4:	81 14       	cp	r8, r1
    22b6:	91 04       	cpc	r9, r1
    22b8:	79 f7       	brne	.-34     	; 0x2298 <vfprintf+0x1be>
    22ba:	e1 c0       	rjmp	.+450    	; 0x247e <vfprintf+0x3a4>
    22bc:	84 36       	cpi	r24, 0x64	; 100
    22be:	11 f0       	breq	.+4      	; 0x22c4 <vfprintf+0x1ea>
    22c0:	89 36       	cpi	r24, 0x69	; 105
    22c2:	39 f5       	brne	.+78     	; 0x2312 <vfprintf+0x238>
    22c4:	f8 01       	movw	r30, r16
    22c6:	37 fe       	sbrs	r3, 7
    22c8:	07 c0       	rjmp	.+14     	; 0x22d8 <vfprintf+0x1fe>
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	0c 5f       	subi	r16, 0xFC	; 252
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	08 c0       	rjmp	.+16     	; 0x22e8 <vfprintf+0x20e>
    22d8:	60 81       	ld	r22, Z
    22da:	71 81       	ldd	r23, Z+1	; 0x01
    22dc:	07 2e       	mov	r0, r23
    22de:	00 0c       	add	r0, r0
    22e0:	88 0b       	sbc	r24, r24
    22e2:	99 0b       	sbc	r25, r25
    22e4:	0e 5f       	subi	r16, 0xFE	; 254
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	f3 2d       	mov	r31, r3
    22ea:	ff 76       	andi	r31, 0x6F	; 111
    22ec:	3f 2e       	mov	r3, r31
    22ee:	97 ff       	sbrs	r25, 7
    22f0:	09 c0       	rjmp	.+18     	; 0x2304 <vfprintf+0x22a>
    22f2:	90 95       	com	r25
    22f4:	80 95       	com	r24
    22f6:	70 95       	com	r23
    22f8:	61 95       	neg	r22
    22fa:	7f 4f       	sbci	r23, 0xFF	; 255
    22fc:	8f 4f       	sbci	r24, 0xFF	; 255
    22fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2300:	f0 68       	ori	r31, 0x80	; 128
    2302:	3f 2e       	mov	r3, r31
    2304:	2a e0       	ldi	r18, 0x0A	; 10
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	a3 01       	movw	r20, r6
    230a:	30 d1       	rcall	.+608    	; 0x256c <__ultoa_invert>
    230c:	88 2e       	mov	r8, r24
    230e:	86 18       	sub	r8, r6
    2310:	44 c0       	rjmp	.+136    	; 0x239a <vfprintf+0x2c0>
    2312:	85 37       	cpi	r24, 0x75	; 117
    2314:	31 f4       	brne	.+12     	; 0x2322 <vfprintf+0x248>
    2316:	23 2d       	mov	r18, r3
    2318:	2f 7e       	andi	r18, 0xEF	; 239
    231a:	b2 2e       	mov	r11, r18
    231c:	2a e0       	ldi	r18, 0x0A	; 10
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	25 c0       	rjmp	.+74     	; 0x236c <vfprintf+0x292>
    2322:	93 2d       	mov	r25, r3
    2324:	99 7f       	andi	r25, 0xF9	; 249
    2326:	b9 2e       	mov	r11, r25
    2328:	8f 36       	cpi	r24, 0x6F	; 111
    232a:	c1 f0       	breq	.+48     	; 0x235c <vfprintf+0x282>
    232c:	18 f4       	brcc	.+6      	; 0x2334 <vfprintf+0x25a>
    232e:	88 35       	cpi	r24, 0x58	; 88
    2330:	79 f0       	breq	.+30     	; 0x2350 <vfprintf+0x276>
    2332:	ae c0       	rjmp	.+348    	; 0x2490 <vfprintf+0x3b6>
    2334:	80 37       	cpi	r24, 0x70	; 112
    2336:	19 f0       	breq	.+6      	; 0x233e <vfprintf+0x264>
    2338:	88 37       	cpi	r24, 0x78	; 120
    233a:	21 f0       	breq	.+8      	; 0x2344 <vfprintf+0x26a>
    233c:	a9 c0       	rjmp	.+338    	; 0x2490 <vfprintf+0x3b6>
    233e:	e9 2f       	mov	r30, r25
    2340:	e0 61       	ori	r30, 0x10	; 16
    2342:	be 2e       	mov	r11, r30
    2344:	b4 fe       	sbrs	r11, 4
    2346:	0d c0       	rjmp	.+26     	; 0x2362 <vfprintf+0x288>
    2348:	fb 2d       	mov	r31, r11
    234a:	f4 60       	ori	r31, 0x04	; 4
    234c:	bf 2e       	mov	r11, r31
    234e:	09 c0       	rjmp	.+18     	; 0x2362 <vfprintf+0x288>
    2350:	34 fe       	sbrs	r3, 4
    2352:	0a c0       	rjmp	.+20     	; 0x2368 <vfprintf+0x28e>
    2354:	29 2f       	mov	r18, r25
    2356:	26 60       	ori	r18, 0x06	; 6
    2358:	b2 2e       	mov	r11, r18
    235a:	06 c0       	rjmp	.+12     	; 0x2368 <vfprintf+0x28e>
    235c:	28 e0       	ldi	r18, 0x08	; 8
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	05 c0       	rjmp	.+10     	; 0x236c <vfprintf+0x292>
    2362:	20 e1       	ldi	r18, 0x10	; 16
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	02 c0       	rjmp	.+4      	; 0x236c <vfprintf+0x292>
    2368:	20 e1       	ldi	r18, 0x10	; 16
    236a:	32 e0       	ldi	r19, 0x02	; 2
    236c:	f8 01       	movw	r30, r16
    236e:	b7 fe       	sbrs	r11, 7
    2370:	07 c0       	rjmp	.+14     	; 0x2380 <vfprintf+0x2a6>
    2372:	60 81       	ld	r22, Z
    2374:	71 81       	ldd	r23, Z+1	; 0x01
    2376:	82 81       	ldd	r24, Z+2	; 0x02
    2378:	93 81       	ldd	r25, Z+3	; 0x03
    237a:	0c 5f       	subi	r16, 0xFC	; 252
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
    237e:	06 c0       	rjmp	.+12     	; 0x238c <vfprintf+0x2b2>
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	0e 5f       	subi	r16, 0xFE	; 254
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	a3 01       	movw	r20, r6
    238e:	ee d0       	rcall	.+476    	; 0x256c <__ultoa_invert>
    2390:	88 2e       	mov	r8, r24
    2392:	86 18       	sub	r8, r6
    2394:	fb 2d       	mov	r31, r11
    2396:	ff 77       	andi	r31, 0x7F	; 127
    2398:	3f 2e       	mov	r3, r31
    239a:	36 fe       	sbrs	r3, 6
    239c:	0d c0       	rjmp	.+26     	; 0x23b8 <vfprintf+0x2de>
    239e:	23 2d       	mov	r18, r3
    23a0:	2e 7f       	andi	r18, 0xFE	; 254
    23a2:	a2 2e       	mov	r10, r18
    23a4:	89 14       	cp	r8, r9
    23a6:	58 f4       	brcc	.+22     	; 0x23be <vfprintf+0x2e4>
    23a8:	34 fe       	sbrs	r3, 4
    23aa:	0b c0       	rjmp	.+22     	; 0x23c2 <vfprintf+0x2e8>
    23ac:	32 fc       	sbrc	r3, 2
    23ae:	09 c0       	rjmp	.+18     	; 0x23c2 <vfprintf+0x2e8>
    23b0:	83 2d       	mov	r24, r3
    23b2:	8e 7e       	andi	r24, 0xEE	; 238
    23b4:	a8 2e       	mov	r10, r24
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <vfprintf+0x2e8>
    23b8:	b8 2c       	mov	r11, r8
    23ba:	a3 2c       	mov	r10, r3
    23bc:	03 c0       	rjmp	.+6      	; 0x23c4 <vfprintf+0x2ea>
    23be:	b8 2c       	mov	r11, r8
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <vfprintf+0x2ea>
    23c2:	b9 2c       	mov	r11, r9
    23c4:	a4 fe       	sbrs	r10, 4
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <vfprintf+0x30c>
    23c8:	fe 01       	movw	r30, r28
    23ca:	e8 0d       	add	r30, r8
    23cc:	f1 1d       	adc	r31, r1
    23ce:	80 81       	ld	r24, Z
    23d0:	80 33       	cpi	r24, 0x30	; 48
    23d2:	21 f4       	brne	.+8      	; 0x23dc <vfprintf+0x302>
    23d4:	9a 2d       	mov	r25, r10
    23d6:	99 7e       	andi	r25, 0xE9	; 233
    23d8:	a9 2e       	mov	r10, r25
    23da:	09 c0       	rjmp	.+18     	; 0x23ee <vfprintf+0x314>
    23dc:	a2 fe       	sbrs	r10, 2
    23de:	06 c0       	rjmp	.+12     	; 0x23ec <vfprintf+0x312>
    23e0:	b3 94       	inc	r11
    23e2:	b3 94       	inc	r11
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <vfprintf+0x314>
    23e6:	8a 2d       	mov	r24, r10
    23e8:	86 78       	andi	r24, 0x86	; 134
    23ea:	09 f0       	breq	.+2      	; 0x23ee <vfprintf+0x314>
    23ec:	b3 94       	inc	r11
    23ee:	a3 fc       	sbrc	r10, 3
    23f0:	10 c0       	rjmp	.+32     	; 0x2412 <vfprintf+0x338>
    23f2:	a0 fe       	sbrs	r10, 0
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <vfprintf+0x328>
    23f6:	b2 14       	cp	r11, r2
    23f8:	80 f4       	brcc	.+32     	; 0x241a <vfprintf+0x340>
    23fa:	28 0c       	add	r2, r8
    23fc:	92 2c       	mov	r9, r2
    23fe:	9b 18       	sub	r9, r11
    2400:	0d c0       	rjmp	.+26     	; 0x241c <vfprintf+0x342>
    2402:	b2 14       	cp	r11, r2
    2404:	58 f4       	brcc	.+22     	; 0x241c <vfprintf+0x342>
    2406:	b6 01       	movw	r22, r12
    2408:	80 e2       	ldi	r24, 0x20	; 32
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	73 d0       	rcall	.+230    	; 0x24f4 <fputc>
    240e:	b3 94       	inc	r11
    2410:	f8 cf       	rjmp	.-16     	; 0x2402 <vfprintf+0x328>
    2412:	b2 14       	cp	r11, r2
    2414:	18 f4       	brcc	.+6      	; 0x241c <vfprintf+0x342>
    2416:	2b 18       	sub	r2, r11
    2418:	02 c0       	rjmp	.+4      	; 0x241e <vfprintf+0x344>
    241a:	98 2c       	mov	r9, r8
    241c:	21 2c       	mov	r2, r1
    241e:	a4 fe       	sbrs	r10, 4
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <vfprintf+0x366>
    2422:	b6 01       	movw	r22, r12
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	65 d0       	rcall	.+202    	; 0x24f4 <fputc>
    242a:	a2 fe       	sbrs	r10, 2
    242c:	16 c0       	rjmp	.+44     	; 0x245a <vfprintf+0x380>
    242e:	a1 fc       	sbrc	r10, 1
    2430:	03 c0       	rjmp	.+6      	; 0x2438 <vfprintf+0x35e>
    2432:	88 e7       	ldi	r24, 0x78	; 120
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	02 c0       	rjmp	.+4      	; 0x243c <vfprintf+0x362>
    2438:	88 e5       	ldi	r24, 0x58	; 88
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	b6 01       	movw	r22, r12
    243e:	0c c0       	rjmp	.+24     	; 0x2458 <vfprintf+0x37e>
    2440:	8a 2d       	mov	r24, r10
    2442:	86 78       	andi	r24, 0x86	; 134
    2444:	51 f0       	breq	.+20     	; 0x245a <vfprintf+0x380>
    2446:	a1 fe       	sbrs	r10, 1
    2448:	02 c0       	rjmp	.+4      	; 0x244e <vfprintf+0x374>
    244a:	8b e2       	ldi	r24, 0x2B	; 43
    244c:	01 c0       	rjmp	.+2      	; 0x2450 <vfprintf+0x376>
    244e:	80 e2       	ldi	r24, 0x20	; 32
    2450:	a7 fc       	sbrc	r10, 7
    2452:	8d e2       	ldi	r24, 0x2D	; 45
    2454:	b6 01       	movw	r22, r12
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	4d d0       	rcall	.+154    	; 0x24f4 <fputc>
    245a:	89 14       	cp	r8, r9
    245c:	30 f4       	brcc	.+12     	; 0x246a <vfprintf+0x390>
    245e:	b6 01       	movw	r22, r12
    2460:	80 e3       	ldi	r24, 0x30	; 48
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	47 d0       	rcall	.+142    	; 0x24f4 <fputc>
    2466:	9a 94       	dec	r9
    2468:	f8 cf       	rjmp	.-16     	; 0x245a <vfprintf+0x380>
    246a:	8a 94       	dec	r8
    246c:	f3 01       	movw	r30, r6
    246e:	e8 0d       	add	r30, r8
    2470:	f1 1d       	adc	r31, r1
    2472:	80 81       	ld	r24, Z
    2474:	b6 01       	movw	r22, r12
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	3d d0       	rcall	.+122    	; 0x24f4 <fputc>
    247a:	81 10       	cpse	r8, r1
    247c:	f6 cf       	rjmp	.-20     	; 0x246a <vfprintf+0x390>
    247e:	22 20       	and	r2, r2
    2480:	09 f4       	brne	.+2      	; 0x2484 <vfprintf+0x3aa>
    2482:	4e ce       	rjmp	.-868    	; 0x2120 <vfprintf+0x46>
    2484:	b6 01       	movw	r22, r12
    2486:	80 e2       	ldi	r24, 0x20	; 32
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	34 d0       	rcall	.+104    	; 0x24f4 <fputc>
    248c:	2a 94       	dec	r2
    248e:	f7 cf       	rjmp	.-18     	; 0x247e <vfprintf+0x3a4>
    2490:	f6 01       	movw	r30, r12
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	02 c0       	rjmp	.+4      	; 0x249c <vfprintf+0x3c2>
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	9f ef       	ldi	r25, 0xFF	; 255
    249c:	2b 96       	adiw	r28, 0x0b	; 11
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	de bf       	out	0x3e, r29	; 62
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	ff 90       	pop	r15
    24ac:	ef 90       	pop	r14
    24ae:	df 90       	pop	r13
    24b0:	cf 90       	pop	r12
    24b2:	bf 90       	pop	r11
    24b4:	af 90       	pop	r10
    24b6:	9f 90       	pop	r9
    24b8:	8f 90       	pop	r8
    24ba:	7f 90       	pop	r7
    24bc:	6f 90       	pop	r6
    24be:	5f 90       	pop	r5
    24c0:	4f 90       	pop	r4
    24c2:	3f 90       	pop	r3
    24c4:	2f 90       	pop	r2
    24c6:	08 95       	ret

000024c8 <strnlen_P>:
    24c8:	fc 01       	movw	r30, r24
    24ca:	05 90       	lpm	r0, Z+
    24cc:	61 50       	subi	r22, 0x01	; 1
    24ce:	70 40       	sbci	r23, 0x00	; 0
    24d0:	01 10       	cpse	r0, r1
    24d2:	d8 f7       	brcc	.-10     	; 0x24ca <strnlen_P+0x2>
    24d4:	80 95       	com	r24
    24d6:	90 95       	com	r25
    24d8:	8e 0f       	add	r24, r30
    24da:	9f 1f       	adc	r25, r31
    24dc:	08 95       	ret

000024de <strnlen>:
    24de:	fc 01       	movw	r30, r24
    24e0:	61 50       	subi	r22, 0x01	; 1
    24e2:	70 40       	sbci	r23, 0x00	; 0
    24e4:	01 90       	ld	r0, Z+
    24e6:	01 10       	cpse	r0, r1
    24e8:	d8 f7       	brcc	.-10     	; 0x24e0 <strnlen+0x2>
    24ea:	80 95       	com	r24
    24ec:	90 95       	com	r25
    24ee:	8e 0f       	add	r24, r30
    24f0:	9f 1f       	adc	r25, r31
    24f2:	08 95       	ret

000024f4 <fputc>:
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	fb 01       	movw	r30, r22
    24fe:	23 81       	ldd	r18, Z+3	; 0x03
    2500:	21 fd       	sbrc	r18, 1
    2502:	03 c0       	rjmp	.+6      	; 0x250a <fputc+0x16>
    2504:	8f ef       	ldi	r24, 0xFF	; 255
    2506:	9f ef       	ldi	r25, 0xFF	; 255
    2508:	2c c0       	rjmp	.+88     	; 0x2562 <fputc+0x6e>
    250a:	22 ff       	sbrs	r18, 2
    250c:	16 c0       	rjmp	.+44     	; 0x253a <fputc+0x46>
    250e:	46 81       	ldd	r20, Z+6	; 0x06
    2510:	57 81       	ldd	r21, Z+7	; 0x07
    2512:	24 81       	ldd	r18, Z+4	; 0x04
    2514:	35 81       	ldd	r19, Z+5	; 0x05
    2516:	42 17       	cp	r20, r18
    2518:	53 07       	cpc	r21, r19
    251a:	44 f4       	brge	.+16     	; 0x252c <fputc+0x38>
    251c:	a0 81       	ld	r26, Z
    251e:	b1 81       	ldd	r27, Z+1	; 0x01
    2520:	9d 01       	movw	r18, r26
    2522:	2f 5f       	subi	r18, 0xFF	; 255
    2524:	3f 4f       	sbci	r19, 0xFF	; 255
    2526:	20 83       	st	Z, r18
    2528:	31 83       	std	Z+1, r19	; 0x01
    252a:	8c 93       	st	X, r24
    252c:	26 81       	ldd	r18, Z+6	; 0x06
    252e:	37 81       	ldd	r19, Z+7	; 0x07
    2530:	2f 5f       	subi	r18, 0xFF	; 255
    2532:	3f 4f       	sbci	r19, 0xFF	; 255
    2534:	26 83       	std	Z+6, r18	; 0x06
    2536:	37 83       	std	Z+7, r19	; 0x07
    2538:	14 c0       	rjmp	.+40     	; 0x2562 <fputc+0x6e>
    253a:	8b 01       	movw	r16, r22
    253c:	ec 01       	movw	r28, r24
    253e:	fb 01       	movw	r30, r22
    2540:	00 84       	ldd	r0, Z+8	; 0x08
    2542:	f1 85       	ldd	r31, Z+9	; 0x09
    2544:	e0 2d       	mov	r30, r0
    2546:	19 95       	eicall
    2548:	89 2b       	or	r24, r25
    254a:	e1 f6       	brne	.-72     	; 0x2504 <fputc+0x10>
    254c:	d8 01       	movw	r26, r16
    254e:	16 96       	adiw	r26, 0x06	; 6
    2550:	8d 91       	ld	r24, X+
    2552:	9c 91       	ld	r25, X
    2554:	17 97       	sbiw	r26, 0x07	; 7
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	16 96       	adiw	r26, 0x06	; 6
    255a:	8d 93       	st	X+, r24
    255c:	9c 93       	st	X, r25
    255e:	17 97       	sbiw	r26, 0x07	; 7
    2560:	ce 01       	movw	r24, r28
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	08 95       	ret

0000256c <__ultoa_invert>:
    256c:	fa 01       	movw	r30, r20
    256e:	aa 27       	eor	r26, r26
    2570:	28 30       	cpi	r18, 0x08	; 8
    2572:	51 f1       	breq	.+84     	; 0x25c8 <__ultoa_invert+0x5c>
    2574:	20 31       	cpi	r18, 0x10	; 16
    2576:	81 f1       	breq	.+96     	; 0x25d8 <__ultoa_invert+0x6c>
    2578:	e8 94       	clt
    257a:	6f 93       	push	r22
    257c:	6e 7f       	andi	r22, 0xFE	; 254
    257e:	6e 5f       	subi	r22, 0xFE	; 254
    2580:	7f 4f       	sbci	r23, 0xFF	; 255
    2582:	8f 4f       	sbci	r24, 0xFF	; 255
    2584:	9f 4f       	sbci	r25, 0xFF	; 255
    2586:	af 4f       	sbci	r26, 0xFF	; 255
    2588:	b1 e0       	ldi	r27, 0x01	; 1
    258a:	3e d0       	rcall	.+124    	; 0x2608 <__ultoa_invert+0x9c>
    258c:	b4 e0       	ldi	r27, 0x04	; 4
    258e:	3c d0       	rcall	.+120    	; 0x2608 <__ultoa_invert+0x9c>
    2590:	67 0f       	add	r22, r23
    2592:	78 1f       	adc	r23, r24
    2594:	89 1f       	adc	r24, r25
    2596:	9a 1f       	adc	r25, r26
    2598:	a1 1d       	adc	r26, r1
    259a:	68 0f       	add	r22, r24
    259c:	79 1f       	adc	r23, r25
    259e:	8a 1f       	adc	r24, r26
    25a0:	91 1d       	adc	r25, r1
    25a2:	a1 1d       	adc	r26, r1
    25a4:	6a 0f       	add	r22, r26
    25a6:	71 1d       	adc	r23, r1
    25a8:	81 1d       	adc	r24, r1
    25aa:	91 1d       	adc	r25, r1
    25ac:	a1 1d       	adc	r26, r1
    25ae:	20 d0       	rcall	.+64     	; 0x25f0 <__ultoa_invert+0x84>
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <__ultoa_invert+0x48>
    25b2:	68 94       	set
    25b4:	3f 91       	pop	r19
    25b6:	2a e0       	ldi	r18, 0x0A	; 10
    25b8:	26 9f       	mul	r18, r22
    25ba:	11 24       	eor	r1, r1
    25bc:	30 19       	sub	r19, r0
    25be:	30 5d       	subi	r19, 0xD0	; 208
    25c0:	31 93       	st	Z+, r19
    25c2:	de f6       	brtc	.-74     	; 0x257a <__ultoa_invert+0xe>
    25c4:	cf 01       	movw	r24, r30
    25c6:	08 95       	ret
    25c8:	46 2f       	mov	r20, r22
    25ca:	47 70       	andi	r20, 0x07	; 7
    25cc:	40 5d       	subi	r20, 0xD0	; 208
    25ce:	41 93       	st	Z+, r20
    25d0:	b3 e0       	ldi	r27, 0x03	; 3
    25d2:	0f d0       	rcall	.+30     	; 0x25f2 <__ultoa_invert+0x86>
    25d4:	c9 f7       	brne	.-14     	; 0x25c8 <__ultoa_invert+0x5c>
    25d6:	f6 cf       	rjmp	.-20     	; 0x25c4 <__ultoa_invert+0x58>
    25d8:	46 2f       	mov	r20, r22
    25da:	4f 70       	andi	r20, 0x0F	; 15
    25dc:	40 5d       	subi	r20, 0xD0	; 208
    25de:	4a 33       	cpi	r20, 0x3A	; 58
    25e0:	18 f0       	brcs	.+6      	; 0x25e8 <__ultoa_invert+0x7c>
    25e2:	49 5d       	subi	r20, 0xD9	; 217
    25e4:	31 fd       	sbrc	r19, 1
    25e6:	40 52       	subi	r20, 0x20	; 32
    25e8:	41 93       	st	Z+, r20
    25ea:	02 d0       	rcall	.+4      	; 0x25f0 <__ultoa_invert+0x84>
    25ec:	a9 f7       	brne	.-22     	; 0x25d8 <__ultoa_invert+0x6c>
    25ee:	ea cf       	rjmp	.-44     	; 0x25c4 <__ultoa_invert+0x58>
    25f0:	b4 e0       	ldi	r27, 0x04	; 4
    25f2:	a6 95       	lsr	r26
    25f4:	97 95       	ror	r25
    25f6:	87 95       	ror	r24
    25f8:	77 95       	ror	r23
    25fa:	67 95       	ror	r22
    25fc:	ba 95       	dec	r27
    25fe:	c9 f7       	brne	.-14     	; 0x25f2 <__ultoa_invert+0x86>
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	61 05       	cpc	r22, r1
    2604:	71 05       	cpc	r23, r1
    2606:	08 95       	ret
    2608:	9b 01       	movw	r18, r22
    260a:	ac 01       	movw	r20, r24
    260c:	0a 2e       	mov	r0, r26
    260e:	06 94       	lsr	r0
    2610:	57 95       	ror	r21
    2612:	47 95       	ror	r20
    2614:	37 95       	ror	r19
    2616:	27 95       	ror	r18
    2618:	ba 95       	dec	r27
    261a:	c9 f7       	brne	.-14     	; 0x260e <__ultoa_invert+0xa2>
    261c:	62 0f       	add	r22, r18
    261e:	73 1f       	adc	r23, r19
    2620:	84 1f       	adc	r24, r20
    2622:	95 1f       	adc	r25, r21
    2624:	a0 1d       	adc	r26, r0
    2626:	08 95       	ret

00002628 <_exit>:
    2628:	f8 94       	cli

0000262a <__stop_program>:
    262a:	ff cf       	rjmp	.-2      	; 0x262a <__stop_program>
